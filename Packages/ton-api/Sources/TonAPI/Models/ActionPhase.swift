//
// ActionPhase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ActionPhase: Codable, JSONEncodable, Hashable {

    public var success: Bool
    public var resultCode: Int
    public var totalActions: Int
    public var skippedActions: Int
    public var fwdFees: Int64
    public var totalFees: Int64
    public var resultCodeDescription: String?

    public init(success: Bool, resultCode: Int, totalActions: Int, skippedActions: Int, fwdFees: Int64, totalFees: Int64, resultCodeDescription: String? = nil) {
        self.success = success
        self.resultCode = resultCode
        self.totalActions = totalActions
        self.skippedActions = skippedActions
        self.fwdFees = fwdFees
        self.totalFees = totalFees
        self.resultCodeDescription = resultCodeDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case success
        case resultCode = "result_code"
        case totalActions = "total_actions"
        case skippedActions = "skipped_actions"
        case fwdFees = "fwd_fees"
        case totalFees = "total_fees"
        case resultCodeDescription = "result_code_description"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(success, forKey: .success)
        try container.encode(resultCode, forKey: .resultCode)
        try container.encode(totalActions, forKey: .totalActions)
        try container.encode(skippedActions, forKey: .skippedActions)
        try container.encode(fwdFees, forKey: .fwdFees)
        try container.encode(totalFees, forKey: .totalFees)
        try container.encodeIfPresent(resultCodeDescription, forKey: .resultCodeDescription)
    }
}

