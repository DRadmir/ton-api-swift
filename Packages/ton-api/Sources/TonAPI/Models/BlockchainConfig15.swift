//
// BlockchainConfig15.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** The reward in nanoTons for block creation in the TON blockchain. */
public struct BlockchainConfig15: Codable, JSONEncodable, Hashable {

    public var validatorsElectedFor: Int64
    public var electionsStartBefore: Int64
    public var electionsEndBefore: Int64
    public var stakeHeldFor: Int64

    public init(validatorsElectedFor: Int64, electionsStartBefore: Int64, electionsEndBefore: Int64, stakeHeldFor: Int64) {
        self.validatorsElectedFor = validatorsElectedFor
        self.electionsStartBefore = electionsStartBefore
        self.electionsEndBefore = electionsEndBefore
        self.stakeHeldFor = stakeHeldFor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case validatorsElectedFor = "validators_elected_for"
        case electionsStartBefore = "elections_start_before"
        case electionsEndBefore = "elections_end_before"
        case stakeHeldFor = "stake_held_for"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(validatorsElectedFor, forKey: .validatorsElectedFor)
        try container.encode(electionsStartBefore, forKey: .electionsStartBefore)
        try container.encode(electionsEndBefore, forKey: .electionsEndBefore)
        try container.encode(stakeHeldFor, forKey: .stakeHeldFor)
    }
}

