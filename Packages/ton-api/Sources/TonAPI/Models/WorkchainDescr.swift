//
// WorkchainDescr.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct WorkchainDescr: Codable, JSONEncodable, Hashable {

    public var workchain: Int
    public var enabledSince: Int64
    public var actualMinSplit: Int
    public var minSplit: Int
    public var maxSplit: Int
    public var basic: Int
    public var active: Bool
    public var acceptMsgs: Bool
    public var flags: Int
    public var zerostateRootHash: String
    public var zerostateFileHash: String
    public var version: Int64

    public init(workchain: Int, enabledSince: Int64, actualMinSplit: Int, minSplit: Int, maxSplit: Int, basic: Int, active: Bool, acceptMsgs: Bool, flags: Int, zerostateRootHash: String, zerostateFileHash: String, version: Int64) {
        self.workchain = workchain
        self.enabledSince = enabledSince
        self.actualMinSplit = actualMinSplit
        self.minSplit = minSplit
        self.maxSplit = maxSplit
        self.basic = basic
        self.active = active
        self.acceptMsgs = acceptMsgs
        self.flags = flags
        self.zerostateRootHash = zerostateRootHash
        self.zerostateFileHash = zerostateFileHash
        self.version = version
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case workchain
        case enabledSince = "enabled_since"
        case actualMinSplit = "actual_min_split"
        case minSplit = "min_split"
        case maxSplit = "max_split"
        case basic
        case active
        case acceptMsgs = "accept_msgs"
        case flags
        case zerostateRootHash = "zerostate_root_hash"
        case zerostateFileHash = "zerostate_file_hash"
        case version
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(workchain, forKey: .workchain)
        try container.encode(enabledSince, forKey: .enabledSince)
        try container.encode(actualMinSplit, forKey: .actualMinSplit)
        try container.encode(minSplit, forKey: .minSplit)
        try container.encode(maxSplit, forKey: .maxSplit)
        try container.encode(basic, forKey: .basic)
        try container.encode(active, forKey: .active)
        try container.encode(acceptMsgs, forKey: .acceptMsgs)
        try container.encode(flags, forKey: .flags)
        try container.encode(zerostateRootHash, forKey: .zerostateRootHash)
        try container.encode(zerostateFileHash, forKey: .zerostateFileHash)
        try container.encode(version, forKey: .version)
    }
}

