//
// ComputePhase.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ComputePhase: Codable, JSONEncodable, Hashable {

    public var skipped: Bool
    public var skipReason: ComputeSkipReason?
    public var success: Bool?
    public var gasFees: Int64?
    public var gasUsed: Int64?
    public var vmSteps: Int?
    public var exitCode: Int?
    public var exitCodeDescription: String?

    public init(skipped: Bool, skipReason: ComputeSkipReason? = nil, success: Bool? = nil, gasFees: Int64? = nil, gasUsed: Int64? = nil, vmSteps: Int? = nil, exitCode: Int? = nil, exitCodeDescription: String? = nil) {
        self.skipped = skipped
        self.skipReason = skipReason
        self.success = success
        self.gasFees = gasFees
        self.gasUsed = gasUsed
        self.vmSteps = vmSteps
        self.exitCode = exitCode
        self.exitCodeDescription = exitCodeDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case skipped
        case skipReason = "skip_reason"
        case success
        case gasFees = "gas_fees"
        case gasUsed = "gas_used"
        case vmSteps = "vm_steps"
        case exitCode = "exit_code"
        case exitCodeDescription = "exit_code_description"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(skipped, forKey: .skipped)
        try container.encodeIfPresent(skipReason, forKey: .skipReason)
        try container.encodeIfPresent(success, forKey: .success)
        try container.encodeIfPresent(gasFees, forKey: .gasFees)
        try container.encodeIfPresent(gasUsed, forKey: .gasUsed)
        try container.encodeIfPresent(vmSteps, forKey: .vmSteps)
        try container.encodeIfPresent(exitCode, forKey: .exitCode)
        try container.encodeIfPresent(exitCodeDescription, forKey: .exitCodeDescription)
    }
}

