//
// SignRawMessage.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SignRawMessage: Codable, JSONEncodable, Hashable {

    public var address: String
    /** Number of nanocoins to send. Decimal string. */
    public var amount: String
    /** Raw one-cell BoC encoded in hex. */
    public var payload: String?
    /** Raw once-cell BoC encoded in hex. */
    public var stateInit: String?

    public init(address: String, amount: String, payload: String? = nil, stateInit: String? = nil) {
        self.address = address
        self.amount = amount
        self.payload = payload
        self.stateInit = stateInit
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case amount
        case payload
        case stateInit
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(payload, forKey: .payload)
        try container.encodeIfPresent(stateInit, forKey: .stateInit)
    }
}

