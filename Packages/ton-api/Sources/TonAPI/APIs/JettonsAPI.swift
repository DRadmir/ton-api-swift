//
// JettonsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class JettonsAPI {

    /**

     - parameter accountId: (path) account ID 
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: JettonHolders
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettonHolders(accountId: String, limit: Int? = nil, offset: Int? = nil) async throws -> JettonHolders {
        return try await getJettonHoldersWithRequestBuilder(accountId: accountId, limit: limit, offset: offset).execute().body
    }

    /**
     - GET /v2/jettons/{account_id}/holders
     - Get jetton's holders
     - parameter accountId: (path) account ID 
     - parameter limit: (query)  (optional, default to 1000)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<JettonHolders> 
     */
    open class func getJettonHoldersWithRequestBuilder(accountId: String, limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<JettonHolders> {
        var localVariablePath = "/v2/jettons/{account_id}/holders"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonHolders>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - returns: JettonInfo
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettonInfo(accountId: String) async throws -> JettonInfo {
        return try await getJettonInfoWithRequestBuilder(accountId: accountId).execute().body
    }

    /**
     - GET /v2/jettons/{account_id}
     - Get jetton metadata by jetton master address
     - parameter accountId: (path) account ID 
     - returns: RequestBuilder<JettonInfo> 
     */
    open class func getJettonInfoWithRequestBuilder(accountId: String) -> RequestBuilder<JettonInfo> {
        var localVariablePath = "/v2/jettons/{account_id}"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonInfo>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - returns: JettonTransferPayload
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettonTransferPayload(accountId: String, jettonId: String) async throws -> JettonTransferPayload {
        return try await getJettonTransferPayloadWithRequestBuilder(accountId: accountId, jettonId: jettonId).execute().body
    }

    /**
     - GET /v2/jettons/{jetton_id}/transfer/{account_id}/payload
     - Get jetton's custom payload and state init required for transfer
     - parameter accountId: (path) account ID 
     - parameter jettonId: (path) jetton ID 
     - returns: RequestBuilder<JettonTransferPayload> 
     */
    open class func getJettonTransferPayloadWithRequestBuilder(accountId: String, jettonId: String) -> RequestBuilder<JettonTransferPayload> {
        var localVariablePath = "/v2/jettons/{jetton_id}/transfer/{account_id}/payload"
        let accountIdPreEscape = "\(APIHelper.mapValueToPathItem(accountId))"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{account_id}", with: accountIdPostEscape, options: .literal, range: nil)
        let jettonIdPreEscape = "\(APIHelper.mapValueToPathItem(jettonId))"
        let jettonIdPostEscape = jettonIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jetton_id}", with: jettonIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<JettonTransferPayload>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter limit: (query)  (optional, default to 100)
     - parameter offset: (query)  (optional, default to 0)
     - returns: Jettons
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettons(limit: Int? = nil, offset: Int? = nil) async throws -> Jettons {
        return try await getJettonsWithRequestBuilder(limit: limit, offset: offset).execute().body
    }

    /**
     - GET /v2/jettons
     - Get a list of all indexed jetton masters in the blockchain.
     - parameter limit: (query)  (optional, default to 100)
     - parameter offset: (query)  (optional, default to 0)
     - returns: RequestBuilder<Jettons> 
     */
    open class func getJettonsWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Jettons> {
        let localVariablePath = "/v2/jettons"
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Jettons>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter eventId: (path) event ID or transaction hash in hex (without 0x) or base64url format 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - returns: Event
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getJettonsEvents(eventId: String, acceptLanguage: String? = nil) async throws -> Event {
        return try await getJettonsEventsWithRequestBuilder(eventId: eventId, acceptLanguage: acceptLanguage).execute().body
    }

    /**
     - GET /v2/events/{event_id}/jettons
     - Get only jetton transfers in the event
     - parameter eventId: (path) event ID or transaction hash in hex (without 0x) or base64url format 
     - parameter acceptLanguage: (header)  (optional, default to "en")
     - returns: RequestBuilder<Event> 
     */
    open class func getJettonsEventsWithRequestBuilder(eventId: String, acceptLanguage: String? = nil) -> RequestBuilder<Event> {
        var localVariablePath = "/v2/events/{event_id}/jettons"
        let eventIdPreEscape = "\(APIHelper.mapValueToPathItem(eventId))"
        let eventIdPostEscape = eventIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{event_id}", with: eventIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = TonAPIAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept-Language": acceptLanguage?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Event>.Type = TonAPIAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
