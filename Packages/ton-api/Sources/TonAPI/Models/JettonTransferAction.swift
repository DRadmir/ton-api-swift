//
// JettonTransferAction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct JettonTransferAction: Codable, JSONEncodable, Hashable {

    public var sender: AccountAddress?
    public var recipient: AccountAddress?
    public var sendersWallet: String
    public var recipientsWallet: String
    /** amount in quanta of tokens */
    public var amount: String
    public var comment: String?
    public var encryptedComment: EncryptedComment?
    public var refund: Refund?
    public var jetton: JettonPreview

    public init(sender: AccountAddress? = nil, recipient: AccountAddress? = nil, sendersWallet: String, recipientsWallet: String, amount: String, comment: String? = nil, encryptedComment: EncryptedComment? = nil, refund: Refund? = nil, jetton: JettonPreview) {
        self.sender = sender
        self.recipient = recipient
        self.sendersWallet = sendersWallet
        self.recipientsWallet = recipientsWallet
        self.amount = amount
        self.comment = comment
        self.encryptedComment = encryptedComment
        self.refund = refund
        self.jetton = jetton
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sender
        case recipient
        case sendersWallet = "senders_wallet"
        case recipientsWallet = "recipients_wallet"
        case amount
        case comment
        case encryptedComment = "encrypted_comment"
        case refund
        case jetton
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(sender, forKey: .sender)
        try container.encodeIfPresent(recipient, forKey: .recipient)
        try container.encode(sendersWallet, forKey: .sendersWallet)
        try container.encode(recipientsWallet, forKey: .recipientsWallet)
        try container.encode(amount, forKey: .amount)
        try container.encodeIfPresent(comment, forKey: .comment)
        try container.encodeIfPresent(encryptedComment, forKey: .encryptedComment)
        try container.encodeIfPresent(refund, forKey: .refund)
        try container.encode(jetton, forKey: .jetton)
    }
}

