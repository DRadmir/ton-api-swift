//
// MultisigOrder.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MultisigOrder: Codable, JSONEncodable, Hashable {

    public var address: String
    public var orderSeqno: Int64
    public var threshold: Int
    public var sentForExecution: Bool
    public var signers: [String]
    public var approvalsNum: Int
    public var expirationDate: Int64
    public var risk: Risk

    public init(address: String, orderSeqno: Int64, threshold: Int, sentForExecution: Bool, signers: [String], approvalsNum: Int, expirationDate: Int64, risk: Risk) {
        self.address = address
        self.orderSeqno = orderSeqno
        self.threshold = threshold
        self.sentForExecution = sentForExecution
        self.signers = signers
        self.approvalsNum = approvalsNum
        self.expirationDate = expirationDate
        self.risk = risk
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case orderSeqno = "order_seqno"
        case threshold
        case sentForExecution = "sent_for_execution"
        case signers
        case approvalsNum = "approvals_num"
        case expirationDate = "expiration_date"
        case risk
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(orderSeqno, forKey: .orderSeqno)
        try container.encode(threshold, forKey: .threshold)
        try container.encode(sentForExecution, forKey: .sentForExecution)
        try container.encode(signers, forKey: .signers)
        try container.encode(approvalsNum, forKey: .approvalsNum)
        try container.encode(expirationDate, forKey: .expirationDate)
        try container.encode(risk, forKey: .risk)
    }
}

