//
// MisbehaviourPunishmentConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MisbehaviourPunishmentConfig: Codable, JSONEncodable, Hashable {

    public var defaultFlatFine: Int64
    public var defaultProportionalFine: Int64
    public var severityFlatMult: Int
    public var severityProportionalMult: Int
    public var unpunishableInterval: Int
    public var longInterval: Int
    public var longFlatMult: Int
    public var longProportionalMult: Int
    public var mediumInterval: Int
    public var mediumFlatMult: Int
    public var mediumProportionalMult: Int

    public init(defaultFlatFine: Int64, defaultProportionalFine: Int64, severityFlatMult: Int, severityProportionalMult: Int, unpunishableInterval: Int, longInterval: Int, longFlatMult: Int, longProportionalMult: Int, mediumInterval: Int, mediumFlatMult: Int, mediumProportionalMult: Int) {
        self.defaultFlatFine = defaultFlatFine
        self.defaultProportionalFine = defaultProportionalFine
        self.severityFlatMult = severityFlatMult
        self.severityProportionalMult = severityProportionalMult
        self.unpunishableInterval = unpunishableInterval
        self.longInterval = longInterval
        self.longFlatMult = longFlatMult
        self.longProportionalMult = longProportionalMult
        self.mediumInterval = mediumInterval
        self.mediumFlatMult = mediumFlatMult
        self.mediumProportionalMult = mediumProportionalMult
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case defaultFlatFine = "default_flat_fine"
        case defaultProportionalFine = "default_proportional_fine"
        case severityFlatMult = "severity_flat_mult"
        case severityProportionalMult = "severity_proportional_mult"
        case unpunishableInterval = "unpunishable_interval"
        case longInterval = "long_interval"
        case longFlatMult = "long_flat_mult"
        case longProportionalMult = "long_proportional_mult"
        case mediumInterval = "medium_interval"
        case mediumFlatMult = "medium_flat_mult"
        case mediumProportionalMult = "medium_proportional_mult"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(defaultFlatFine, forKey: .defaultFlatFine)
        try container.encode(defaultProportionalFine, forKey: .defaultProportionalFine)
        try container.encode(severityFlatMult, forKey: .severityFlatMult)
        try container.encode(severityProportionalMult, forKey: .severityProportionalMult)
        try container.encode(unpunishableInterval, forKey: .unpunishableInterval)
        try container.encode(longInterval, forKey: .longInterval)
        try container.encode(longFlatMult, forKey: .longFlatMult)
        try container.encode(longProportionalMult, forKey: .longProportionalMult)
        try container.encode(mediumInterval, forKey: .mediumInterval)
        try container.encode(mediumFlatMult, forKey: .mediumFlatMult)
        try container.encode(mediumProportionalMult, forKey: .mediumProportionalMult)
    }
}

