//
// JettonBridgePrices.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct JettonBridgePrices: Codable, JSONEncodable, Hashable {

    public var bridgeBurnFee: Int64
    public var bridgeMintFee: Int64
    public var walletMinTonsForStorage: Int64
    public var walletGasConsumption: Int64
    public var minterMinTonsForStorage: Int64
    public var discoverGasConsumption: Int64

    public init(bridgeBurnFee: Int64, bridgeMintFee: Int64, walletMinTonsForStorage: Int64, walletGasConsumption: Int64, minterMinTonsForStorage: Int64, discoverGasConsumption: Int64) {
        self.bridgeBurnFee = bridgeBurnFee
        self.bridgeMintFee = bridgeMintFee
        self.walletMinTonsForStorage = walletMinTonsForStorage
        self.walletGasConsumption = walletGasConsumption
        self.minterMinTonsForStorage = minterMinTonsForStorage
        self.discoverGasConsumption = discoverGasConsumption
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bridgeBurnFee = "bridge_burn_fee"
        case bridgeMintFee = "bridge_mint_fee"
        case walletMinTonsForStorage = "wallet_min_tons_for_storage"
        case walletGasConsumption = "wallet_gas_consumption"
        case minterMinTonsForStorage = "minter_min_tons_for_storage"
        case discoverGasConsumption = "discover_gas_consumption"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(bridgeBurnFee, forKey: .bridgeBurnFee)
        try container.encode(bridgeMintFee, forKey: .bridgeMintFee)
        try container.encode(walletMinTonsForStorage, forKey: .walletMinTonsForStorage)
        try container.encode(walletGasConsumption, forKey: .walletGasConsumption)
        try container.encode(minterMinTonsForStorage, forKey: .minterMinTonsForStorage)
        try container.encode(discoverGasConsumption, forKey: .discoverGasConsumption)
    }
}

