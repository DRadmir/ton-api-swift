// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Get blockchain block data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/get(getBlockchainBlock)`.
    func getBlockchainBlock(_ input: Operations.getBlockchainBlock.Input) async throws
        -> Operations.getBlockchainBlock.Output
    /// Get blockchain block shards
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/shards`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/shards/get(getBlockchainMasterchainShards)`.
    func getBlockchainMasterchainShards(_ input: Operations.getBlockchainMasterchainShards.Input) async throws
        -> Operations.getBlockchainMasterchainShards.Output
    /// Get all blocks in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain.  We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/blocks`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/blocks/get(getBlockchainMasterchainBlocks)`.
    func getBlockchainMasterchainBlocks(_ input: Operations.getBlockchainMasterchainBlocks.Input) async throws
        -> Operations.getBlockchainMasterchainBlocks.Output
    /// Get all transactions in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain. We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/transactions/get(getBlockchainMasterchainTransactions)`.
    func getBlockchainMasterchainTransactions(_ input: Operations.getBlockchainMasterchainTransactions.Input)
        async throws -> Operations.getBlockchainMasterchainTransactions.Output
    /// Get blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/get(getBlockchainConfigFromBlock)`.
    func getBlockchainConfigFromBlock(_ input: Operations.getBlockchainConfigFromBlock.Input) async throws
        -> Operations.getBlockchainConfigFromBlock.Output
    /// Get raw blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/raw/get(getRawBlockchainConfigFromBlock)`.
    func getRawBlockchainConfigFromBlock(_ input: Operations.getRawBlockchainConfigFromBlock.Input) async throws
        -> Operations.getRawBlockchainConfigFromBlock.Output
    /// Get transactions from block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/transactions/get(getBlockchainBlockTransactions)`.
    func getBlockchainBlockTransactions(_ input: Operations.getBlockchainBlockTransactions.Input) async throws
        -> Operations.getBlockchainBlockTransactions.Output
    /// Get transaction data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/transactions/{transaction_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/transactions/{transaction_id}/get(getBlockchainTransaction)`.
    func getBlockchainTransaction(_ input: Operations.getBlockchainTransaction.Input) async throws
        -> Operations.getBlockchainTransaction.Output
    /// Get transaction data by message hash
    ///
    /// - Remark: HTTP `GET /v2/blockchain/messages/{msg_id}/transaction`.
    /// - Remark: Generated from `#/paths//v2/blockchain/messages/{msg_id}/transaction/get(getBlockchainTransactionByMessageHash)`.
    func getBlockchainTransactionByMessageHash(_ input: Operations.getBlockchainTransactionByMessageHash.Input)
        async throws -> Operations.getBlockchainTransactionByMessageHash.Output
    /// Get blockchain validators
    ///
    /// - Remark: HTTP `GET /v2/blockchain/validators`.
    /// - Remark: Generated from `#/paths//v2/blockchain/validators/get(getBlockchainValidators)`.
    func getBlockchainValidators(_ input: Operations.getBlockchainValidators.Input) async throws
        -> Operations.getBlockchainValidators.Output
    /// Get last known masterchain block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain-head`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain-head/get(getBlockchainMasterchainHead)`.
    func getBlockchainMasterchainHead(_ input: Operations.getBlockchainMasterchainHead.Input) async throws
        -> Operations.getBlockchainMasterchainHead.Output
    /// Get low-level information about an account taken directly from the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/get(getBlockchainRawAccount)`.
    func getBlockchainRawAccount(_ input: Operations.getBlockchainRawAccount.Input) async throws
        -> Operations.getBlockchainRawAccount.Output
    /// Get account transactions
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/transactions/get(getBlockchainAccountTransactions)`.
    func getBlockchainAccountTransactions(_ input: Operations.getBlockchainAccountTransactions.Input) async throws
        -> Operations.getBlockchainAccountTransactions.Output
    /// Execute get method for account
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/methods/{method_name}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/methods/{method_name}/get(execGetMethodForBlockchainAccount)`.
    func execGetMethodForBlockchainAccount(_ input: Operations.execGetMethodForBlockchainAccount.Input) async throws
        -> Operations.execGetMethodForBlockchainAccount.Output
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/blockchain/message`.
    /// - Remark: Generated from `#/paths//v2/blockchain/message/post(sendBlockchainMessage)`.
    func sendBlockchainMessage(_ input: Operations.sendBlockchainMessage.Input) async throws
        -> Operations.sendBlockchainMessage.Output
    /// Get blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/get(getBlockchainConfig)`.
    func getBlockchainConfig(_ input: Operations.getBlockchainConfig.Input) async throws
        -> Operations.getBlockchainConfig.Output
    /// Get raw blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/raw/get(getRawBlockchainConfig)`.
    func getRawBlockchainConfig(_ input: Operations.getRawBlockchainConfig.Input) async throws
        -> Operations.getRawBlockchainConfig.Output
    /// Blockchain account inspect
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/inspect`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/inspect/get(blockchainAccountInspect)`.
    func blockchainAccountInspect(_ input: Operations.blockchainAccountInspect.Input) async throws
        -> Operations.blockchainAccountInspect.Output
    /// Decode a given message. Only external incoming messages can be decoded currently.
    ///
    /// - Remark: HTTP `POST /v2/message/decode`.
    /// - Remark: Generated from `#/paths//v2/message/decode/post(decodeMessage)`.
    func decodeMessage(_ input: Operations.decodeMessage.Input) async throws -> Operations.decodeMessage.Output
    /// parse address and display in all formats
    ///
    /// - Remark: HTTP `GET /v2/address/{account_id}/parse`.
    /// - Remark: Generated from `#/paths//v2/address/{account_id}/parse/get(addressParse)`.
    func addressParse(_ input: Operations.addressParse.Input) async throws -> Operations.addressParse.Output
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/events/emulate/post(emulateMessageToEvent)`.
    func emulateMessageToEvent(_ input: Operations.emulateMessageToEvent.Input) async throws
        -> Operations.emulateMessageToEvent.Output
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/traces/emulate`.
    /// - Remark: Generated from `#/paths//v2/traces/emulate/post(emulateMessageToTrace)`.
    func emulateMessageToTrace(_ input: Operations.emulateMessageToTrace.Input) async throws
        -> Operations.emulateMessageToTrace.Output
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/wallet/emulate`.
    /// - Remark: Generated from `#/paths//v2/wallet/emulate/post(emulateMessageToWallet)`.
    func emulateMessageToWallet(_ input: Operations.emulateMessageToWallet.Input) async throws
        -> Operations.emulateMessageToWallet.Output
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/emulate/post(emulateMessageToAccountEvent)`.
    func emulateMessageToAccountEvent(_ input: Operations.emulateMessageToAccountEvent.Input) async throws
        -> Operations.emulateMessageToAccountEvent.Output
    /// Get human-friendly information about several accounts without low-level details.
    ///
    /// - Remark: HTTP `POST /v2/accounts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/accounts/_bulk/post(getAccounts)`.
    func getAccounts(_ input: Operations.getAccounts.Input) async throws -> Operations.getAccounts.Output
    /// Get human-friendly information about an account without low-level details.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/get(getAccount)`.
    func getAccount(_ input: Operations.getAccount.Input) async throws -> Operations.getAccount.Output
    /// Get account's domains
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/backresolve`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/backresolve/get(accountDnsBackResolve)`.
    func accountDnsBackResolve(_ input: Operations.accountDnsBackResolve.Input) async throws
        -> Operations.accountDnsBackResolve.Output
    /// Get all Jettons balances by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/get(getAccountJettonsBalances)`.
    func getAccountJettonsBalances(_ input: Operations.getAccountJettonsBalances.Input) async throws
        -> Operations.getAccountJettonsBalances.Output
    /// Get the transfer jettons history for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/history/get(getAccountJettonsHistory)`.
    func getAccountJettonsHistory(_ input: Operations.getAccountJettonsHistory.Input) async throws
        -> Operations.getAccountJettonsHistory.Output
    /// Get the transfer jetton history for account and jetton
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/{jetton_id}/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/{jetton_id}/history/get(getAccountJettonHistoryByID)`.
    func getAccountJettonHistoryByID(_ input: Operations.getAccountJettonHistoryByID.Input) async throws
        -> Operations.getAccountJettonHistoryByID.Output
    /// Get all NFT items by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/get(getAccountNftItems)`.
    func getAccountNftItems(_ input: Operations.getAccountNftItems.Input) async throws
        -> Operations.getAccountNftItems.Output
    /// Get the transfer nft history
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/history/get(getAccountNftHistory)`.
    func getAccountNftHistory(_ input: Operations.getAccountNftHistory.Input) async throws
        -> Operations.getAccountNftHistory.Output
    /// Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/get(getAccountEvents)`.
    func getAccountEvents(_ input: Operations.getAccountEvents.Input) async throws -> Operations.getAccountEvents.Output
    /// Get event for an account by event_id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/{event_id}/get(getAccountEvent)`.
    func getAccountEvent(_ input: Operations.getAccountEvent.Input) async throws -> Operations.getAccountEvent.Output
    /// Get traces for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/traces`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/traces/get(getAccountTraces)`.
    func getAccountTraces(_ input: Operations.getAccountTraces.Input) async throws -> Operations.getAccountTraces.Output
    /// Get all subscriptions by wallet address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/subscriptions`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/subscriptions/get(getAccountSubscriptions)`.
    func getAccountSubscriptions(_ input: Operations.getAccountSubscriptions.Input) async throws
        -> Operations.getAccountSubscriptions.Output
    /// Update internal cache for a particular account
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/reindex`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/reindex/post(reindexAccount)`.
    func reindexAccount(_ input: Operations.reindexAccount.Input) async throws -> Operations.reindexAccount.Output
    /// Search by account domain name
    ///
    /// - Remark: HTTP `GET /v2/accounts/search`.
    /// - Remark: Generated from `#/paths//v2/accounts/search/get(searchAccounts)`.
    func searchAccounts(_ input: Operations.searchAccounts.Input) async throws -> Operations.searchAccounts.Output
    /// Get expiring account .ton dns
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/expiring`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/expiring/get(getAccountDnsExpiring)`.
    func getAccountDnsExpiring(_ input: Operations.getAccountDnsExpiring.Input) async throws
        -> Operations.getAccountDnsExpiring.Output
    /// Get public key by account id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/publickey`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/publickey/get(getAccountPublicKey)`.
    func getAccountPublicKey(_ input: Operations.getAccountPublicKey.Input) async throws
        -> Operations.getAccountPublicKey.Output
    /// Get account's balance change
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/diff`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/diff/get(getAccountDiff)`.
    func getAccountDiff(_ input: Operations.getAccountDiff.Input) async throws -> Operations.getAccountDiff.Output
    /// Get full information about domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/get(getDnsInfo)`.
    func getDnsInfo(_ input: Operations.getDnsInfo.Input) async throws -> Operations.getDnsInfo.Output
    /// DNS resolve for domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/resolve`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/resolve/get(dnsResolve)`.
    func dnsResolve(_ input: Operations.dnsResolve.Input) async throws -> Operations.dnsResolve.Output
    /// Get domain bids
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/bids`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/bids/get(getDomainBids)`.
    func getDomainBids(_ input: Operations.getDomainBids.Input) async throws -> Operations.getDomainBids.Output
    /// Get all auctions
    ///
    /// - Remark: HTTP `GET /v2/dns/auctions`.
    /// - Remark: Generated from `#/paths//v2/dns/auctions/get(getAllAuctions)`.
    func getAllAuctions(_ input: Operations.getAllAuctions.Input) async throws -> Operations.getAllAuctions.Output
    /// Get NFT collections
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/get(getNftCollections)`.
    func getNftCollections(_ input: Operations.getNftCollections.Input) async throws
        -> Operations.getNftCollections.Output
    /// Get NFT collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/get(getNftCollection)`.
    func getNftCollection(_ input: Operations.getNftCollection.Input) async throws -> Operations.getNftCollection.Output
    /// Get NFT items from collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}/items`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/items/get(getItemsFromCollection)`.
    func getItemsFromCollection(_ input: Operations.getItemsFromCollection.Input) async throws
        -> Operations.getItemsFromCollection.Output
    /// Get NFT items by their addresses
    ///
    /// - Remark: HTTP `POST /v2/nfts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/nfts/_bulk/post(getNftItemsByAddresses)`.
    func getNftItemsByAddresses(_ input: Operations.getNftItemsByAddresses.Input) async throws
        -> Operations.getNftItemsByAddresses.Output
    /// Get NFT item by its address
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/get(getNftItemByAddress)`.
    func getNftItemByAddress(_ input: Operations.getNftItemByAddress.Input) async throws
        -> Operations.getNftItemByAddress.Output
    /// Get the transfer nfts history for account
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/history/get(getNftHistoryByID)`.
    func getNftHistoryByID(_ input: Operations.getNftHistoryByID.Input) async throws
        -> Operations.getNftHistoryByID.Output
    /// Get the trace by trace ID or hash of any transaction in trace
    ///
    /// - Remark: HTTP `GET /v2/traces/{trace_id}`.
    /// - Remark: Generated from `#/paths//v2/traces/{trace_id}/get(getTrace)`.
    func getTrace(_ input: Operations.getTrace.Input) async throws -> Operations.getTrace.Output
    /// Get an event either by event ID or a hash of any transaction in a trace. An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/get(getEvent)`.
    func getEvent(_ input: Operations.getEvent.Input) async throws -> Operations.getEvent.Output
    /// Get all inscriptions by owner address. It's experimental API and can be dropped in the future.
    ///
    /// - Remark: HTTP `GET /v2/experimental/accounts/{account_id}/inscriptions`.
    /// - Remark: Generated from `#/paths//v2/experimental/accounts/{account_id}/inscriptions/get(getAccountInscriptions)`.
    func getAccountInscriptions(_ input: Operations.getAccountInscriptions.Input) async throws
        -> Operations.getAccountInscriptions.Output
    /// return comment for making operation with instrospection. please don't use it if you don't know what you are doing
    ///
    /// - Remark: HTTP `GET /v2/experimental/inscriptions/op-template`.
    /// - Remark: Generated from `#/paths//v2/experimental/inscriptions/op-template/get(getInscriptionOpTemplate)`.
    func getInscriptionOpTemplate(_ input: Operations.getInscriptionOpTemplate.Input) async throws
        -> Operations.getInscriptionOpTemplate.Output
    /// Get a list of all indexed jetton masters in the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/jettons`.
    /// - Remark: Generated from `#/paths//v2/jettons/get(getJettons)`.
    func getJettons(_ input: Operations.getJettons.Input) async throws -> Operations.getJettons.Output
    /// Get jetton metadata by jetton master address
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/get(getJettonInfo)`.
    func getJettonInfo(_ input: Operations.getJettonInfo.Input) async throws -> Operations.getJettonInfo.Output
    /// Get jetton's holders
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}/holders`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/holders/get(getJettonHolders)`.
    func getJettonHolders(_ input: Operations.getJettonHolders.Input) async throws -> Operations.getJettonHolders.Output
    /// Get only jetton transfers in the event
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/jettons/get(getJettonsEvents)`.
    func getJettonsEvents(_ input: Operations.getJettonsEvents.Input) async throws -> Operations.getJettonsEvents.Output
    /// All pools where account participates
    ///
    /// - Remark: HTTP `GET /v2/staking/nominator/{account_id}/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/nominator/{account_id}/pools/get(getAccountNominatorsPools)`.
    func getAccountNominatorsPools(_ input: Operations.getAccountNominatorsPools.Input) async throws
        -> Operations.getAccountNominatorsPools.Output
    /// Stacking pool info
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/get(getStakingPoolInfo)`.
    func getStakingPoolInfo(_ input: Operations.getStakingPoolInfo.Input) async throws
        -> Operations.getStakingPoolInfo.Output
    /// Pool history
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/history/get(getStakingPoolHistory)`.
    func getStakingPoolHistory(_ input: Operations.getStakingPoolHistory.Input) async throws
        -> Operations.getStakingPoolHistory.Output
    /// All pools available in network
    ///
    /// - Remark: HTTP `GET /v2/staking/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/pools/get(getStakingPools)`.
    func getStakingPools(_ input: Operations.getStakingPools.Input) async throws -> Operations.getStakingPools.Output
    /// Get TON storage providers deployed to the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/storage/providers`.
    /// - Remark: Generated from `#/paths//v2/storage/providers/get(getStorageProviders)`.
    func getStorageProviders(_ input: Operations.getStorageProviders.Input) async throws
        -> Operations.getStorageProviders.Output
    /// Get the token price to the currency
    ///
    /// - Remark: HTTP `GET /v2/rates`.
    /// - Remark: Generated from `#/paths//v2/rates/get(getRates)`.
    func getRates(_ input: Operations.getRates.Input) async throws -> Operations.getRates.Output
    /// Get chart by token
    ///
    /// - Remark: HTTP `GET /v2/rates/chart`.
    /// - Remark: Generated from `#/paths//v2/rates/chart/get(getChartRates)`.
    func getChartRates(_ input: Operations.getChartRates.Input) async throws -> Operations.getChartRates.Output
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /v2/tonconnect/payload`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/payload/get(getTonConnectPayload)`.
    func getTonConnectPayload(_ input: Operations.getTonConnectPayload.Input) async throws
        -> Operations.getTonConnectPayload.Output
    /// Get account info by state init
    ///
    /// - Remark: HTTP `POST /v2/tonconnect/stateinit`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/stateinit/post(getAccountInfoByStateInit)`.
    func getAccountInfoByStateInit(_ input: Operations.getAccountInfoByStateInit.Input) async throws
        -> Operations.getAccountInfoByStateInit.Output
    /// Get backup info
    ///
    /// - Remark: HTTP `GET /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/get(getWalletBackup)`.
    func getWalletBackup(_ input: Operations.getWalletBackup.Input) async throws -> Operations.getWalletBackup.Output
    /// Set backup info
    ///
    /// - Remark: HTTP `PUT /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/put(setWalletBackup)`.
    func setWalletBackup(_ input: Operations.setWalletBackup.Input) async throws -> Operations.setWalletBackup.Output
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /v2/wallet/auth/proof`.
    /// - Remark: Generated from `#/paths//v2/wallet/auth/proof/post(tonConnectProof)`.
    func tonConnectProof(_ input: Operations.tonConnectProof.Input) async throws -> Operations.tonConnectProof.Output
    /// Get wallets by public key
    ///
    /// - Remark: HTTP `GET /v2/pubkeys/{public_key}/wallets`.
    /// - Remark: Generated from `#/paths//v2/pubkeys/{public_key}/wallets/get(getWalletsByPublicKey)`.
    func getWalletsByPublicKey(_ input: Operations.getWalletsByPublicKey.Input) async throws
        -> Operations.getWalletsByPublicKey.Output
    /// Get account seqno
    ///
    /// - Remark: HTTP `GET /v2/wallet/{account_id}/seqno`.
    /// - Remark: Generated from `#/paths//v2/wallet/{account_id}/seqno/get(getAccountSeqno)`.
    func getAccountSeqno(_ input: Operations.getAccountSeqno.Input) async throws -> Operations.getAccountSeqno.Output
    /// Get raw masterchain info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info/get(getRawMasterchainInfo)`.
    func getRawMasterchainInfo(_ input: Operations.getRawMasterchainInfo.Input) async throws
        -> Operations.getRawMasterchainInfo.Output
    /// Get raw masterchain info ext
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info_ext`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info_ext/get(getRawMasterchainInfoExt)`.
    func getRawMasterchainInfoExt(_ input: Operations.getRawMasterchainInfoExt.Input) async throws
        -> Operations.getRawMasterchainInfoExt.Output
    /// Get raw time
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_time`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_time/get(getRawTime)`.
    func getRawTime(_ input: Operations.getRawTime.Input) async throws -> Operations.getRawTime.Output
    /// Get raw blockchain block
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block/{block_id}/get(getRawBlockchainBlock)`.
    func getRawBlockchainBlock(_ input: Operations.getRawBlockchainBlock.Input) async throws
        -> Operations.getRawBlockchainBlock.Output
    /// Get raw blockchain block state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_state/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_state/{block_id}/get(getRawBlockchainBlockState)`.
    func getRawBlockchainBlockState(_ input: Operations.getRawBlockchainBlockState.Input) async throws
        -> Operations.getRawBlockchainBlockState.Output
    /// Get raw blockchain block header
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_header/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_header/{block_id}/get(getRawBlockchainBlockHeader)`.
    func getRawBlockchainBlockHeader(_ input: Operations.getRawBlockchainBlockHeader.Input) async throws
        -> Operations.getRawBlockchainBlockHeader.Output
    /// Send raw message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/liteserver/send_message`.
    /// - Remark: Generated from `#/paths//v2/liteserver/send_message/post(sendRawMessage)`.
    func sendRawMessage(_ input: Operations.sendRawMessage.Input) async throws -> Operations.sendRawMessage.Output
    /// Get raw account state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_account_state/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_account_state/{account_id}/get(getRawAccountState)`.
    func getRawAccountState(_ input: Operations.getRawAccountState.Input) async throws
        -> Operations.getRawAccountState.Output
    /// Get raw shard info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_info/{block_id}/get(getRawShardInfo)`.
    func getRawShardInfo(_ input: Operations.getRawShardInfo.Input) async throws -> Operations.getRawShardInfo.Output
    /// Get all raw shards info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_all_shards_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_all_shards_info/{block_id}/get(getAllRawShardsInfo)`.
    func getAllRawShardsInfo(_ input: Operations.getAllRawShardsInfo.Input) async throws
        -> Operations.getAllRawShardsInfo.Output
    /// Get raw transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_transactions/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_transactions/{account_id}/get(getRawTransactions)`.
    func getRawTransactions(_ input: Operations.getRawTransactions.Input) async throws
        -> Operations.getRawTransactions.Output
    /// Get raw list block transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/list_block_transactions/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/list_block_transactions/{block_id}/get(getRawListBlockTransactions)`.
    func getRawListBlockTransactions(_ input: Operations.getRawListBlockTransactions.Input) async throws
        -> Operations.getRawListBlockTransactions.Output
    /// Get raw block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_proof`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_proof/get(getRawBlockProof)`.
    func getRawBlockProof(_ input: Operations.getRawBlockProof.Input) async throws -> Operations.getRawBlockProof.Output
    /// Get raw config
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_config_all/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_config_all/{block_id}/get(getRawConfig)`.
    func getRawConfig(_ input: Operations.getRawConfig.Input) async throws -> Operations.getRawConfig.Output
    /// Get raw shard block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_block_proof/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_block_proof/{block_id}/get(getRawShardBlockProof)`.
    func getRawShardBlockProof(_ input: Operations.getRawShardBlockProof.Input) async throws
        -> Operations.getRawShardBlockProof.Output
}
/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Get blockchain block data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/get(getBlockchainBlock)`.
    public func getBlockchainBlock(
        path: Operations.getBlockchainBlock.Input.Path,
        headers: Operations.getBlockchainBlock.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainBlock.Output {
        try await getBlockchainBlock(Operations.getBlockchainBlock.Input(path: path, headers: headers))
    }
    /// Get blockchain block shards
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/shards`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/shards/get(getBlockchainMasterchainShards)`.
    public func getBlockchainMasterchainShards(
        path: Operations.getBlockchainMasterchainShards.Input.Path,
        headers: Operations.getBlockchainMasterchainShards.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainMasterchainShards.Output {
        try await getBlockchainMasterchainShards(
            Operations.getBlockchainMasterchainShards.Input(path: path, headers: headers)
        )
    }
    /// Get all blocks in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain.  We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/blocks`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/blocks/get(getBlockchainMasterchainBlocks)`.
    public func getBlockchainMasterchainBlocks(
        path: Operations.getBlockchainMasterchainBlocks.Input.Path,
        headers: Operations.getBlockchainMasterchainBlocks.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainMasterchainBlocks.Output {
        try await getBlockchainMasterchainBlocks(
            Operations.getBlockchainMasterchainBlocks.Input(path: path, headers: headers)
        )
    }
    /// Get all transactions in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain. We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/transactions/get(getBlockchainMasterchainTransactions)`.
    public func getBlockchainMasterchainTransactions(
        path: Operations.getBlockchainMasterchainTransactions.Input.Path,
        headers: Operations.getBlockchainMasterchainTransactions.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainMasterchainTransactions.Output {
        try await getBlockchainMasterchainTransactions(
            Operations.getBlockchainMasterchainTransactions.Input(path: path, headers: headers)
        )
    }
    /// Get blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/get(getBlockchainConfigFromBlock)`.
    public func getBlockchainConfigFromBlock(
        path: Operations.getBlockchainConfigFromBlock.Input.Path,
        headers: Operations.getBlockchainConfigFromBlock.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainConfigFromBlock.Output {
        try await getBlockchainConfigFromBlock(
            Operations.getBlockchainConfigFromBlock.Input(path: path, headers: headers)
        )
    }
    /// Get raw blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/raw/get(getRawBlockchainConfigFromBlock)`.
    public func getRawBlockchainConfigFromBlock(
        path: Operations.getRawBlockchainConfigFromBlock.Input.Path,
        headers: Operations.getRawBlockchainConfigFromBlock.Input.Headers = .init()
    ) async throws -> Operations.getRawBlockchainConfigFromBlock.Output {
        try await getRawBlockchainConfigFromBlock(
            Operations.getRawBlockchainConfigFromBlock.Input(path: path, headers: headers)
        )
    }
    /// Get transactions from block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/transactions/get(getBlockchainBlockTransactions)`.
    public func getBlockchainBlockTransactions(
        path: Operations.getBlockchainBlockTransactions.Input.Path,
        headers: Operations.getBlockchainBlockTransactions.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainBlockTransactions.Output {
        try await getBlockchainBlockTransactions(
            Operations.getBlockchainBlockTransactions.Input(path: path, headers: headers)
        )
    }
    /// Get transaction data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/transactions/{transaction_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/transactions/{transaction_id}/get(getBlockchainTransaction)`.
    public func getBlockchainTransaction(
        path: Operations.getBlockchainTransaction.Input.Path,
        headers: Operations.getBlockchainTransaction.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainTransaction.Output {
        try await getBlockchainTransaction(Operations.getBlockchainTransaction.Input(path: path, headers: headers))
    }
    /// Get transaction data by message hash
    ///
    /// - Remark: HTTP `GET /v2/blockchain/messages/{msg_id}/transaction`.
    /// - Remark: Generated from `#/paths//v2/blockchain/messages/{msg_id}/transaction/get(getBlockchainTransactionByMessageHash)`.
    public func getBlockchainTransactionByMessageHash(
        path: Operations.getBlockchainTransactionByMessageHash.Input.Path,
        headers: Operations.getBlockchainTransactionByMessageHash.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainTransactionByMessageHash.Output {
        try await getBlockchainTransactionByMessageHash(
            Operations.getBlockchainTransactionByMessageHash.Input(path: path, headers: headers)
        )
    }
    /// Get blockchain validators
    ///
    /// - Remark: HTTP `GET /v2/blockchain/validators`.
    /// - Remark: Generated from `#/paths//v2/blockchain/validators/get(getBlockchainValidators)`.
    public func getBlockchainValidators(headers: Operations.getBlockchainValidators.Input.Headers = .init())
        async throws -> Operations.getBlockchainValidators.Output
    { try await getBlockchainValidators(Operations.getBlockchainValidators.Input(headers: headers)) }
    /// Get last known masterchain block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain-head`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain-head/get(getBlockchainMasterchainHead)`.
    public func getBlockchainMasterchainHead(headers: Operations.getBlockchainMasterchainHead.Input.Headers = .init())
        async throws -> Operations.getBlockchainMasterchainHead.Output
    { try await getBlockchainMasterchainHead(Operations.getBlockchainMasterchainHead.Input(headers: headers)) }
    /// Get low-level information about an account taken directly from the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/get(getBlockchainRawAccount)`.
    public func getBlockchainRawAccount(
        path: Operations.getBlockchainRawAccount.Input.Path,
        headers: Operations.getBlockchainRawAccount.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainRawAccount.Output {
        try await getBlockchainRawAccount(Operations.getBlockchainRawAccount.Input(path: path, headers: headers))
    }
    /// Get account transactions
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/transactions/get(getBlockchainAccountTransactions)`.
    public func getBlockchainAccountTransactions(
        path: Operations.getBlockchainAccountTransactions.Input.Path,
        query: Operations.getBlockchainAccountTransactions.Input.Query = .init(),
        headers: Operations.getBlockchainAccountTransactions.Input.Headers = .init()
    ) async throws -> Operations.getBlockchainAccountTransactions.Output {
        try await getBlockchainAccountTransactions(
            Operations.getBlockchainAccountTransactions.Input(path: path, query: query, headers: headers)
        )
    }
    /// Execute get method for account
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/methods/{method_name}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/methods/{method_name}/get(execGetMethodForBlockchainAccount)`.
    public func execGetMethodForBlockchainAccount(
        path: Operations.execGetMethodForBlockchainAccount.Input.Path,
        query: Operations.execGetMethodForBlockchainAccount.Input.Query = .init(),
        headers: Operations.execGetMethodForBlockchainAccount.Input.Headers = .init()
    ) async throws -> Operations.execGetMethodForBlockchainAccount.Output {
        try await execGetMethodForBlockchainAccount(
            Operations.execGetMethodForBlockchainAccount.Input(path: path, query: query, headers: headers)
        )
    }
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/blockchain/message`.
    /// - Remark: Generated from `#/paths//v2/blockchain/message/post(sendBlockchainMessage)`.
    public func sendBlockchainMessage(
        headers: Operations.sendBlockchainMessage.Input.Headers = .init(),
        body: Components.RequestBodies.BatchBoc
    ) async throws -> Operations.sendBlockchainMessage.Output {
        try await sendBlockchainMessage(Operations.sendBlockchainMessage.Input(headers: headers, body: body))
    }
    /// Get blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/get(getBlockchainConfig)`.
    public func getBlockchainConfig(headers: Operations.getBlockchainConfig.Input.Headers = .init()) async throws
        -> Operations.getBlockchainConfig.Output
    { try await getBlockchainConfig(Operations.getBlockchainConfig.Input(headers: headers)) }
    /// Get raw blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/raw/get(getRawBlockchainConfig)`.
    public func getRawBlockchainConfig(headers: Operations.getRawBlockchainConfig.Input.Headers = .init()) async throws
        -> Operations.getRawBlockchainConfig.Output
    { try await getRawBlockchainConfig(Operations.getRawBlockchainConfig.Input(headers: headers)) }
    /// Blockchain account inspect
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/inspect`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/inspect/get(blockchainAccountInspect)`.
    public func blockchainAccountInspect(
        path: Operations.blockchainAccountInspect.Input.Path,
        headers: Operations.blockchainAccountInspect.Input.Headers = .init()
    ) async throws -> Operations.blockchainAccountInspect.Output {
        try await blockchainAccountInspect(Operations.blockchainAccountInspect.Input(path: path, headers: headers))
    }
    /// Decode a given message. Only external incoming messages can be decoded currently.
    ///
    /// - Remark: HTTP `POST /v2/message/decode`.
    /// - Remark: Generated from `#/paths//v2/message/decode/post(decodeMessage)`.
    public func decodeMessage(
        headers: Operations.decodeMessage.Input.Headers = .init(),
        body: Components.RequestBodies.Boc
    ) async throws -> Operations.decodeMessage.Output {
        try await decodeMessage(Operations.decodeMessage.Input(headers: headers, body: body))
    }
    /// parse address and display in all formats
    ///
    /// - Remark: HTTP `GET /v2/address/{account_id}/parse`.
    /// - Remark: Generated from `#/paths//v2/address/{account_id}/parse/get(addressParse)`.
    public func addressParse(
        path: Operations.addressParse.Input.Path,
        headers: Operations.addressParse.Input.Headers = .init()
    ) async throws -> Operations.addressParse.Output {
        try await addressParse(Operations.addressParse.Input(path: path, headers: headers))
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/events/emulate/post(emulateMessageToEvent)`.
    public func emulateMessageToEvent(
        query: Operations.emulateMessageToEvent.Input.Query = .init(),
        headers: Operations.emulateMessageToEvent.Input.Headers = .init(),
        body: Components.RequestBodies.Boc
    ) async throws -> Operations.emulateMessageToEvent.Output {
        try await emulateMessageToEvent(
            Operations.emulateMessageToEvent.Input(query: query, headers: headers, body: body)
        )
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/traces/emulate`.
    /// - Remark: Generated from `#/paths//v2/traces/emulate/post(emulateMessageToTrace)`.
    public func emulateMessageToTrace(
        query: Operations.emulateMessageToTrace.Input.Query = .init(),
        headers: Operations.emulateMessageToTrace.Input.Headers = .init(),
        body: Components.RequestBodies.Boc
    ) async throws -> Operations.emulateMessageToTrace.Output {
        try await emulateMessageToTrace(
            Operations.emulateMessageToTrace.Input(query: query, headers: headers, body: body)
        )
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/wallet/emulate`.
    /// - Remark: Generated from `#/paths//v2/wallet/emulate/post(emulateMessageToWallet)`.
    public func emulateMessageToWallet(
        headers: Operations.emulateMessageToWallet.Input.Headers = .init(),
        body: Components.RequestBodies.EmulationBoc
    ) async throws -> Operations.emulateMessageToWallet.Output {
        try await emulateMessageToWallet(Operations.emulateMessageToWallet.Input(headers: headers, body: body))
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/emulate/post(emulateMessageToAccountEvent)`.
    public func emulateMessageToAccountEvent(
        path: Operations.emulateMessageToAccountEvent.Input.Path,
        headers: Operations.emulateMessageToAccountEvent.Input.Headers = .init(),
        body: Components.RequestBodies.Boc
    ) async throws -> Operations.emulateMessageToAccountEvent.Output {
        try await emulateMessageToAccountEvent(
            Operations.emulateMessageToAccountEvent.Input(path: path, headers: headers, body: body)
        )
    }
    /// Get human-friendly information about several accounts without low-level details.
    ///
    /// - Remark: HTTP `POST /v2/accounts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/accounts/_bulk/post(getAccounts)`.
    public func getAccounts(
        headers: Operations.getAccounts.Input.Headers = .init(),
        body: Components.RequestBodies.AccountIDs? = nil
    ) async throws -> Operations.getAccounts.Output {
        try await getAccounts(Operations.getAccounts.Input(headers: headers, body: body))
    }
    /// Get human-friendly information about an account without low-level details.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/get(getAccount)`.
    public func getAccount(
        path: Operations.getAccount.Input.Path,
        headers: Operations.getAccount.Input.Headers = .init()
    ) async throws -> Operations.getAccount.Output {
        try await getAccount(Operations.getAccount.Input(path: path, headers: headers))
    }
    /// Get account's domains
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/backresolve`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/backresolve/get(accountDnsBackResolve)`.
    public func accountDnsBackResolve(
        path: Operations.accountDnsBackResolve.Input.Path,
        headers: Operations.accountDnsBackResolve.Input.Headers = .init()
    ) async throws -> Operations.accountDnsBackResolve.Output {
        try await accountDnsBackResolve(Operations.accountDnsBackResolve.Input(path: path, headers: headers))
    }
    /// Get all Jettons balances by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/get(getAccountJettonsBalances)`.
    public func getAccountJettonsBalances(
        path: Operations.getAccountJettonsBalances.Input.Path,
        query: Operations.getAccountJettonsBalances.Input.Query = .init(),
        headers: Operations.getAccountJettonsBalances.Input.Headers = .init()
    ) async throws -> Operations.getAccountJettonsBalances.Output {
        try await getAccountJettonsBalances(
            Operations.getAccountJettonsBalances.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get the transfer jettons history for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/history/get(getAccountJettonsHistory)`.
    public func getAccountJettonsHistory(
        path: Operations.getAccountJettonsHistory.Input.Path,
        query: Operations.getAccountJettonsHistory.Input.Query,
        headers: Operations.getAccountJettonsHistory.Input.Headers = .init()
    ) async throws -> Operations.getAccountJettonsHistory.Output {
        try await getAccountJettonsHistory(
            Operations.getAccountJettonsHistory.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get the transfer jetton history for account and jetton
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/{jetton_id}/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/{jetton_id}/history/get(getAccountJettonHistoryByID)`.
    public func getAccountJettonHistoryByID(
        path: Operations.getAccountJettonHistoryByID.Input.Path,
        query: Operations.getAccountJettonHistoryByID.Input.Query,
        headers: Operations.getAccountJettonHistoryByID.Input.Headers = .init()
    ) async throws -> Operations.getAccountJettonHistoryByID.Output {
        try await getAccountJettonHistoryByID(
            Operations.getAccountJettonHistoryByID.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get all NFT items by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/get(getAccountNftItems)`.
    public func getAccountNftItems(
        path: Operations.getAccountNftItems.Input.Path,
        query: Operations.getAccountNftItems.Input.Query = .init(),
        headers: Operations.getAccountNftItems.Input.Headers = .init()
    ) async throws -> Operations.getAccountNftItems.Output {
        try await getAccountNftItems(Operations.getAccountNftItems.Input(path: path, query: query, headers: headers))
    }
    /// Get the transfer nft history
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/history/get(getAccountNftHistory)`.
    public func getAccountNftHistory(
        path: Operations.getAccountNftHistory.Input.Path,
        query: Operations.getAccountNftHistory.Input.Query,
        headers: Operations.getAccountNftHistory.Input.Headers = .init()
    ) async throws -> Operations.getAccountNftHistory.Output {
        try await getAccountNftHistory(
            Operations.getAccountNftHistory.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/get(getAccountEvents)`.
    public func getAccountEvents(
        path: Operations.getAccountEvents.Input.Path,
        query: Operations.getAccountEvents.Input.Query,
        headers: Operations.getAccountEvents.Input.Headers = .init()
    ) async throws -> Operations.getAccountEvents.Output {
        try await getAccountEvents(Operations.getAccountEvents.Input(path: path, query: query, headers: headers))
    }
    /// Get event for an account by event_id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/{event_id}/get(getAccountEvent)`.
    public func getAccountEvent(
        path: Operations.getAccountEvent.Input.Path,
        query: Operations.getAccountEvent.Input.Query = .init(),
        headers: Operations.getAccountEvent.Input.Headers = .init()
    ) async throws -> Operations.getAccountEvent.Output {
        try await getAccountEvent(Operations.getAccountEvent.Input(path: path, query: query, headers: headers))
    }
    /// Get traces for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/traces`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/traces/get(getAccountTraces)`.
    public func getAccountTraces(
        path: Operations.getAccountTraces.Input.Path,
        query: Operations.getAccountTraces.Input.Query = .init(),
        headers: Operations.getAccountTraces.Input.Headers = .init()
    ) async throws -> Operations.getAccountTraces.Output {
        try await getAccountTraces(Operations.getAccountTraces.Input(path: path, query: query, headers: headers))
    }
    /// Get all subscriptions by wallet address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/subscriptions`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/subscriptions/get(getAccountSubscriptions)`.
    public func getAccountSubscriptions(
        path: Operations.getAccountSubscriptions.Input.Path,
        headers: Operations.getAccountSubscriptions.Input.Headers = .init()
    ) async throws -> Operations.getAccountSubscriptions.Output {
        try await getAccountSubscriptions(Operations.getAccountSubscriptions.Input(path: path, headers: headers))
    }
    /// Update internal cache for a particular account
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/reindex`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/reindex/post(reindexAccount)`.
    public func reindexAccount(
        path: Operations.reindexAccount.Input.Path,
        headers: Operations.reindexAccount.Input.Headers = .init()
    ) async throws -> Operations.reindexAccount.Output {
        try await reindexAccount(Operations.reindexAccount.Input(path: path, headers: headers))
    }
    /// Search by account domain name
    ///
    /// - Remark: HTTP `GET /v2/accounts/search`.
    /// - Remark: Generated from `#/paths//v2/accounts/search/get(searchAccounts)`.
    public func searchAccounts(
        query: Operations.searchAccounts.Input.Query,
        headers: Operations.searchAccounts.Input.Headers = .init()
    ) async throws -> Operations.searchAccounts.Output {
        try await searchAccounts(Operations.searchAccounts.Input(query: query, headers: headers))
    }
    /// Get expiring account .ton dns
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/expiring`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/expiring/get(getAccountDnsExpiring)`.
    public func getAccountDnsExpiring(
        path: Operations.getAccountDnsExpiring.Input.Path,
        query: Operations.getAccountDnsExpiring.Input.Query = .init(),
        headers: Operations.getAccountDnsExpiring.Input.Headers = .init()
    ) async throws -> Operations.getAccountDnsExpiring.Output {
        try await getAccountDnsExpiring(
            Operations.getAccountDnsExpiring.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get public key by account id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/publickey`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/publickey/get(getAccountPublicKey)`.
    public func getAccountPublicKey(
        path: Operations.getAccountPublicKey.Input.Path,
        headers: Operations.getAccountPublicKey.Input.Headers = .init()
    ) async throws -> Operations.getAccountPublicKey.Output {
        try await getAccountPublicKey(Operations.getAccountPublicKey.Input(path: path, headers: headers))
    }
    /// Get account's balance change
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/diff`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/diff/get(getAccountDiff)`.
    public func getAccountDiff(
        path: Operations.getAccountDiff.Input.Path,
        query: Operations.getAccountDiff.Input.Query,
        headers: Operations.getAccountDiff.Input.Headers = .init()
    ) async throws -> Operations.getAccountDiff.Output {
        try await getAccountDiff(Operations.getAccountDiff.Input(path: path, query: query, headers: headers))
    }
    /// Get full information about domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/get(getDnsInfo)`.
    public func getDnsInfo(
        path: Operations.getDnsInfo.Input.Path,
        headers: Operations.getDnsInfo.Input.Headers = .init()
    ) async throws -> Operations.getDnsInfo.Output {
        try await getDnsInfo(Operations.getDnsInfo.Input(path: path, headers: headers))
    }
    /// DNS resolve for domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/resolve`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/resolve/get(dnsResolve)`.
    public func dnsResolve(
        path: Operations.dnsResolve.Input.Path,
        headers: Operations.dnsResolve.Input.Headers = .init()
    ) async throws -> Operations.dnsResolve.Output {
        try await dnsResolve(Operations.dnsResolve.Input(path: path, headers: headers))
    }
    /// Get domain bids
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/bids`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/bids/get(getDomainBids)`.
    public func getDomainBids(
        path: Operations.getDomainBids.Input.Path,
        headers: Operations.getDomainBids.Input.Headers = .init()
    ) async throws -> Operations.getDomainBids.Output {
        try await getDomainBids(Operations.getDomainBids.Input(path: path, headers: headers))
    }
    /// Get all auctions
    ///
    /// - Remark: HTTP `GET /v2/dns/auctions`.
    /// - Remark: Generated from `#/paths//v2/dns/auctions/get(getAllAuctions)`.
    public func getAllAuctions(
        query: Operations.getAllAuctions.Input.Query = .init(),
        headers: Operations.getAllAuctions.Input.Headers = .init()
    ) async throws -> Operations.getAllAuctions.Output {
        try await getAllAuctions(Operations.getAllAuctions.Input(query: query, headers: headers))
    }
    /// Get NFT collections
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/get(getNftCollections)`.
    public func getNftCollections(
        query: Operations.getNftCollections.Input.Query = .init(),
        headers: Operations.getNftCollections.Input.Headers = .init()
    ) async throws -> Operations.getNftCollections.Output {
        try await getNftCollections(Operations.getNftCollections.Input(query: query, headers: headers))
    }
    /// Get NFT collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/get(getNftCollection)`.
    public func getNftCollection(
        path: Operations.getNftCollection.Input.Path,
        headers: Operations.getNftCollection.Input.Headers = .init()
    ) async throws -> Operations.getNftCollection.Output {
        try await getNftCollection(Operations.getNftCollection.Input(path: path, headers: headers))
    }
    /// Get NFT items from collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}/items`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/items/get(getItemsFromCollection)`.
    public func getItemsFromCollection(
        path: Operations.getItemsFromCollection.Input.Path,
        query: Operations.getItemsFromCollection.Input.Query = .init(),
        headers: Operations.getItemsFromCollection.Input.Headers = .init()
    ) async throws -> Operations.getItemsFromCollection.Output {
        try await getItemsFromCollection(
            Operations.getItemsFromCollection.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get NFT items by their addresses
    ///
    /// - Remark: HTTP `POST /v2/nfts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/nfts/_bulk/post(getNftItemsByAddresses)`.
    public func getNftItemsByAddresses(
        headers: Operations.getNftItemsByAddresses.Input.Headers = .init(),
        body: Components.RequestBodies.AccountIDs? = nil
    ) async throws -> Operations.getNftItemsByAddresses.Output {
        try await getNftItemsByAddresses(Operations.getNftItemsByAddresses.Input(headers: headers, body: body))
    }
    /// Get NFT item by its address
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/get(getNftItemByAddress)`.
    public func getNftItemByAddress(
        path: Operations.getNftItemByAddress.Input.Path,
        headers: Operations.getNftItemByAddress.Input.Headers = .init()
    ) async throws -> Operations.getNftItemByAddress.Output {
        try await getNftItemByAddress(Operations.getNftItemByAddress.Input(path: path, headers: headers))
    }
    /// Get the transfer nfts history for account
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/history/get(getNftHistoryByID)`.
    public func getNftHistoryByID(
        path: Operations.getNftHistoryByID.Input.Path,
        query: Operations.getNftHistoryByID.Input.Query,
        headers: Operations.getNftHistoryByID.Input.Headers = .init()
    ) async throws -> Operations.getNftHistoryByID.Output {
        try await getNftHistoryByID(Operations.getNftHistoryByID.Input(path: path, query: query, headers: headers))
    }
    /// Get the trace by trace ID or hash of any transaction in trace
    ///
    /// - Remark: HTTP `GET /v2/traces/{trace_id}`.
    /// - Remark: Generated from `#/paths//v2/traces/{trace_id}/get(getTrace)`.
    public func getTrace(path: Operations.getTrace.Input.Path, headers: Operations.getTrace.Input.Headers = .init())
        async throws -> Operations.getTrace.Output
    { try await getTrace(Operations.getTrace.Input(path: path, headers: headers)) }
    /// Get an event either by event ID or a hash of any transaction in a trace. An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/get(getEvent)`.
    public func getEvent(path: Operations.getEvent.Input.Path, headers: Operations.getEvent.Input.Headers = .init())
        async throws -> Operations.getEvent.Output
    { try await getEvent(Operations.getEvent.Input(path: path, headers: headers)) }
    /// Get all inscriptions by owner address. It's experimental API and can be dropped in the future.
    ///
    /// - Remark: HTTP `GET /v2/experimental/accounts/{account_id}/inscriptions`.
    /// - Remark: Generated from `#/paths//v2/experimental/accounts/{account_id}/inscriptions/get(getAccountInscriptions)`.
    public func getAccountInscriptions(
        path: Operations.getAccountInscriptions.Input.Path,
        query: Operations.getAccountInscriptions.Input.Query = .init(),
        headers: Operations.getAccountInscriptions.Input.Headers = .init()
    ) async throws -> Operations.getAccountInscriptions.Output {
        try await getAccountInscriptions(
            Operations.getAccountInscriptions.Input(path: path, query: query, headers: headers)
        )
    }
    /// return comment for making operation with instrospection. please don't use it if you don't know what you are doing
    ///
    /// - Remark: HTTP `GET /v2/experimental/inscriptions/op-template`.
    /// - Remark: Generated from `#/paths//v2/experimental/inscriptions/op-template/get(getInscriptionOpTemplate)`.
    public func getInscriptionOpTemplate(
        query: Operations.getInscriptionOpTemplate.Input.Query,
        headers: Operations.getInscriptionOpTemplate.Input.Headers = .init()
    ) async throws -> Operations.getInscriptionOpTemplate.Output {
        try await getInscriptionOpTemplate(Operations.getInscriptionOpTemplate.Input(query: query, headers: headers))
    }
    /// Get a list of all indexed jetton masters in the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/jettons`.
    /// - Remark: Generated from `#/paths//v2/jettons/get(getJettons)`.
    public func getJettons(
        query: Operations.getJettons.Input.Query = .init(),
        headers: Operations.getJettons.Input.Headers = .init()
    ) async throws -> Operations.getJettons.Output {
        try await getJettons(Operations.getJettons.Input(query: query, headers: headers))
    }
    /// Get jetton metadata by jetton master address
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/get(getJettonInfo)`.
    public func getJettonInfo(
        path: Operations.getJettonInfo.Input.Path,
        headers: Operations.getJettonInfo.Input.Headers = .init()
    ) async throws -> Operations.getJettonInfo.Output {
        try await getJettonInfo(Operations.getJettonInfo.Input(path: path, headers: headers))
    }
    /// Get jetton's holders
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}/holders`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/holders/get(getJettonHolders)`.
    public func getJettonHolders(
        path: Operations.getJettonHolders.Input.Path,
        query: Operations.getJettonHolders.Input.Query = .init(),
        headers: Operations.getJettonHolders.Input.Headers = .init()
    ) async throws -> Operations.getJettonHolders.Output {
        try await getJettonHolders(Operations.getJettonHolders.Input(path: path, query: query, headers: headers))
    }
    /// Get only jetton transfers in the event
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/jettons/get(getJettonsEvents)`.
    public func getJettonsEvents(
        path: Operations.getJettonsEvents.Input.Path,
        headers: Operations.getJettonsEvents.Input.Headers = .init()
    ) async throws -> Operations.getJettonsEvents.Output {
        try await getJettonsEvents(Operations.getJettonsEvents.Input(path: path, headers: headers))
    }
    /// All pools where account participates
    ///
    /// - Remark: HTTP `GET /v2/staking/nominator/{account_id}/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/nominator/{account_id}/pools/get(getAccountNominatorsPools)`.
    public func getAccountNominatorsPools(
        path: Operations.getAccountNominatorsPools.Input.Path,
        headers: Operations.getAccountNominatorsPools.Input.Headers = .init()
    ) async throws -> Operations.getAccountNominatorsPools.Output {
        try await getAccountNominatorsPools(Operations.getAccountNominatorsPools.Input(path: path, headers: headers))
    }
    /// Stacking pool info
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/get(getStakingPoolInfo)`.
    public func getStakingPoolInfo(
        path: Operations.getStakingPoolInfo.Input.Path,
        headers: Operations.getStakingPoolInfo.Input.Headers = .init()
    ) async throws -> Operations.getStakingPoolInfo.Output {
        try await getStakingPoolInfo(Operations.getStakingPoolInfo.Input(path: path, headers: headers))
    }
    /// Pool history
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/history/get(getStakingPoolHistory)`.
    public func getStakingPoolHistory(
        path: Operations.getStakingPoolHistory.Input.Path,
        headers: Operations.getStakingPoolHistory.Input.Headers = .init()
    ) async throws -> Operations.getStakingPoolHistory.Output {
        try await getStakingPoolHistory(Operations.getStakingPoolHistory.Input(path: path, headers: headers))
    }
    /// All pools available in network
    ///
    /// - Remark: HTTP `GET /v2/staking/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/pools/get(getStakingPools)`.
    public func getStakingPools(
        query: Operations.getStakingPools.Input.Query = .init(),
        headers: Operations.getStakingPools.Input.Headers = .init()
    ) async throws -> Operations.getStakingPools.Output {
        try await getStakingPools(Operations.getStakingPools.Input(query: query, headers: headers))
    }
    /// Get TON storage providers deployed to the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/storage/providers`.
    /// - Remark: Generated from `#/paths//v2/storage/providers/get(getStorageProviders)`.
    public func getStorageProviders(headers: Operations.getStorageProviders.Input.Headers = .init()) async throws
        -> Operations.getStorageProviders.Output
    { try await getStorageProviders(Operations.getStorageProviders.Input(headers: headers)) }
    /// Get the token price to the currency
    ///
    /// - Remark: HTTP `GET /v2/rates`.
    /// - Remark: Generated from `#/paths//v2/rates/get(getRates)`.
    public func getRates(query: Operations.getRates.Input.Query, headers: Operations.getRates.Input.Headers = .init())
        async throws -> Operations.getRates.Output
    { try await getRates(Operations.getRates.Input(query: query, headers: headers)) }
    /// Get chart by token
    ///
    /// - Remark: HTTP `GET /v2/rates/chart`.
    /// - Remark: Generated from `#/paths//v2/rates/chart/get(getChartRates)`.
    public func getChartRates(
        query: Operations.getChartRates.Input.Query,
        headers: Operations.getChartRates.Input.Headers = .init()
    ) async throws -> Operations.getChartRates.Output {
        try await getChartRates(Operations.getChartRates.Input(query: query, headers: headers))
    }
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /v2/tonconnect/payload`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/payload/get(getTonConnectPayload)`.
    public func getTonConnectPayload(headers: Operations.getTonConnectPayload.Input.Headers = .init()) async throws
        -> Operations.getTonConnectPayload.Output
    { try await getTonConnectPayload(Operations.getTonConnectPayload.Input(headers: headers)) }
    /// Get account info by state init
    ///
    /// - Remark: HTTP `POST /v2/tonconnect/stateinit`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/stateinit/post(getAccountInfoByStateInit)`.
    public func getAccountInfoByStateInit(
        headers: Operations.getAccountInfoByStateInit.Input.Headers = .init(),
        body: Components.RequestBodies.TonConnectStateInit
    ) async throws -> Operations.getAccountInfoByStateInit.Output {
        try await getAccountInfoByStateInit(Operations.getAccountInfoByStateInit.Input(headers: headers, body: body))
    }
    /// Get backup info
    ///
    /// - Remark: HTTP `GET /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/get(getWalletBackup)`.
    public func getWalletBackup(headers: Operations.getWalletBackup.Input.Headers) async throws
        -> Operations.getWalletBackup.Output
    { try await getWalletBackup(Operations.getWalletBackup.Input(headers: headers)) }
    /// Set backup info
    ///
    /// - Remark: HTTP `PUT /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/put(setWalletBackup)`.
    public func setWalletBackup(
        headers: Operations.setWalletBackup.Input.Headers,
        body: Components.RequestBodies.Backup
    ) async throws -> Operations.setWalletBackup.Output {
        try await setWalletBackup(Operations.setWalletBackup.Input(headers: headers, body: body))
    }
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /v2/wallet/auth/proof`.
    /// - Remark: Generated from `#/paths//v2/wallet/auth/proof/post(tonConnectProof)`.
    public func tonConnectProof(
        headers: Operations.tonConnectProof.Input.Headers = .init(),
        body: Components.RequestBodies.TonConnectProof
    ) async throws -> Operations.tonConnectProof.Output {
        try await tonConnectProof(Operations.tonConnectProof.Input(headers: headers, body: body))
    }
    /// Get wallets by public key
    ///
    /// - Remark: HTTP `GET /v2/pubkeys/{public_key}/wallets`.
    /// - Remark: Generated from `#/paths//v2/pubkeys/{public_key}/wallets/get(getWalletsByPublicKey)`.
    public func getWalletsByPublicKey(
        path: Operations.getWalletsByPublicKey.Input.Path,
        headers: Operations.getWalletsByPublicKey.Input.Headers = .init()
    ) async throws -> Operations.getWalletsByPublicKey.Output {
        try await getWalletsByPublicKey(Operations.getWalletsByPublicKey.Input(path: path, headers: headers))
    }
    /// Get account seqno
    ///
    /// - Remark: HTTP `GET /v2/wallet/{account_id}/seqno`.
    /// - Remark: Generated from `#/paths//v2/wallet/{account_id}/seqno/get(getAccountSeqno)`.
    public func getAccountSeqno(
        path: Operations.getAccountSeqno.Input.Path,
        headers: Operations.getAccountSeqno.Input.Headers = .init()
    ) async throws -> Operations.getAccountSeqno.Output {
        try await getAccountSeqno(Operations.getAccountSeqno.Input(path: path, headers: headers))
    }
    /// Get raw masterchain info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info/get(getRawMasterchainInfo)`.
    public func getRawMasterchainInfo(headers: Operations.getRawMasterchainInfo.Input.Headers = .init()) async throws
        -> Operations.getRawMasterchainInfo.Output
    { try await getRawMasterchainInfo(Operations.getRawMasterchainInfo.Input(headers: headers)) }
    /// Get raw masterchain info ext
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info_ext`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info_ext/get(getRawMasterchainInfoExt)`.
    public func getRawMasterchainInfoExt(
        query: Operations.getRawMasterchainInfoExt.Input.Query,
        headers: Operations.getRawMasterchainInfoExt.Input.Headers = .init()
    ) async throws -> Operations.getRawMasterchainInfoExt.Output {
        try await getRawMasterchainInfoExt(Operations.getRawMasterchainInfoExt.Input(query: query, headers: headers))
    }
    /// Get raw time
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_time`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_time/get(getRawTime)`.
    public func getRawTime(headers: Operations.getRawTime.Input.Headers = .init()) async throws
        -> Operations.getRawTime.Output
    { try await getRawTime(Operations.getRawTime.Input(headers: headers)) }
    /// Get raw blockchain block
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block/{block_id}/get(getRawBlockchainBlock)`.
    public func getRawBlockchainBlock(
        path: Operations.getRawBlockchainBlock.Input.Path,
        headers: Operations.getRawBlockchainBlock.Input.Headers = .init()
    ) async throws -> Operations.getRawBlockchainBlock.Output {
        try await getRawBlockchainBlock(Operations.getRawBlockchainBlock.Input(path: path, headers: headers))
    }
    /// Get raw blockchain block state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_state/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_state/{block_id}/get(getRawBlockchainBlockState)`.
    public func getRawBlockchainBlockState(
        path: Operations.getRawBlockchainBlockState.Input.Path,
        headers: Operations.getRawBlockchainBlockState.Input.Headers = .init()
    ) async throws -> Operations.getRawBlockchainBlockState.Output {
        try await getRawBlockchainBlockState(Operations.getRawBlockchainBlockState.Input(path: path, headers: headers))
    }
    /// Get raw blockchain block header
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_header/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_header/{block_id}/get(getRawBlockchainBlockHeader)`.
    public func getRawBlockchainBlockHeader(
        path: Operations.getRawBlockchainBlockHeader.Input.Path,
        query: Operations.getRawBlockchainBlockHeader.Input.Query,
        headers: Operations.getRawBlockchainBlockHeader.Input.Headers = .init()
    ) async throws -> Operations.getRawBlockchainBlockHeader.Output {
        try await getRawBlockchainBlockHeader(
            Operations.getRawBlockchainBlockHeader.Input(path: path, query: query, headers: headers)
        )
    }
    /// Send raw message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/liteserver/send_message`.
    /// - Remark: Generated from `#/paths//v2/liteserver/send_message/post(sendRawMessage)`.
    public func sendRawMessage(
        headers: Operations.sendRawMessage.Input.Headers = .init(),
        body: Components.RequestBodies.LiteServerSendMessageRequest
    ) async throws -> Operations.sendRawMessage.Output {
        try await sendRawMessage(Operations.sendRawMessage.Input(headers: headers, body: body))
    }
    /// Get raw account state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_account_state/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_account_state/{account_id}/get(getRawAccountState)`.
    public func getRawAccountState(
        path: Operations.getRawAccountState.Input.Path,
        query: Operations.getRawAccountState.Input.Query = .init(),
        headers: Operations.getRawAccountState.Input.Headers = .init()
    ) async throws -> Operations.getRawAccountState.Output {
        try await getRawAccountState(Operations.getRawAccountState.Input(path: path, query: query, headers: headers))
    }
    /// Get raw shard info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_info/{block_id}/get(getRawShardInfo)`.
    public func getRawShardInfo(
        path: Operations.getRawShardInfo.Input.Path,
        query: Operations.getRawShardInfo.Input.Query,
        headers: Operations.getRawShardInfo.Input.Headers = .init()
    ) async throws -> Operations.getRawShardInfo.Output {
        try await getRawShardInfo(Operations.getRawShardInfo.Input(path: path, query: query, headers: headers))
    }
    /// Get all raw shards info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_all_shards_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_all_shards_info/{block_id}/get(getAllRawShardsInfo)`.
    public func getAllRawShardsInfo(
        path: Operations.getAllRawShardsInfo.Input.Path,
        headers: Operations.getAllRawShardsInfo.Input.Headers = .init()
    ) async throws -> Operations.getAllRawShardsInfo.Output {
        try await getAllRawShardsInfo(Operations.getAllRawShardsInfo.Input(path: path, headers: headers))
    }
    /// Get raw transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_transactions/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_transactions/{account_id}/get(getRawTransactions)`.
    public func getRawTransactions(
        path: Operations.getRawTransactions.Input.Path,
        query: Operations.getRawTransactions.Input.Query,
        headers: Operations.getRawTransactions.Input.Headers = .init()
    ) async throws -> Operations.getRawTransactions.Output {
        try await getRawTransactions(Operations.getRawTransactions.Input(path: path, query: query, headers: headers))
    }
    /// Get raw list block transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/list_block_transactions/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/list_block_transactions/{block_id}/get(getRawListBlockTransactions)`.
    public func getRawListBlockTransactions(
        path: Operations.getRawListBlockTransactions.Input.Path,
        query: Operations.getRawListBlockTransactions.Input.Query,
        headers: Operations.getRawListBlockTransactions.Input.Headers = .init()
    ) async throws -> Operations.getRawListBlockTransactions.Output {
        try await getRawListBlockTransactions(
            Operations.getRawListBlockTransactions.Input(path: path, query: query, headers: headers)
        )
    }
    /// Get raw block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_proof`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_proof/get(getRawBlockProof)`.
    public func getRawBlockProof(
        query: Operations.getRawBlockProof.Input.Query,
        headers: Operations.getRawBlockProof.Input.Headers = .init()
    ) async throws -> Operations.getRawBlockProof.Output {
        try await getRawBlockProof(Operations.getRawBlockProof.Input(query: query, headers: headers))
    }
    /// Get raw config
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_config_all/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_config_all/{block_id}/get(getRawConfig)`.
    public func getRawConfig(
        path: Operations.getRawConfig.Input.Path,
        query: Operations.getRawConfig.Input.Query,
        headers: Operations.getRawConfig.Input.Headers = .init()
    ) async throws -> Operations.getRawConfig.Output {
        try await getRawConfig(Operations.getRawConfig.Input(path: path, query: query, headers: headers))
    }
    /// Get raw shard block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_block_proof/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_block_proof/{block_id}/get(getRawShardBlockProof)`.
    public func getRawShardBlockProof(
        path: Operations.getRawShardBlockProof.Input.Path,
        headers: Operations.getRawShardBlockProof.Input.Headers = .init()
    ) async throws -> Operations.getRawShardBlockProof.Output {
        try await getRawShardBlockProof(Operations.getRawShardBlockProof.Input(path: path, headers: headers))
    }
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://tonapi.io")
    }
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://testnet.tonapi.io")
    }
    public static func server3() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "http://localhost:8081")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {
        /// - Remark: Generated from `#/components/schemas/Error`.
        public struct _Error: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Error/error`.
            public var error: Swift.String
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - error:
            public init(error: Swift.String) { self.error = error }
            public enum CodingKeys: String, CodingKey { case error }
        }
        /// - Remark: Generated from `#/components/schemas/AccountAddress`.
        public struct AccountAddress: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountAddress/address`.
            public var address: Swift.String
            /// Display name. Data collected from different sources like moderation lists, dns, collections names and over.
            ///
            /// - Remark: Generated from `#/components/schemas/AccountAddress/name`.
            public var name: Swift.String?
            /// Is this account was marked as part of scammers activity
            ///
            /// - Remark: Generated from `#/components/schemas/AccountAddress/is_scam`.
            public var is_scam: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AccountAddress/icon`.
            public var icon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/AccountAddress/is_wallet`.
            public var is_wallet: Swift.Bool
            /// Creates a new `AccountAddress`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name: Display name. Data collected from different sources like moderation lists, dns, collections names and over.
            ///   - is_scam: Is this account was marked as part of scammers activity
            ///   - icon:
            ///   - is_wallet:
            public init(
                address: Swift.String,
                name: Swift.String? = nil,
                is_scam: Swift.Bool,
                icon: Swift.String? = nil,
                is_wallet: Swift.Bool
            ) {
                self.address = address
                self.name = name
                self.is_scam = is_scam
                self.icon = icon
                self.is_wallet = is_wallet
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case is_scam
                case icon
                case is_wallet
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection`.
        public struct BlockCurrencyCollection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/grams`.
            public var grams: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/otherPayload`.
            public struct otherPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/otherPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/otherPayload/value`.
                public var value: Swift.String
                /// Creates a new `otherPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - value:
                public init(id: Swift.Int64, value: Swift.String) {
                    self.id = id
                    self.value = value
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case value
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/other`.
            public typealias otherPayload = [Components.Schemas.BlockCurrencyCollection.otherPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BlockCurrencyCollection/other`.
            public var other: Components.Schemas.BlockCurrencyCollection.otherPayload
            /// Creates a new `BlockCurrencyCollection`.
            ///
            /// - Parameters:
            ///   - grams:
            ///   - other:
            public init(grams: Swift.Int64, other: Components.Schemas.BlockCurrencyCollection.otherPayload) {
                self.grams = grams
                self.other = other
            }
            public enum CodingKeys: String, CodingKey {
                case grams
                case other
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockValueFlow`.
        public struct BlockValueFlow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/from_prev_blk`.
            public var from_prev_blk: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/to_next_blk`.
            public var to_next_blk: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/imported`.
            public var imported: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/exported`.
            public var exported: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/fees_collected`.
            public var fees_collected: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/burned`.
            public var burned: Components.Schemas.BlockCurrencyCollection?
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/fees_imported`.
            public var fees_imported: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/recovered`.
            public var recovered: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/created`.
            public var created: Components.Schemas.BlockCurrencyCollection
            /// - Remark: Generated from `#/components/schemas/BlockValueFlow/minted`.
            public var minted: Components.Schemas.BlockCurrencyCollection
            /// Creates a new `BlockValueFlow`.
            ///
            /// - Parameters:
            ///   - from_prev_blk:
            ///   - to_next_blk:
            ///   - imported:
            ///   - exported:
            ///   - fees_collected:
            ///   - burned:
            ///   - fees_imported:
            ///   - recovered:
            ///   - created:
            ///   - minted:
            public init(
                from_prev_blk: Components.Schemas.BlockCurrencyCollection,
                to_next_blk: Components.Schemas.BlockCurrencyCollection,
                imported: Components.Schemas.BlockCurrencyCollection,
                exported: Components.Schemas.BlockCurrencyCollection,
                fees_collected: Components.Schemas.BlockCurrencyCollection,
                burned: Components.Schemas.BlockCurrencyCollection? = nil,
                fees_imported: Components.Schemas.BlockCurrencyCollection,
                recovered: Components.Schemas.BlockCurrencyCollection,
                created: Components.Schemas.BlockCurrencyCollection,
                minted: Components.Schemas.BlockCurrencyCollection
            ) {
                self.from_prev_blk = from_prev_blk
                self.to_next_blk = to_next_blk
                self.imported = imported
                self.exported = exported
                self.fees_collected = fees_collected
                self.burned = burned
                self.fees_imported = fees_imported
                self.recovered = recovered
                self.created = created
                self.minted = minted
            }
            public enum CodingKeys: String, CodingKey {
                case from_prev_blk
                case to_next_blk
                case imported
                case exported
                case fees_collected
                case burned
                case fees_imported
                case recovered
                case created
                case minted
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainBlock`.
        public struct BlockchainBlock: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/tx_quantity`.
            public var tx_quantity: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/value_flow`.
            public var value_flow: Components.Schemas.BlockValueFlow
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/workchain_id`.
            public var workchain_id: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/shard`.
            public var shard: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/seqno`.
            public var seqno: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/root_hash`.
            public var root_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/file_hash`.
            public var file_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/global_id`.
            public var global_id: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/version`.
            public var version: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/after_merge`.
            public var after_merge: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/before_split`.
            public var before_split: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/after_split`.
            public var after_split: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/want_split`.
            public var want_split: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/want_merge`.
            public var want_merge: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/key_block`.
            public var key_block: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/gen_utime`.
            public var gen_utime: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/start_lt`.
            public var start_lt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/end_lt`.
            public var end_lt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/vert_seqno`.
            public var vert_seqno: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/gen_catchain_seqno`.
            public var gen_catchain_seqno: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/min_ref_mc_seqno`.
            public var min_ref_mc_seqno: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/prev_key_block_seqno`.
            public var prev_key_block_seqno: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/gen_software_version`.
            public var gen_software_version: Swift.Int32?
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/gen_software_capabilities`.
            public var gen_software_capabilities: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/master_ref`.
            public var master_ref: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/prev_refs`.
            public var prev_refs: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/in_msg_descr_length`.
            public var in_msg_descr_length: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/out_msg_descr_length`.
            public var out_msg_descr_length: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/rand_seed`.
            public var rand_seed: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainBlock/created_by`.
            public var created_by: Swift.String
            /// Creates a new `BlockchainBlock`.
            ///
            /// - Parameters:
            ///   - tx_quantity:
            ///   - value_flow:
            ///   - workchain_id:
            ///   - shard:
            ///   - seqno:
            ///   - root_hash:
            ///   - file_hash:
            ///   - global_id:
            ///   - version:
            ///   - after_merge:
            ///   - before_split:
            ///   - after_split:
            ///   - want_split:
            ///   - want_merge:
            ///   - key_block:
            ///   - gen_utime:
            ///   - start_lt:
            ///   - end_lt:
            ///   - vert_seqno:
            ///   - gen_catchain_seqno:
            ///   - min_ref_mc_seqno:
            ///   - prev_key_block_seqno:
            ///   - gen_software_version:
            ///   - gen_software_capabilities:
            ///   - master_ref:
            ///   - prev_refs:
            ///   - in_msg_descr_length:
            ///   - out_msg_descr_length:
            ///   - rand_seed:
            ///   - created_by:
            public init(
                tx_quantity: Swift.Int,
                value_flow: Components.Schemas.BlockValueFlow,
                workchain_id: Swift.Int32,
                shard: Swift.String,
                seqno: Swift.Int32,
                root_hash: Swift.String,
                file_hash: Swift.String,
                global_id: Swift.Int32,
                version: Swift.Int32,
                after_merge: Swift.Bool,
                before_split: Swift.Bool,
                after_split: Swift.Bool,
                want_split: Swift.Bool,
                want_merge: Swift.Bool,
                key_block: Swift.Bool,
                gen_utime: Swift.Int64,
                start_lt: Swift.Int64,
                end_lt: Swift.Int64,
                vert_seqno: Swift.Int32,
                gen_catchain_seqno: Swift.Int32,
                min_ref_mc_seqno: Swift.Int32,
                prev_key_block_seqno: Swift.Int32,
                gen_software_version: Swift.Int32? = nil,
                gen_software_capabilities: Swift.Int64? = nil,
                master_ref: Swift.String? = nil,
                prev_refs: [Swift.String],
                in_msg_descr_length: Swift.Int64,
                out_msg_descr_length: Swift.Int64,
                rand_seed: Swift.String,
                created_by: Swift.String
            ) {
                self.tx_quantity = tx_quantity
                self.value_flow = value_flow
                self.workchain_id = workchain_id
                self.shard = shard
                self.seqno = seqno
                self.root_hash = root_hash
                self.file_hash = file_hash
                self.global_id = global_id
                self.version = version
                self.after_merge = after_merge
                self.before_split = before_split
                self.after_split = after_split
                self.want_split = want_split
                self.want_merge = want_merge
                self.key_block = key_block
                self.gen_utime = gen_utime
                self.start_lt = start_lt
                self.end_lt = end_lt
                self.vert_seqno = vert_seqno
                self.gen_catchain_seqno = gen_catchain_seqno
                self.min_ref_mc_seqno = min_ref_mc_seqno
                self.prev_key_block_seqno = prev_key_block_seqno
                self.gen_software_version = gen_software_version
                self.gen_software_capabilities = gen_software_capabilities
                self.master_ref = master_ref
                self.prev_refs = prev_refs
                self.in_msg_descr_length = in_msg_descr_length
                self.out_msg_descr_length = out_msg_descr_length
                self.rand_seed = rand_seed
                self.created_by = created_by
            }
            public enum CodingKeys: String, CodingKey {
                case tx_quantity
                case value_flow
                case workchain_id
                case shard
                case seqno
                case root_hash
                case file_hash
                case global_id
                case version
                case after_merge
                case before_split
                case after_split
                case want_split
                case want_merge
                case key_block
                case gen_utime
                case start_lt
                case end_lt
                case vert_seqno
                case gen_catchain_seqno
                case min_ref_mc_seqno
                case prev_key_block_seqno
                case gen_software_version
                case gen_software_capabilities
                case master_ref
                case prev_refs
                case in_msg_descr_length
                case out_msg_descr_length
                case rand_seed
                case created_by
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainBlocks`.
        public struct BlockchainBlocks: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockchainBlocks/blocks`.
            public var blocks: [Components.Schemas.BlockchainBlock]
            /// Creates a new `BlockchainBlocks`.
            ///
            /// - Parameters:
            ///   - blocks:
            public init(blocks: [Components.Schemas.BlockchainBlock]) { self.blocks = blocks }
            public enum CodingKeys: String, CodingKey { case blocks }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainBlockShards`.
        public struct BlockchainBlockShards: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockchainBlockShards/shardsPayload`.
            public struct shardsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainBlockShards/shardsPayload/last_known_block_id`.
                public var last_known_block_id: Swift.String
                /// Creates a new `shardsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - last_known_block_id:
                public init(last_known_block_id: Swift.String) { self.last_known_block_id = last_known_block_id }
                public enum CodingKeys: String, CodingKey { case last_known_block_id }
            }
            /// - Remark: Generated from `#/components/schemas/BlockchainBlockShards/shards`.
            public typealias shardsPayload = [Components.Schemas.BlockchainBlockShards.shardsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BlockchainBlockShards/shards`.
            public var shards: Components.Schemas.BlockchainBlockShards.shardsPayload
            /// Creates a new `BlockchainBlockShards`.
            ///
            /// - Parameters:
            ///   - shards:
            public init(shards: Components.Schemas.BlockchainBlockShards.shardsPayload) { self.shards = shards }
            public enum CodingKeys: String, CodingKey { case shards }
        }
        /// - Remark: Generated from `#/components/schemas/AccountStatus`.
        @frozen public enum AccountStatus: String, Codable, Hashable, Sendable {
            case nonexist = "nonexist"
            case uninit = "uninit"
            case active = "active"
            case frozen = "frozen"
        }
        /// - Remark: Generated from `#/components/schemas/StateInit`.
        public struct StateInit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StateInit/boc`.
            public var boc: Swift.String
            /// Creates a new `StateInit`.
            ///
            /// - Parameters:
            ///   - boc:
            public init(boc: Swift.String) { self.boc = boc }
            public enum CodingKeys: String, CodingKey { case boc }
        }
        /// - Remark: Generated from `#/components/schemas/Message`.
        public struct Message: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Message/msg_type`.
            @frozen public enum msg_typePayload: String, Codable, Hashable, Sendable {
                case int_msg = "int_msg"
                case ext_in_msg = "ext_in_msg"
                case ext_out_msg = "ext_out_msg"
            }
            /// - Remark: Generated from `#/components/schemas/Message/msg_type`.
            public var msg_type: Components.Schemas.Message.msg_typePayload
            /// - Remark: Generated from `#/components/schemas/Message/created_lt`.
            public var created_lt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/ihr_disabled`.
            public var ihr_disabled: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Message/bounce`.
            public var bounce: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Message/bounced`.
            public var bounced: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Message/value`.
            public var value: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/fwd_fee`.
            public var fwd_fee: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/ihr_fee`.
            public var ihr_fee: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/destination`.
            public var destination: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/Message/source`.
            public var source: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/Message/import_fee`.
            public var import_fee: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/created_at`.
            public var created_at: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Message/op_code`.
            public var op_code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/init`.
            public var _init: Components.Schemas.StateInit?
            /// hex-encoded BoC with raw message body
            ///
            /// - Remark: Generated from `#/components/schemas/Message/raw_body`.
            public var raw_body: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/decoded_op_name`.
            public var decoded_op_name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Message/decoded_body`.
            public var decoded_body: OpenAPIRuntime.OpenAPIValueContainer?
            /// Creates a new `Message`.
            ///
            /// - Parameters:
            ///   - msg_type:
            ///   - created_lt:
            ///   - ihr_disabled:
            ///   - bounce:
            ///   - bounced:
            ///   - value:
            ///   - fwd_fee:
            ///   - ihr_fee:
            ///   - destination:
            ///   - source:
            ///   - import_fee:
            ///   - created_at:
            ///   - op_code:
            ///   - _init:
            ///   - raw_body: hex-encoded BoC with raw message body
            ///   - decoded_op_name:
            ///   - decoded_body:
            public init(
                msg_type: Components.Schemas.Message.msg_typePayload,
                created_lt: Swift.Int64,
                ihr_disabled: Swift.Bool,
                bounce: Swift.Bool,
                bounced: Swift.Bool,
                value: Swift.Int64,
                fwd_fee: Swift.Int64,
                ihr_fee: Swift.Int64,
                destination: Components.Schemas.AccountAddress? = nil,
                source: Components.Schemas.AccountAddress? = nil,
                import_fee: Swift.Int64,
                created_at: Swift.Int64,
                op_code: Swift.String? = nil,
                _init: Components.Schemas.StateInit? = nil,
                raw_body: Swift.String? = nil,
                decoded_op_name: Swift.String? = nil,
                decoded_body: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.msg_type = msg_type
                self.created_lt = created_lt
                self.ihr_disabled = ihr_disabled
                self.bounce = bounce
                self.bounced = bounced
                self.value = value
                self.fwd_fee = fwd_fee
                self.ihr_fee = ihr_fee
                self.destination = destination
                self.source = source
                self.import_fee = import_fee
                self.created_at = created_at
                self.op_code = op_code
                self._init = _init
                self.raw_body = raw_body
                self.decoded_op_name = decoded_op_name
                self.decoded_body = decoded_body
            }
            public enum CodingKeys: String, CodingKey {
                case msg_type
                case created_lt
                case ihr_disabled
                case bounce
                case bounced
                case value
                case fwd_fee
                case ihr_fee
                case destination
                case source
                case import_fee
                case created_at
                case op_code
                case _init = "init"
                case raw_body
                case decoded_op_name
                case decoded_body
            }
        }
        /// - Remark: Generated from `#/components/schemas/TransactionType`.
        @frozen public enum TransactionType: String, Codable, Hashable, Sendable {
            case TransOrd = "TransOrd"
            case TransTickTock = "TransTickTock"
            case TransSplitPrepare = "TransSplitPrepare"
            case TransSplitInstall = "TransSplitInstall"
            case TransMergePrepare = "TransMergePrepare"
            case TransMergeInstall = "TransMergeInstall"
            case TransStorage = "TransStorage"
        }
        /// - Remark: Generated from `#/components/schemas/AccStatusChange`.
        @frozen public enum AccStatusChange: String, Codable, Hashable, Sendable {
            case acst_unchanged = "acst_unchanged"
            case acst_frozen = "acst_frozen"
            case acst_deleted = "acst_deleted"
        }
        /// - Remark: Generated from `#/components/schemas/ComputeSkipReason`.
        @frozen public enum ComputeSkipReason: String, Codable, Hashable, Sendable {
            case cskip_no_state = "cskip_no_state"
            case cskip_bad_state = "cskip_bad_state"
            case cskip_no_gas = "cskip_no_gas"
        }
        /// - Remark: Generated from `#/components/schemas/BouncePhaseType`.
        @frozen public enum BouncePhaseType: String, Codable, Hashable, Sendable {
            case TrPhaseBounceNegfunds = "TrPhaseBounceNegfunds"
            case TrPhaseBounceNofunds = "TrPhaseBounceNofunds"
            case TrPhaseBounceOk = "TrPhaseBounceOk"
        }
        /// - Remark: Generated from `#/components/schemas/ComputePhase`.
        public struct ComputePhase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ComputePhase/skipped`.
            public var skipped: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ComputePhase/skip_reason`.
            public var skip_reason: Components.Schemas.ComputeSkipReason?
            /// - Remark: Generated from `#/components/schemas/ComputePhase/success`.
            public var success: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/ComputePhase/gas_fees`.
            public var gas_fees: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ComputePhase/gas_used`.
            public var gas_used: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ComputePhase/vm_steps`.
            public var vm_steps: Swift.Int?
            /// - Remark: Generated from `#/components/schemas/ComputePhase/exit_code`.
            public var exit_code: Swift.Int32?
            /// Creates a new `ComputePhase`.
            ///
            /// - Parameters:
            ///   - skipped:
            ///   - skip_reason:
            ///   - success:
            ///   - gas_fees:
            ///   - gas_used:
            ///   - vm_steps:
            ///   - exit_code:
            public init(
                skipped: Swift.Bool,
                skip_reason: Components.Schemas.ComputeSkipReason? = nil,
                success: Swift.Bool? = nil,
                gas_fees: Swift.Int64? = nil,
                gas_used: Swift.Int64? = nil,
                vm_steps: Swift.Int? = nil,
                exit_code: Swift.Int32? = nil
            ) {
                self.skipped = skipped
                self.skip_reason = skip_reason
                self.success = success
                self.gas_fees = gas_fees
                self.gas_used = gas_used
                self.vm_steps = vm_steps
                self.exit_code = exit_code
            }
            public enum CodingKeys: String, CodingKey {
                case skipped
                case skip_reason
                case success
                case gas_fees
                case gas_used
                case vm_steps
                case exit_code
            }
        }
        /// - Remark: Generated from `#/components/schemas/StoragePhase`.
        public struct StoragePhase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StoragePhase/fees_collected`.
            public var fees_collected: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/StoragePhase/fees_due`.
            public var fees_due: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/StoragePhase/status_change`.
            public var status_change: Components.Schemas.AccStatusChange
            /// Creates a new `StoragePhase`.
            ///
            /// - Parameters:
            ///   - fees_collected:
            ///   - fees_due:
            ///   - status_change:
            public init(
                fees_collected: Swift.Int64,
                fees_due: Swift.Int64? = nil,
                status_change: Components.Schemas.AccStatusChange
            ) {
                self.fees_collected = fees_collected
                self.fees_due = fees_due
                self.status_change = status_change
            }
            public enum CodingKeys: String, CodingKey {
                case fees_collected
                case fees_due
                case status_change
            }
        }
        /// - Remark: Generated from `#/components/schemas/CreditPhase`.
        public struct CreditPhase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/CreditPhase/fees_collected`.
            public var fees_collected: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/CreditPhase/credit`.
            public var credit: Swift.Int64
            /// Creates a new `CreditPhase`.
            ///
            /// - Parameters:
            ///   - fees_collected:
            ///   - credit:
            public init(fees_collected: Swift.Int64, credit: Swift.Int64) {
                self.fees_collected = fees_collected
                self.credit = credit
            }
            public enum CodingKeys: String, CodingKey {
                case fees_collected
                case credit
            }
        }
        /// - Remark: Generated from `#/components/schemas/ActionPhase`.
        public struct ActionPhase: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActionPhase/success`.
            public var success: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/ActionPhase/total_actions`.
            public var total_actions: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/ActionPhase/skipped_actions`.
            public var skipped_actions: Swift.Int32
            /// - Remark: Generated from `#/components/schemas/ActionPhase/fwd_fees`.
            public var fwd_fees: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ActionPhase/total_fees`.
            public var total_fees: Swift.Int64
            /// Creates a new `ActionPhase`.
            ///
            /// - Parameters:
            ///   - success:
            ///   - total_actions:
            ///   - skipped_actions:
            ///   - fwd_fees:
            ///   - total_fees:
            public init(
                success: Swift.Bool,
                total_actions: Swift.Int32,
                skipped_actions: Swift.Int32,
                fwd_fees: Swift.Int64,
                total_fees: Swift.Int64
            ) {
                self.success = success
                self.total_actions = total_actions
                self.skipped_actions = skipped_actions
                self.fwd_fees = fwd_fees
                self.total_fees = total_fees
            }
            public enum CodingKeys: String, CodingKey {
                case success
                case total_actions
                case skipped_actions
                case fwd_fees
                case total_fees
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transaction`.
        public struct Transaction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transaction/hash`.
            public var hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/lt`.
            public var lt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Transaction/account`.
            public var account: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/Transaction/success`.
            public var success: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Transaction/utime`.
            public var utime: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Transaction/orig_status`.
            public var orig_status: Components.Schemas.AccountStatus
            /// - Remark: Generated from `#/components/schemas/Transaction/end_status`.
            public var end_status: Components.Schemas.AccountStatus
            /// - Remark: Generated from `#/components/schemas/Transaction/total_fees`.
            public var total_fees: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Transaction/transaction_type`.
            public var transaction_type: Components.Schemas.TransactionType
            /// - Remark: Generated from `#/components/schemas/Transaction/state_update_old`.
            public var state_update_old: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/state_update_new`.
            public var state_update_new: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/in_msg`.
            public var in_msg: Components.Schemas.Message?
            /// - Remark: Generated from `#/components/schemas/Transaction/out_msgs`.
            public var out_msgs: [Components.Schemas.Message]
            /// - Remark: Generated from `#/components/schemas/Transaction/block`.
            public var block: Swift.String
            /// - Remark: Generated from `#/components/schemas/Transaction/prev_trans_hash`.
            public var prev_trans_hash: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Transaction/prev_trans_lt`.
            public var prev_trans_lt: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/Transaction/compute_phase`.
            public var compute_phase: Components.Schemas.ComputePhase?
            /// - Remark: Generated from `#/components/schemas/Transaction/storage_phase`.
            public var storage_phase: Components.Schemas.StoragePhase?
            /// - Remark: Generated from `#/components/schemas/Transaction/credit_phase`.
            public var credit_phase: Components.Schemas.CreditPhase?
            /// - Remark: Generated from `#/components/schemas/Transaction/action_phase`.
            public var action_phase: Components.Schemas.ActionPhase?
            /// - Remark: Generated from `#/components/schemas/Transaction/bounce_phase`.
            public var bounce_phase: Components.Schemas.BouncePhaseType?
            /// - Remark: Generated from `#/components/schemas/Transaction/aborted`.
            public var aborted: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Transaction/destroyed`.
            public var destroyed: Swift.Bool
            /// Creates a new `Transaction`.
            ///
            /// - Parameters:
            ///   - hash:
            ///   - lt:
            ///   - account:
            ///   - success:
            ///   - utime:
            ///   - orig_status:
            ///   - end_status:
            ///   - total_fees:
            ///   - transaction_type:
            ///   - state_update_old:
            ///   - state_update_new:
            ///   - in_msg:
            ///   - out_msgs:
            ///   - block:
            ///   - prev_trans_hash:
            ///   - prev_trans_lt:
            ///   - compute_phase:
            ///   - storage_phase:
            ///   - credit_phase:
            ///   - action_phase:
            ///   - bounce_phase:
            ///   - aborted:
            ///   - destroyed:
            public init(
                hash: Swift.String,
                lt: Swift.Int64,
                account: Components.Schemas.AccountAddress,
                success: Swift.Bool,
                utime: Swift.Int64,
                orig_status: Components.Schemas.AccountStatus,
                end_status: Components.Schemas.AccountStatus,
                total_fees: Swift.Int64,
                transaction_type: Components.Schemas.TransactionType,
                state_update_old: Swift.String,
                state_update_new: Swift.String,
                in_msg: Components.Schemas.Message? = nil,
                out_msgs: [Components.Schemas.Message],
                block: Swift.String,
                prev_trans_hash: Swift.String? = nil,
                prev_trans_lt: Swift.Int64? = nil,
                compute_phase: Components.Schemas.ComputePhase? = nil,
                storage_phase: Components.Schemas.StoragePhase? = nil,
                credit_phase: Components.Schemas.CreditPhase? = nil,
                action_phase: Components.Schemas.ActionPhase? = nil,
                bounce_phase: Components.Schemas.BouncePhaseType? = nil,
                aborted: Swift.Bool,
                destroyed: Swift.Bool
            ) {
                self.hash = hash
                self.lt = lt
                self.account = account
                self.success = success
                self.utime = utime
                self.orig_status = orig_status
                self.end_status = end_status
                self.total_fees = total_fees
                self.transaction_type = transaction_type
                self.state_update_old = state_update_old
                self.state_update_new = state_update_new
                self.in_msg = in_msg
                self.out_msgs = out_msgs
                self.block = block
                self.prev_trans_hash = prev_trans_hash
                self.prev_trans_lt = prev_trans_lt
                self.compute_phase = compute_phase
                self.storage_phase = storage_phase
                self.credit_phase = credit_phase
                self.action_phase = action_phase
                self.bounce_phase = bounce_phase
                self.aborted = aborted
                self.destroyed = destroyed
            }
            public enum CodingKeys: String, CodingKey {
                case hash
                case lt
                case account
                case success
                case utime
                case orig_status
                case end_status
                case total_fees
                case transaction_type
                case state_update_old
                case state_update_new
                case in_msg
                case out_msgs
                case block
                case prev_trans_hash
                case prev_trans_lt
                case compute_phase
                case storage_phase
                case credit_phase
                case action_phase
                case bounce_phase
                case aborted
                case destroyed
            }
        }
        /// - Remark: Generated from `#/components/schemas/Transactions`.
        public struct Transactions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Transactions/transactions`.
            public var transactions: [Components.Schemas.Transaction]
            /// Creates a new `Transactions`.
            ///
            /// - Parameters:
            ///   - transactions:
            public init(transactions: [Components.Schemas.Transaction]) { self.transactions = transactions }
            public enum CodingKeys: String, CodingKey { case transactions }
        }
        /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup`.
        public struct ConfigProposalSetup: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/min_tot_rounds`.
            public var min_tot_rounds: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/max_tot_rounds`.
            public var max_tot_rounds: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/min_wins`.
            public var min_wins: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/max_losses`.
            public var max_losses: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/min_store_sec`.
            public var min_store_sec: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/max_store_sec`.
            public var max_store_sec: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/bit_price`.
            public var bit_price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ConfigProposalSetup/cell_price`.
            public var cell_price: Swift.Int64
            /// Creates a new `ConfigProposalSetup`.
            ///
            /// - Parameters:
            ///   - min_tot_rounds:
            ///   - max_tot_rounds:
            ///   - min_wins:
            ///   - max_losses:
            ///   - min_store_sec:
            ///   - max_store_sec:
            ///   - bit_price:
            ///   - cell_price:
            public init(
                min_tot_rounds: Swift.Int,
                max_tot_rounds: Swift.Int,
                min_wins: Swift.Int,
                max_losses: Swift.Int,
                min_store_sec: Swift.Int64,
                max_store_sec: Swift.Int64,
                bit_price: Swift.Int64,
                cell_price: Swift.Int64
            ) {
                self.min_tot_rounds = min_tot_rounds
                self.max_tot_rounds = max_tot_rounds
                self.min_wins = min_wins
                self.max_losses = max_losses
                self.min_store_sec = min_store_sec
                self.max_store_sec = max_store_sec
                self.bit_price = bit_price
                self.cell_price = cell_price
            }
            public enum CodingKeys: String, CodingKey {
                case min_tot_rounds
                case max_tot_rounds
                case min_wins
                case max_losses
                case min_store_sec
                case max_store_sec
                case bit_price
                case cell_price
            }
        }
        /// - Remark: Generated from `#/components/schemas/GasLimitPrices`.
        public struct GasLimitPrices: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/special_gas_limit`.
            public var special_gas_limit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/flat_gas_limit`.
            public var flat_gas_limit: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/flat_gas_price`.
            public var flat_gas_price: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/gas_price`.
            public var gas_price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/gas_limit`.
            public var gas_limit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/gas_credit`.
            public var gas_credit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/block_gas_limit`.
            public var block_gas_limit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/freeze_due_limit`.
            public var freeze_due_limit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/GasLimitPrices/delete_due_limit`.
            public var delete_due_limit: Swift.Int64
            /// Creates a new `GasLimitPrices`.
            ///
            /// - Parameters:
            ///   - special_gas_limit:
            ///   - flat_gas_limit:
            ///   - flat_gas_price:
            ///   - gas_price:
            ///   - gas_limit:
            ///   - gas_credit:
            ///   - block_gas_limit:
            ///   - freeze_due_limit:
            ///   - delete_due_limit:
            public init(
                special_gas_limit: Swift.Int64? = nil,
                flat_gas_limit: Swift.Int64? = nil,
                flat_gas_price: Swift.Int64? = nil,
                gas_price: Swift.Int64,
                gas_limit: Swift.Int64,
                gas_credit: Swift.Int64,
                block_gas_limit: Swift.Int64,
                freeze_due_limit: Swift.Int64,
                delete_due_limit: Swift.Int64
            ) {
                self.special_gas_limit = special_gas_limit
                self.flat_gas_limit = flat_gas_limit
                self.flat_gas_price = flat_gas_price
                self.gas_price = gas_price
                self.gas_limit = gas_limit
                self.gas_credit = gas_credit
                self.block_gas_limit = block_gas_limit
                self.freeze_due_limit = freeze_due_limit
                self.delete_due_limit = delete_due_limit
            }
            public enum CodingKeys: String, CodingKey {
                case special_gas_limit
                case flat_gas_limit
                case flat_gas_price
                case gas_price
                case gas_limit
                case gas_credit
                case block_gas_limit
                case freeze_due_limit
                case delete_due_limit
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockParamLimits`.
        public struct BlockParamLimits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockParamLimits/underload`.
            public var underload: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockParamLimits/soft_limit`.
            public var soft_limit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockParamLimits/hard_limit`.
            public var hard_limit: Swift.Int64
            /// Creates a new `BlockParamLimits`.
            ///
            /// - Parameters:
            ///   - underload:
            ///   - soft_limit:
            ///   - hard_limit:
            public init(underload: Swift.Int64, soft_limit: Swift.Int64, hard_limit: Swift.Int64) {
                self.underload = underload
                self.soft_limit = soft_limit
                self.hard_limit = hard_limit
            }
            public enum CodingKeys: String, CodingKey {
                case underload
                case soft_limit
                case hard_limit
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockLimits`.
        public struct BlockLimits: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockLimits/bytes`.
            public var bytes: Components.Schemas.BlockParamLimits
            /// - Remark: Generated from `#/components/schemas/BlockLimits/gas`.
            public var gas: Components.Schemas.BlockParamLimits
            /// - Remark: Generated from `#/components/schemas/BlockLimits/lt_delta`.
            public var lt_delta: Components.Schemas.BlockParamLimits
            /// Creates a new `BlockLimits`.
            ///
            /// - Parameters:
            ///   - bytes:
            ///   - gas:
            ///   - lt_delta:
            public init(
                bytes: Components.Schemas.BlockParamLimits,
                gas: Components.Schemas.BlockParamLimits,
                lt_delta: Components.Schemas.BlockParamLimits
            ) {
                self.bytes = bytes
                self.gas = gas
                self.lt_delta = lt_delta
            }
            public enum CodingKeys: String, CodingKey {
                case bytes
                case gas
                case lt_delta
            }
        }
        /// - Remark: Generated from `#/components/schemas/MsgForwardPrices`.
        public struct MsgForwardPrices: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/lump_price`.
            public var lump_price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/bit_price`.
            public var bit_price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/cell_price`.
            public var cell_price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/ihr_price_factor`.
            public var ihr_price_factor: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/first_frac`.
            public var first_frac: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MsgForwardPrices/next_frac`.
            public var next_frac: Swift.Int64
            /// Creates a new `MsgForwardPrices`.
            ///
            /// - Parameters:
            ///   - lump_price:
            ///   - bit_price:
            ///   - cell_price:
            ///   - ihr_price_factor:
            ///   - first_frac:
            ///   - next_frac:
            public init(
                lump_price: Swift.Int64,
                bit_price: Swift.Int64,
                cell_price: Swift.Int64,
                ihr_price_factor: Swift.Int64,
                first_frac: Swift.Int64,
                next_frac: Swift.Int64
            ) {
                self.lump_price = lump_price
                self.bit_price = bit_price
                self.cell_price = cell_price
                self.ihr_price_factor = ihr_price_factor
                self.first_frac = first_frac
                self.next_frac = next_frac
            }
            public enum CodingKeys: String, CodingKey {
                case lump_price
                case bit_price
                case cell_price
                case ihr_price_factor
                case first_frac
                case next_frac
            }
        }
        /// - Remark: Generated from `#/components/schemas/WorkchainDescr`.
        public struct WorkchainDescr: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/workchain`.
            public var workchain: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/enabled_since`.
            public var enabled_since: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/actual_min_split`.
            public var actual_min_split: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/min_split`.
            public var min_split: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/max_split`.
            public var max_split: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/basic`.
            public var basic: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/active`.
            public var active: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/accept_msgs`.
            public var accept_msgs: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/flags`.
            public var flags: Swift.Int
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/zerostate_root_hash`.
            public var zerostate_root_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/zerostate_file_hash`.
            public var zerostate_file_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/WorkchainDescr/version`.
            public var version: Swift.Int64
            /// Creates a new `WorkchainDescr`.
            ///
            /// - Parameters:
            ///   - workchain:
            ///   - enabled_since:
            ///   - actual_min_split:
            ///   - min_split:
            ///   - max_split:
            ///   - basic:
            ///   - active:
            ///   - accept_msgs:
            ///   - flags:
            ///   - zerostate_root_hash:
            ///   - zerostate_file_hash:
            ///   - version:
            public init(
                workchain: Swift.Int,
                enabled_since: Swift.Int64,
                actual_min_split: Swift.Int,
                min_split: Swift.Int,
                max_split: Swift.Int,
                basic: Swift.Int,
                active: Swift.Bool,
                accept_msgs: Swift.Bool,
                flags: Swift.Int,
                zerostate_root_hash: Swift.String,
                zerostate_file_hash: Swift.String,
                version: Swift.Int64
            ) {
                self.workchain = workchain
                self.enabled_since = enabled_since
                self.actual_min_split = actual_min_split
                self.min_split = min_split
                self.max_split = max_split
                self.basic = basic
                self.active = active
                self.accept_msgs = accept_msgs
                self.flags = flags
                self.zerostate_root_hash = zerostate_root_hash
                self.zerostate_file_hash = zerostate_file_hash
                self.version = version
            }
            public enum CodingKeys: String, CodingKey {
                case workchain
                case enabled_since
                case actual_min_split
                case min_split
                case max_split
                case basic
                case active
                case accept_msgs
                case flags
                case zerostate_root_hash
                case zerostate_file_hash
                case version
            }
        }
        /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig`.
        public struct MisbehaviourPunishmentConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/default_flat_fine`.
            public var default_flat_fine: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/default_proportional_fine`.
            public var default_proportional_fine: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/severity_flat_mult`.
            public var severity_flat_mult: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/severity_proportional_mult`.
            public var severity_proportional_mult: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/unpunishable_interval`.
            public var unpunishable_interval: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/long_interval`.
            public var long_interval: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/long_flat_mult`.
            public var long_flat_mult: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/long_proportional_mult`.
            public var long_proportional_mult: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/medium_interval`.
            public var medium_interval: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/medium_flat_mult`.
            public var medium_flat_mult: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MisbehaviourPunishmentConfig/medium_proportional_mult`.
            public var medium_proportional_mult: Swift.Int
            /// Creates a new `MisbehaviourPunishmentConfig`.
            ///
            /// - Parameters:
            ///   - default_flat_fine:
            ///   - default_proportional_fine:
            ///   - severity_flat_mult:
            ///   - severity_proportional_mult:
            ///   - unpunishable_interval:
            ///   - long_interval:
            ///   - long_flat_mult:
            ///   - long_proportional_mult:
            ///   - medium_interval:
            ///   - medium_flat_mult:
            ///   - medium_proportional_mult:
            public init(
                default_flat_fine: Swift.Int64,
                default_proportional_fine: Swift.Int64,
                severity_flat_mult: Swift.Int,
                severity_proportional_mult: Swift.Int,
                unpunishable_interval: Swift.Int,
                long_interval: Swift.Int,
                long_flat_mult: Swift.Int,
                long_proportional_mult: Swift.Int,
                medium_interval: Swift.Int,
                medium_flat_mult: Swift.Int,
                medium_proportional_mult: Swift.Int
            ) {
                self.default_flat_fine = default_flat_fine
                self.default_proportional_fine = default_proportional_fine
                self.severity_flat_mult = severity_flat_mult
                self.severity_proportional_mult = severity_proportional_mult
                self.unpunishable_interval = unpunishable_interval
                self.long_interval = long_interval
                self.long_flat_mult = long_flat_mult
                self.long_proportional_mult = long_proportional_mult
                self.medium_interval = medium_interval
                self.medium_flat_mult = medium_flat_mult
                self.medium_proportional_mult = medium_proportional_mult
            }
            public enum CodingKeys: String, CodingKey {
                case default_flat_fine
                case default_proportional_fine
                case severity_flat_mult
                case severity_proportional_mult
                case unpunishable_interval
                case long_interval
                case long_flat_mult
                case long_proportional_mult
                case medium_interval
                case medium_flat_mult
                case medium_proportional_mult
            }
        }
        /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig`.
        public struct SizeLimitsConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_msg_bits`.
            public var max_msg_bits: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_msg_cells`.
            public var max_msg_cells: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_library_cells`.
            public var max_library_cells: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_vm_data_depth`.
            public var max_vm_data_depth: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_ext_msg_size`.
            public var max_ext_msg_size: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_ext_msg_depth`.
            public var max_ext_msg_depth: Swift.Int
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_acc_state_cells`.
            public var max_acc_state_cells: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/SizeLimitsConfig/max_acc_state_bits`.
            public var max_acc_state_bits: Swift.Int64?
            /// Creates a new `SizeLimitsConfig`.
            ///
            /// - Parameters:
            ///   - max_msg_bits:
            ///   - max_msg_cells:
            ///   - max_library_cells:
            ///   - max_vm_data_depth:
            ///   - max_ext_msg_size:
            ///   - max_ext_msg_depth:
            ///   - max_acc_state_cells:
            ///   - max_acc_state_bits:
            public init(
                max_msg_bits: Swift.Int64,
                max_msg_cells: Swift.Int64,
                max_library_cells: Swift.Int64,
                max_vm_data_depth: Swift.Int,
                max_ext_msg_size: Swift.Int64,
                max_ext_msg_depth: Swift.Int,
                max_acc_state_cells: Swift.Int64? = nil,
                max_acc_state_bits: Swift.Int64? = nil
            ) {
                self.max_msg_bits = max_msg_bits
                self.max_msg_cells = max_msg_cells
                self.max_library_cells = max_library_cells
                self.max_vm_data_depth = max_vm_data_depth
                self.max_ext_msg_size = max_ext_msg_size
                self.max_ext_msg_depth = max_ext_msg_depth
                self.max_acc_state_cells = max_acc_state_cells
                self.max_acc_state_bits = max_acc_state_bits
            }
            public enum CodingKeys: String, CodingKey {
                case max_msg_bits
                case max_msg_cells
                case max_library_cells
                case max_vm_data_depth
                case max_ext_msg_size
                case max_ext_msg_depth
                case max_acc_state_cells
                case max_acc_state_bits
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValidatorsSet`.
        public struct ValidatorsSet: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/utime_since`.
            public var utime_since: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/utime_until`.
            public var utime_until: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/total`.
            public var total: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/main`.
            public var main: Swift.Int
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/total_weight`.
            public var total_weight: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/listPayload`.
            public struct listPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValidatorsSet/listPayload/public_key`.
                public var public_key: Swift.String
                /// - Remark: Generated from `#/components/schemas/ValidatorsSet/listPayload/weight`.
                public var weight: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/ValidatorsSet/listPayload/adnl_addr`.
                public var adnl_addr: Swift.String?
                /// Creates a new `listPayloadPayload`.
                ///
                /// - Parameters:
                ///   - public_key:
                ///   - weight:
                ///   - adnl_addr:
                public init(public_key: Swift.String, weight: Swift.Int64, adnl_addr: Swift.String? = nil) {
                    self.public_key = public_key
                    self.weight = weight
                    self.adnl_addr = adnl_addr
                }
                public enum CodingKeys: String, CodingKey {
                    case public_key
                    case weight
                    case adnl_addr
                }
            }
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/list`.
            public typealias listPayload = [Components.Schemas.ValidatorsSet.listPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ValidatorsSet/list`.
            public var list: Components.Schemas.ValidatorsSet.listPayload
            /// Creates a new `ValidatorsSet`.
            ///
            /// - Parameters:
            ///   - utime_since:
            ///   - utime_until:
            ///   - total:
            ///   - main:
            ///   - total_weight:
            ///   - list:
            public init(
                utime_since: Swift.Int,
                utime_until: Swift.Int,
                total: Swift.Int,
                main: Swift.Int,
                total_weight: Swift.Int64? = nil,
                list: Components.Schemas.ValidatorsSet.listPayload
            ) {
                self.utime_since = utime_since
                self.utime_until = utime_until
                self.total = total
                self.main = main
                self.total_weight = total_weight
                self.list = list
            }
            public enum CodingKeys: String, CodingKey {
                case utime_since
                case utime_until
                case total
                case main
                case total_weight
                case list
            }
        }
        /// - Remark: Generated from `#/components/schemas/Oracle`.
        public struct Oracle: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Oracle/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Oracle/secp_pubkey`.
            public var secp_pubkey: Swift.String
            /// Creates a new `Oracle`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - secp_pubkey:
            public init(address: Swift.String, secp_pubkey: Swift.String) {
                self.address = address
                self.secp_pubkey = secp_pubkey
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case secp_pubkey
            }
        }
        /// - Remark: Generated from `#/components/schemas/OracleBridgeParams`.
        public struct OracleBridgeParams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/OracleBridgeParams/bridge_addr`.
            public var bridge_addr: Swift.String
            /// - Remark: Generated from `#/components/schemas/OracleBridgeParams/oracle_multisig_address`.
            public var oracle_multisig_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/OracleBridgeParams/external_chain_address`.
            public var external_chain_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/OracleBridgeParams/oracles`.
            public var oracles: [Components.Schemas.Oracle]
            /// Creates a new `OracleBridgeParams`.
            ///
            /// - Parameters:
            ///   - bridge_addr:
            ///   - oracle_multisig_address:
            ///   - external_chain_address:
            ///   - oracles:
            public init(
                bridge_addr: Swift.String,
                oracle_multisig_address: Swift.String,
                external_chain_address: Swift.String,
                oracles: [Components.Schemas.Oracle]
            ) {
                self.bridge_addr = bridge_addr
                self.oracle_multisig_address = oracle_multisig_address
                self.external_chain_address = external_chain_address
                self.oracles = oracles
            }
            public enum CodingKeys: String, CodingKey {
                case bridge_addr
                case oracle_multisig_address
                case external_chain_address
                case oracles
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonBridgePrices`.
        public struct JettonBridgePrices: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/bridge_burn_fee`.
            public var bridge_burn_fee: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/bridge_mint_fee`.
            public var bridge_mint_fee: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/wallet_min_tons_for_storage`.
            public var wallet_min_tons_for_storage: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/wallet_gas_consumption`.
            public var wallet_gas_consumption: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/minter_min_tons_for_storage`.
            public var minter_min_tons_for_storage: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/JettonBridgePrices/discover_gas_consumption`.
            public var discover_gas_consumption: Swift.Int64
            /// Creates a new `JettonBridgePrices`.
            ///
            /// - Parameters:
            ///   - bridge_burn_fee:
            ///   - bridge_mint_fee:
            ///   - wallet_min_tons_for_storage:
            ///   - wallet_gas_consumption:
            ///   - minter_min_tons_for_storage:
            ///   - discover_gas_consumption:
            public init(
                bridge_burn_fee: Swift.Int64,
                bridge_mint_fee: Swift.Int64,
                wallet_min_tons_for_storage: Swift.Int64,
                wallet_gas_consumption: Swift.Int64,
                minter_min_tons_for_storage: Swift.Int64,
                discover_gas_consumption: Swift.Int64
            ) {
                self.bridge_burn_fee = bridge_burn_fee
                self.bridge_mint_fee = bridge_mint_fee
                self.wallet_min_tons_for_storage = wallet_min_tons_for_storage
                self.wallet_gas_consumption = wallet_gas_consumption
                self.minter_min_tons_for_storage = minter_min_tons_for_storage
                self.discover_gas_consumption = discover_gas_consumption
            }
            public enum CodingKeys: String, CodingKey {
                case bridge_burn_fee
                case bridge_mint_fee
                case wallet_min_tons_for_storage
                case wallet_gas_consumption
                case minter_min_tons_for_storage
                case discover_gas_consumption
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonBridgeParams`.
        public struct JettonBridgeParams: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/bridge_address`.
            public var bridge_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/oracles_address`.
            public var oracles_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/state_flags`.
            public var state_flags: Swift.Int
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/burn_bridge_fee`.
            public var burn_bridge_fee: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/oracles`.
            public var oracles: [Components.Schemas.Oracle]
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/external_chain_address`.
            public var external_chain_address: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JettonBridgeParams/prices`.
            public var prices: Components.Schemas.JettonBridgePrices?
            /// Creates a new `JettonBridgeParams`.
            ///
            /// - Parameters:
            ///   - bridge_address:
            ///   - oracles_address:
            ///   - state_flags:
            ///   - burn_bridge_fee:
            ///   - oracles:
            ///   - external_chain_address:
            ///   - prices:
            public init(
                bridge_address: Swift.String,
                oracles_address: Swift.String,
                state_flags: Swift.Int,
                burn_bridge_fee: Swift.Int64? = nil,
                oracles: [Components.Schemas.Oracle],
                external_chain_address: Swift.String? = nil,
                prices: Components.Schemas.JettonBridgePrices? = nil
            ) {
                self.bridge_address = bridge_address
                self.oracles_address = oracles_address
                self.state_flags = state_flags
                self.burn_bridge_fee = burn_bridge_fee
                self.oracles = oracles
                self.external_chain_address = external_chain_address
                self.prices = prices
            }
            public enum CodingKeys: String, CodingKey {
                case bridge_address
                case oracles_address
                case state_flags
                case burn_bridge_fee
                case oracles
                case external_chain_address
                case prices
            }
        }
        /// - Remark: Generated from `#/components/schemas/Validator`.
        public struct Validator: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Validator/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Validator/adnl_address`.
            public var adnl_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Validator/stake`.
            public var stake: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Validator/max_factor`.
            public var max_factor: Swift.Int64
            /// Creates a new `Validator`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - adnl_address:
            ///   - stake:
            ///   - max_factor:
            public init(address: Swift.String, adnl_address: Swift.String, stake: Swift.Int64, max_factor: Swift.Int64)
            {
                self.address = address
                self.adnl_address = adnl_address
                self.stake = stake
                self.max_factor = max_factor
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case adnl_address
                case stake
                case max_factor
            }
        }
        /// - Remark: Generated from `#/components/schemas/Validators`.
        public struct Validators: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Validators/elect_at`.
            public var elect_at: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Validators/elect_close`.
            public var elect_close: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Validators/min_stake`.
            public var min_stake: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Validators/total_stake`.
            public var total_stake: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Validators/validators`.
            public var validators: [Components.Schemas.Validator]
            /// Creates a new `Validators`.
            ///
            /// - Parameters:
            ///   - elect_at:
            ///   - elect_close:
            ///   - min_stake:
            ///   - total_stake:
            ///   - validators:
            public init(
                elect_at: Swift.Int64,
                elect_close: Swift.Int64,
                min_stake: Swift.Int64,
                total_stake: Swift.Int64,
                validators: [Components.Schemas.Validator]
            ) {
                self.elect_at = elect_at
                self.elect_close = elect_close
                self.min_stake = min_stake
                self.total_stake = total_stake
                self.validators = validators
            }
            public enum CodingKeys: String, CodingKey {
                case elect_at
                case elect_close
                case min_stake
                case total_stake
                case validators
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountStorageInfo`.
        public struct AccountStorageInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountStorageInfo/used_cells`.
            public var used_cells: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStorageInfo/used_bits`.
            public var used_bits: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStorageInfo/used_public_cells`.
            public var used_public_cells: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStorageInfo/last_paid`.
            public var last_paid: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStorageInfo/due_payment`.
            public var due_payment: Swift.Int64
            /// Creates a new `AccountStorageInfo`.
            ///
            /// - Parameters:
            ///   - used_cells:
            ///   - used_bits:
            ///   - used_public_cells:
            ///   - last_paid:
            ///   - due_payment:
            public init(
                used_cells: Swift.Int64,
                used_bits: Swift.Int64,
                used_public_cells: Swift.Int64,
                last_paid: Swift.Int64,
                due_payment: Swift.Int64
            ) {
                self.used_cells = used_cells
                self.used_bits = used_bits
                self.used_public_cells = used_public_cells
                self.last_paid = last_paid
                self.due_payment = due_payment
            }
            public enum CodingKeys: String, CodingKey {
                case used_cells
                case used_bits
                case used_public_cells
                case last_paid
                case due_payment
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount`.
        public struct BlockchainRawAccount: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/balance`.
            public var balance: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/extra_balance`.
            public struct extra_balancePayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `extra_balancePayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/extra_balance`.
            public var extra_balance: Components.Schemas.BlockchainRawAccount.extra_balancePayload?
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/code`.
            public var code: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/data`.
            public var data: Swift.String?
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/last_transaction_lt`.
            public var last_transaction_lt: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainRawAccount/storage`.
            public var storage: Components.Schemas.AccountStorageInfo
            /// Creates a new `BlockchainRawAccount`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - balance:
            ///   - extra_balance:
            ///   - code:
            ///   - data:
            ///   - last_transaction_lt:
            ///   - status:
            ///   - storage:
            public init(
                address: Swift.String,
                balance: Swift.Int64,
                extra_balance: Components.Schemas.BlockchainRawAccount.extra_balancePayload? = nil,
                code: Swift.String? = nil,
                data: Swift.String? = nil,
                last_transaction_lt: Swift.Int64,
                status: Swift.String,
                storage: Components.Schemas.AccountStorageInfo
            ) {
                self.address = address
                self.balance = balance
                self.extra_balance = extra_balance
                self.code = code
                self.data = data
                self.last_transaction_lt = last_transaction_lt
                self.status = status
                self.storage = storage
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case balance
                case extra_balance
                case code
                case data
                case last_transaction_lt
                case status
                case storage
            }
        }
        /// - Remark: Generated from `#/components/schemas/Account`.
        public struct Account: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Account/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/balance`.
            public var balance: Swift.Int64
            /// unix timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/Account/last_activity`.
            public var last_activity: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Account/status`.
            public var status: Swift.String
            /// - Remark: Generated from `#/components/schemas/Account/interfaces`.
            public var interfaces: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/Account/name`.
            public var name: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/is_scam`.
            public var is_scam: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Account/icon`.
            public var icon: Swift.String?
            /// - Remark: Generated from `#/components/schemas/Account/memo_required`.
            public var memo_required: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Account/get_methods`.
            public var get_methods: [Swift.String]
            /// - Remark: Generated from `#/components/schemas/Account/is_suspended`.
            public var is_suspended: Swift.Bool?
            /// - Remark: Generated from `#/components/schemas/Account/is_wallet`.
            public var is_wallet: Swift.Bool
            /// Creates a new `Account`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - balance:
            ///   - last_activity: unix timestamp
            ///   - status:
            ///   - interfaces:
            ///   - name:
            ///   - is_scam:
            ///   - icon:
            ///   - memo_required:
            ///   - get_methods:
            ///   - is_suspended:
            ///   - is_wallet:
            public init(
                address: Swift.String,
                balance: Swift.Int64,
                last_activity: Swift.Int64,
                status: Swift.String,
                interfaces: [Swift.String]? = nil,
                name: Swift.String? = nil,
                is_scam: Swift.Bool? = nil,
                icon: Swift.String? = nil,
                memo_required: Swift.Bool? = nil,
                get_methods: [Swift.String],
                is_suspended: Swift.Bool? = nil,
                is_wallet: Swift.Bool
            ) {
                self.address = address
                self.balance = balance
                self.last_activity = last_activity
                self.status = status
                self.interfaces = interfaces
                self.name = name
                self.is_scam = is_scam
                self.icon = icon
                self.memo_required = memo_required
                self.get_methods = get_methods
                self.is_suspended = is_suspended
                self.is_wallet = is_wallet
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case balance
                case last_activity
                case status
                case interfaces
                case name
                case is_scam
                case icon
                case memo_required
                case get_methods
                case is_suspended
                case is_wallet
            }
        }
        /// - Remark: Generated from `#/components/schemas/Accounts`.
        public struct Accounts: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Accounts/accounts`.
            public var accounts: [Components.Schemas.Account]
            /// Creates a new `Accounts`.
            ///
            /// - Parameters:
            ///   - accounts:
            public init(accounts: [Components.Schemas.Account]) { self.accounts = accounts }
            public enum CodingKeys: String, CodingKey { case accounts }
        }
        /// - Remark: Generated from `#/components/schemas/MethodExecutionResult`.
        public struct MethodExecutionResult: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MethodExecutionResult/success`.
            public var success: Swift.Bool
            /// tvm exit code
            ///
            /// - Remark: Generated from `#/components/schemas/MethodExecutionResult/exit_code`.
            public var exit_code: Swift.Int
            /// - Remark: Generated from `#/components/schemas/MethodExecutionResult/stack`.
            public var stack: [Components.Schemas.TvmStackRecord]
            /// - Remark: Generated from `#/components/schemas/MethodExecutionResult/decoded`.
            public var decoded: OpenAPIRuntime.OpenAPIValueContainer?
            /// Creates a new `MethodExecutionResult`.
            ///
            /// - Parameters:
            ///   - success:
            ///   - exit_code: tvm exit code
            ///   - stack:
            ///   - decoded:
            public init(
                success: Swift.Bool,
                exit_code: Swift.Int,
                stack: [Components.Schemas.TvmStackRecord],
                decoded: OpenAPIRuntime.OpenAPIValueContainer? = nil
            ) {
                self.success = success
                self.exit_code = exit_code
                self.stack = stack
                self.decoded = decoded
            }
            public enum CodingKeys: String, CodingKey {
                case success
                case exit_code
                case stack
                case decoded
            }
        }
        /// - Remark: Generated from `#/components/schemas/TvmStackRecord`.
        public struct TvmStackRecord: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case cell = "cell"
                case num = "num"
                case nan = "nan"
                case null = "null"
                case tuple = "tuple"
            }
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/type`.
            public var _type: Components.Schemas.TvmStackRecord._typePayload {
                get { storage.value._type }
                _modify { yield &storage.value._type }
            }
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/cell`.
            public var cell: Swift.String? {
                get { storage.value.cell }
                _modify { yield &storage.value.cell }
            }
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/slice`.
            public var slice: Swift.String? {
                get { storage.value.slice }
                _modify { yield &storage.value.slice }
            }
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/num`.
            public var num: Swift.String? {
                get { storage.value.num }
                _modify { yield &storage.value.num }
            }
            /// - Remark: Generated from `#/components/schemas/TvmStackRecord/tuple`.
            public var tuple: [Components.Schemas.TvmStackRecord]? {
                get { storage.value.tuple }
                _modify { yield &storage.value.tuple }
            }
            /// Creates a new `TvmStackRecord`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - cell:
            ///   - slice:
            ///   - num:
            ///   - tuple:
            public init(
                _type: Components.Schemas.TvmStackRecord._typePayload,
                cell: Swift.String? = nil,
                slice: Swift.String? = nil,
                num: Swift.String? = nil,
                tuple: [Components.Schemas.TvmStackRecord]? = nil
            ) { storage = .init(value: .init(_type: _type, cell: cell, slice: slice, num: num, tuple: tuple)) }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case cell
                case slice
                case num
                case tuple
            }
            public init(from decoder: any Decoder) throws { storage = try .init(from: decoder) }
            public func encode(to encoder: any Encoder) throws { try storage.encode(to: encoder) }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/type`.
                @frozen enum _typePayload: String, Codable, Hashable, Sendable {
                    case cell = "cell"
                    case num = "num"
                    case nan = "nan"
                    case null = "null"
                    case tuple = "tuple"
                }
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/type`.
                var _type: Components.Schemas.TvmStackRecord._typePayload
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/cell`.
                var cell: Swift.String?
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/slice`.
                var slice: Swift.String?
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/num`.
                var num: Swift.String?
                /// - Remark: Generated from `#/components/schemas/TvmStackRecord/tuple`.
                var tuple: [Components.Schemas.TvmStackRecord]?
                init(
                    _type: Components.Schemas.TvmStackRecord._typePayload,
                    cell: Swift.String? = nil,
                    slice: Swift.String? = nil,
                    num: Swift.String? = nil,
                    tuple: [Components.Schemas.TvmStackRecord]? = nil
                ) {
                    self._type = _type
                    self.cell = cell
                    self.slice = slice
                    self.num = num
                    self.tuple = tuple
                }
                typealias CodingKeys = Components.Schemas.TvmStackRecord.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/RawBlockchainConfig`.
        public struct RawBlockchainConfig: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/RawBlockchainConfig/config`.
            public struct configPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `configPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/RawBlockchainConfig/config`.
            public var config: Components.Schemas.RawBlockchainConfig.configPayload
            /// Creates a new `RawBlockchainConfig`.
            ///
            /// - Parameters:
            ///   - config:
            public init(config: Components.Schemas.RawBlockchainConfig.configPayload) { self.config = config }
            public enum CodingKeys: String, CodingKey { case config }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainConfig`.
        public struct BlockchainConfig: Codable, Hashable, Sendable {
            /// config boc in base64 format
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/raw`.
            public var raw: Swift.String
            /// config address
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/0`.
            public var _0: Swift.String
            /// elector address
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/1`.
            public var _1: Swift.String
            /// minter address
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/2`.
            public var _2: Swift.String
            /// The address of the transaction fee collector.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/3`.
            public var _3: Swift.String?
            /// dns root address
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/4`.
            public var _4: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/5`.
            public struct _5Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/5/blackhole_addr`.
                public var blackhole_addr: Swift.String?
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/5/fee_burn_nom`.
                public var fee_burn_nom: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/5/fee_burn_denom`.
                public var fee_burn_denom: Swift.Int64
                /// Creates a new `_5Payload`.
                ///
                /// - Parameters:
                ///   - blackhole_addr:
                ///   - fee_burn_nom:
                ///   - fee_burn_denom:
                public init(blackhole_addr: Swift.String? = nil, fee_burn_nom: Swift.Int64, fee_burn_denom: Swift.Int64)
                {
                    self.blackhole_addr = blackhole_addr
                    self.fee_burn_nom = fee_burn_nom
                    self.fee_burn_denom = fee_burn_denom
                }
                public enum CodingKeys: String, CodingKey {
                    case blackhole_addr
                    case fee_burn_nom
                    case fee_burn_denom
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/5`.
            public var _5: Components.Schemas.BlockchainConfig._5Payload?
            /// Minting fees of new currencies.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/6`.
            public struct _6Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/6/mint_new_price`.
                public var mint_new_price: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/6/mint_add_price`.
                public var mint_add_price: Swift.Int64
                /// Creates a new `_6Payload`.
                ///
                /// - Parameters:
                ///   - mint_new_price:
                ///   - mint_add_price:
                public init(mint_new_price: Swift.Int64, mint_add_price: Swift.Int64) {
                    self.mint_new_price = mint_new_price
                    self.mint_add_price = mint_add_price
                }
                public enum CodingKeys: String, CodingKey {
                    case mint_new_price
                    case mint_add_price
                }
            }
            /// Minting fees of new currencies.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/6`.
            public var _6: Components.Schemas.BlockchainConfig._6Payload?
            /// The volume of each of the additional currencies in circulation.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7`.
            public struct _7Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7/currenciesPayload`.
                public struct currenciesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7/currenciesPayload/currency_id`.
                    public var currency_id: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7/currenciesPayload/amount`.
                    public var amount: Swift.String
                    /// Creates a new `currenciesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - currency_id:
                    ///   - amount:
                    public init(currency_id: Swift.Int64, amount: Swift.String) {
                        self.currency_id = currency_id
                        self.amount = amount
                    }
                    public enum CodingKeys: String, CodingKey {
                        case currency_id
                        case amount
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7/currencies`.
                public typealias currenciesPayload = [Components.Schemas.BlockchainConfig._7Payload
                    .currenciesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7/currencies`.
                public var currencies: Components.Schemas.BlockchainConfig._7Payload.currenciesPayload
                /// Creates a new `_7Payload`.
                ///
                /// - Parameters:
                ///   - currencies:
                public init(currencies: Components.Schemas.BlockchainConfig._7Payload.currenciesPayload) {
                    self.currencies = currencies
                }
                public enum CodingKeys: String, CodingKey { case currencies }
            }
            /// The volume of each of the additional currencies in circulation.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/7`.
            public var _7: Components.Schemas.BlockchainConfig._7Payload?
            /// The network version and additional capabilities supported by the validators.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/8`.
            public struct _8Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/8/version`.
                public var version: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/8/capabilities`.
                public var capabilities: Swift.Int64
                /// Creates a new `_8Payload`.
                ///
                /// - Parameters:
                ///   - version:
                ///   - capabilities:
                public init(version: Swift.Int64, capabilities: Swift.Int64) {
                    self.version = version
                    self.capabilities = capabilities
                }
                public enum CodingKeys: String, CodingKey {
                    case version
                    case capabilities
                }
            }
            /// The network version and additional capabilities supported by the validators.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/8`.
            public var _8: Components.Schemas.BlockchainConfig._8Payload?
            /// List of mandatory parameters of the blockchain config.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/9`.
            public struct _9Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/9/mandatory_params`.
                public var mandatory_params: [Swift.Int32]
                /// Creates a new `_9Payload`.
                ///
                /// - Parameters:
                ///   - mandatory_params:
                public init(mandatory_params: [Swift.Int32]) { self.mandatory_params = mandatory_params }
                public enum CodingKeys: String, CodingKey { case mandatory_params }
            }
            /// List of mandatory parameters of the blockchain config.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/9`.
            public var _9: Components.Schemas.BlockchainConfig._9Payload?
            /// List of critical TON parameters, the change of which significantly affects the network, so more voting rounds are held.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/10`.
            public struct _10Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/10/critical_params`.
                public var critical_params: [Swift.Int32]
                /// Creates a new `_10Payload`.
                ///
                /// - Parameters:
                ///   - critical_params:
                public init(critical_params: [Swift.Int32]) { self.critical_params = critical_params }
                public enum CodingKeys: String, CodingKey { case critical_params }
            }
            /// List of critical TON parameters, the change of which significantly affects the network, so more voting rounds are held.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/10`.
            public var _10: Components.Schemas.BlockchainConfig._10Payload?
            /// This parameter indicates under what conditions proposals to change the TON configuration are accepted.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/11`.
            public struct _11Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/11/normal_params`.
                public var normal_params: Components.Schemas.ConfigProposalSetup
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/11/critical_params`.
                public var critical_params: Components.Schemas.ConfigProposalSetup
                /// Creates a new `_11Payload`.
                ///
                /// - Parameters:
                ///   - normal_params:
                ///   - critical_params:
                public init(
                    normal_params: Components.Schemas.ConfigProposalSetup,
                    critical_params: Components.Schemas.ConfigProposalSetup
                ) {
                    self.normal_params = normal_params
                    self.critical_params = critical_params
                }
                public enum CodingKeys: String, CodingKey {
                    case normal_params
                    case critical_params
                }
            }
            /// This parameter indicates under what conditions proposals to change the TON configuration are accepted.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/11`.
            public var _11: Components.Schemas.BlockchainConfig._11Payload?
            /// Workchains in the TON Blockchain
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/12`.
            public struct _12Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/12/workchains`.
                public var workchains: [Components.Schemas.WorkchainDescr]
                /// Creates a new `_12Payload`.
                ///
                /// - Parameters:
                ///   - workchains:
                public init(workchains: [Components.Schemas.WorkchainDescr]) { self.workchains = workchains }
                public enum CodingKeys: String, CodingKey { case workchains }
            }
            /// Workchains in the TON Blockchain
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/12`.
            public var _12: Components.Schemas.BlockchainConfig._12Payload?
            /// The cost of filing complaints about incorrect operation of validators.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/13`.
            public struct _13Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/13/deposit`.
                public var deposit: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/13/bit_price`.
                public var bit_price: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/13/cell_price`.
                public var cell_price: Swift.Int64
                /// Creates a new `_13Payload`.
                ///
                /// - Parameters:
                ///   - deposit:
                ///   - bit_price:
                ///   - cell_price:
                public init(deposit: Swift.Int64, bit_price: Swift.Int64, cell_price: Swift.Int64) {
                    self.deposit = deposit
                    self.bit_price = bit_price
                    self.cell_price = cell_price
                }
                public enum CodingKeys: String, CodingKey {
                    case deposit
                    case bit_price
                    case cell_price
                }
            }
            /// The cost of filing complaints about incorrect operation of validators.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/13`.
            public var _13: Components.Schemas.BlockchainConfig._13Payload?
            /// The reward in nanoTons for block creation in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/14`.
            public struct _14Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/14/masterchain_block_fee`.
                public var masterchain_block_fee: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/14/basechain_block_fee`.
                public var basechain_block_fee: Swift.Int64
                /// Creates a new `_14Payload`.
                ///
                /// - Parameters:
                ///   - masterchain_block_fee:
                ///   - basechain_block_fee:
                public init(masterchain_block_fee: Swift.Int64, basechain_block_fee: Swift.Int64) {
                    self.masterchain_block_fee = masterchain_block_fee
                    self.basechain_block_fee = basechain_block_fee
                }
                public enum CodingKeys: String, CodingKey {
                    case masterchain_block_fee
                    case basechain_block_fee
                }
            }
            /// The reward in nanoTons for block creation in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/14`.
            public var _14: Components.Schemas.BlockchainConfig._14Payload?
            /// The reward in nanoTons for block creation in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15`.
            public struct _15Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15/validators_elected_for`.
                public var validators_elected_for: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15/elections_start_before`.
                public var elections_start_before: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15/elections_end_before`.
                public var elections_end_before: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15/stake_held_for`.
                public var stake_held_for: Swift.Int64
                /// Creates a new `_15Payload`.
                ///
                /// - Parameters:
                ///   - validators_elected_for:
                ///   - elections_start_before:
                ///   - elections_end_before:
                ///   - stake_held_for:
                public init(
                    validators_elected_for: Swift.Int64,
                    elections_start_before: Swift.Int64,
                    elections_end_before: Swift.Int64,
                    stake_held_for: Swift.Int64
                ) {
                    self.validators_elected_for = validators_elected_for
                    self.elections_start_before = elections_start_before
                    self.elections_end_before = elections_end_before
                    self.stake_held_for = stake_held_for
                }
                public enum CodingKeys: String, CodingKey {
                    case validators_elected_for
                    case elections_start_before
                    case elections_end_before
                    case stake_held_for
                }
            }
            /// The reward in nanoTons for block creation in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/15`.
            public var _15: Components.Schemas.BlockchainConfig._15Payload?
            /// The limits on the number of validators in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/16`.
            public struct _16Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/16/max_validators`.
                public var max_validators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/16/max_main_validators`.
                public var max_main_validators: Swift.Int
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/16/min_validators`.
                public var min_validators: Swift.Int
                /// Creates a new `_16Payload`.
                ///
                /// - Parameters:
                ///   - max_validators:
                ///   - max_main_validators:
                ///   - min_validators:
                public init(max_validators: Swift.Int, max_main_validators: Swift.Int, min_validators: Swift.Int) {
                    self.max_validators = max_validators
                    self.max_main_validators = max_main_validators
                    self.min_validators = min_validators
                }
                public enum CodingKeys: String, CodingKey {
                    case max_validators
                    case max_main_validators
                    case min_validators
                }
            }
            /// The limits on the number of validators in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/16`.
            public var _16: Components.Schemas.BlockchainConfig._16Payload?
            /// The stake parameters configuration in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17`.
            public struct _17Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17/min_stake`.
                public var min_stake: Swift.String
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17/max_stake`.
                public var max_stake: Swift.String
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17/min_total_stake`.
                public var min_total_stake: Swift.String
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17/max_stake_factor`.
                public var max_stake_factor: Swift.Int64
                /// Creates a new `_17Payload`.
                ///
                /// - Parameters:
                ///   - min_stake:
                ///   - max_stake:
                ///   - min_total_stake:
                ///   - max_stake_factor:
                public init(
                    min_stake: Swift.String,
                    max_stake: Swift.String,
                    min_total_stake: Swift.String,
                    max_stake_factor: Swift.Int64
                ) {
                    self.min_stake = min_stake
                    self.max_stake = max_stake
                    self.min_total_stake = min_total_stake
                    self.max_stake_factor = max_stake_factor
                }
                public enum CodingKeys: String, CodingKey {
                    case min_stake
                    case max_stake
                    case min_total_stake
                    case max_stake_factor
                }
            }
            /// The stake parameters configuration in the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/17`.
            public var _17: Components.Schemas.BlockchainConfig._17Payload?
            /// The prices for data storage.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18`.
            public struct _18Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload`.
                public struct storage_pricesPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload/utime_since`.
                    public var utime_since: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload/bit_price_ps`.
                    public var bit_price_ps: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload/cell_price_ps`.
                    public var cell_price_ps: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload/mc_bit_price_ps`.
                    public var mc_bit_price_ps: Swift.Int64
                    /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_pricesPayload/mc_cell_price_ps`.
                    public var mc_cell_price_ps: Swift.Int64
                    /// Creates a new `storage_pricesPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - utime_since:
                    ///   - bit_price_ps:
                    ///   - cell_price_ps:
                    ///   - mc_bit_price_ps:
                    ///   - mc_cell_price_ps:
                    public init(
                        utime_since: Swift.Int64,
                        bit_price_ps: Swift.Int64,
                        cell_price_ps: Swift.Int64,
                        mc_bit_price_ps: Swift.Int64,
                        mc_cell_price_ps: Swift.Int64
                    ) {
                        self.utime_since = utime_since
                        self.bit_price_ps = bit_price_ps
                        self.cell_price_ps = cell_price_ps
                        self.mc_bit_price_ps = mc_bit_price_ps
                        self.mc_cell_price_ps = mc_cell_price_ps
                    }
                    public enum CodingKeys: String, CodingKey {
                        case utime_since
                        case bit_price_ps
                        case cell_price_ps
                        case mc_bit_price_ps
                        case mc_cell_price_ps
                    }
                }
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_prices`.
                public typealias storage_pricesPayload = [Components.Schemas.BlockchainConfig._18Payload
                    .storage_pricesPayloadPayload]
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18/storage_prices`.
                public var storage_prices: Components.Schemas.BlockchainConfig._18Payload.storage_pricesPayload
                /// Creates a new `_18Payload`.
                ///
                /// - Parameters:
                ///   - storage_prices:
                public init(storage_prices: Components.Schemas.BlockchainConfig._18Payload.storage_pricesPayload) {
                    self.storage_prices = storage_prices
                }
                public enum CodingKeys: String, CodingKey { case storage_prices }
            }
            /// The prices for data storage.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/18`.
            public var _18: Components.Schemas.BlockchainConfig._18Payload?
            /// The cost of computations in the masterchain. The complexity of any computation is estimated in gas units.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/20`.
            public struct _20Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/20/gas_limits_prices`.
                public var gas_limits_prices: Components.Schemas.GasLimitPrices
                /// Creates a new `_20Payload`.
                ///
                /// - Parameters:
                ///   - gas_limits_prices:
                public init(gas_limits_prices: Components.Schemas.GasLimitPrices) {
                    self.gas_limits_prices = gas_limits_prices
                }
                public enum CodingKeys: String, CodingKey { case gas_limits_prices }
            }
            /// The cost of computations in the masterchain. The complexity of any computation is estimated in gas units.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/20`.
            public var _20: Components.Schemas.BlockchainConfig._20Payload?
            /// The cost of computations in the basechains. The complexity of any computation is estimated in gas units.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/21`.
            public struct _21Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/21/gas_limits_prices`.
                public var gas_limits_prices: Components.Schemas.GasLimitPrices
                /// Creates a new `_21Payload`.
                ///
                /// - Parameters:
                ///   - gas_limits_prices:
                public init(gas_limits_prices: Components.Schemas.GasLimitPrices) {
                    self.gas_limits_prices = gas_limits_prices
                }
                public enum CodingKeys: String, CodingKey { case gas_limits_prices }
            }
            /// The cost of computations in the basechains. The complexity of any computation is estimated in gas units.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/21`.
            public var _21: Components.Schemas.BlockchainConfig._21Payload?
            /// The limits on the block in the masterchain, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/22`.
            public struct _22Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/22/block_limits`.
                public var block_limits: Components.Schemas.BlockLimits
                /// Creates a new `_22Payload`.
                ///
                /// - Parameters:
                ///   - block_limits:
                public init(block_limits: Components.Schemas.BlockLimits) { self.block_limits = block_limits }
                public enum CodingKeys: String, CodingKey { case block_limits }
            }
            /// The limits on the block in the masterchain, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/22`.
            public var _22: Components.Schemas.BlockchainConfig._22Payload?
            /// The limits on the block in the basechains, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/23`.
            public struct _23Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/23/block_limits`.
                public var block_limits: Components.Schemas.BlockLimits
                /// Creates a new `_23Payload`.
                ///
                /// - Parameters:
                ///   - block_limits:
                public init(block_limits: Components.Schemas.BlockLimits) { self.block_limits = block_limits }
                public enum CodingKeys: String, CodingKey { case block_limits }
            }
            /// The limits on the block in the basechains, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/23`.
            public var _23: Components.Schemas.BlockchainConfig._23Payload?
            /// The cost of sending messages in the masterchain of the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/24`.
            public struct _24Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/24/msg_forward_prices`.
                public var msg_forward_prices: Components.Schemas.MsgForwardPrices
                /// Creates a new `_24Payload`.
                ///
                /// - Parameters:
                ///   - msg_forward_prices:
                public init(msg_forward_prices: Components.Schemas.MsgForwardPrices) {
                    self.msg_forward_prices = msg_forward_prices
                }
                public enum CodingKeys: String, CodingKey { case msg_forward_prices }
            }
            /// The cost of sending messages in the masterchain of the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/24`.
            public var _24: Components.Schemas.BlockchainConfig._24Payload?
            /// The cost of sending messages in the basechains of the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/25`.
            public struct _25Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/25/msg_forward_prices`.
                public var msg_forward_prices: Components.Schemas.MsgForwardPrices
                /// Creates a new `_25Payload`.
                ///
                /// - Parameters:
                ///   - msg_forward_prices:
                public init(msg_forward_prices: Components.Schemas.MsgForwardPrices) {
                    self.msg_forward_prices = msg_forward_prices
                }
                public enum CodingKeys: String, CodingKey { case msg_forward_prices }
            }
            /// The cost of sending messages in the basechains of the TON blockchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/25`.
            public var _25: Components.Schemas.BlockchainConfig._25Payload?
            /// The configuration for the Catchain protocol.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28`.
            public struct _28Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/mc_catchain_lifetime`.
                public var mc_catchain_lifetime: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/shard_catchain_lifetime`.
                public var shard_catchain_lifetime: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/shard_validators_lifetime`.
                public var shard_validators_lifetime: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/shard_validators_num`.
                public var shard_validators_num: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/flags`.
                public var flags: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28/shuffle_mc_validators`.
                public var shuffle_mc_validators: Swift.Bool?
                /// Creates a new `_28Payload`.
                ///
                /// - Parameters:
                ///   - mc_catchain_lifetime:
                ///   - shard_catchain_lifetime:
                ///   - shard_validators_lifetime:
                ///   - shard_validators_num:
                ///   - flags:
                ///   - shuffle_mc_validators:
                public init(
                    mc_catchain_lifetime: Swift.Int64,
                    shard_catchain_lifetime: Swift.Int64,
                    shard_validators_lifetime: Swift.Int64,
                    shard_validators_num: Swift.Int64,
                    flags: Swift.Int? = nil,
                    shuffle_mc_validators: Swift.Bool? = nil
                ) {
                    self.mc_catchain_lifetime = mc_catchain_lifetime
                    self.shard_catchain_lifetime = shard_catchain_lifetime
                    self.shard_validators_lifetime = shard_validators_lifetime
                    self.shard_validators_num = shard_validators_num
                    self.flags = flags
                    self.shuffle_mc_validators = shuffle_mc_validators
                }
                public enum CodingKeys: String, CodingKey {
                    case mc_catchain_lifetime
                    case shard_catchain_lifetime
                    case shard_validators_lifetime
                    case shard_validators_num
                    case flags
                    case shuffle_mc_validators
                }
            }
            /// The configuration for the Catchain protocol.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/28`.
            public var _28: Components.Schemas.BlockchainConfig._28Payload?
            /// The configuration for the consensus protocol above catchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29`.
            public struct _29Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/flags`.
                public var flags: Swift.Int?
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/new_catchain_ids`.
                public var new_catchain_ids: Swift.Bool?
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/round_candidates`.
                public var round_candidates: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/next_candidate_delay_ms`.
                public var next_candidate_delay_ms: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/consensus_timeout_ms`.
                public var consensus_timeout_ms: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/fast_attempts`.
                public var fast_attempts: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/attempt_duration`.
                public var attempt_duration: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/catchain_max_deps`.
                public var catchain_max_deps: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/max_block_bytes`.
                public var max_block_bytes: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/max_collated_bytes`.
                public var max_collated_bytes: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/proto_version`.
                public var proto_version: Swift.Int64?
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29/catchain_max_blocks_coeff`.
                public var catchain_max_blocks_coeff: Swift.Int64?
                /// Creates a new `_29Payload`.
                ///
                /// - Parameters:
                ///   - flags:
                ///   - new_catchain_ids:
                ///   - round_candidates:
                ///   - next_candidate_delay_ms:
                ///   - consensus_timeout_ms:
                ///   - fast_attempts:
                ///   - attempt_duration:
                ///   - catchain_max_deps:
                ///   - max_block_bytes:
                ///   - max_collated_bytes:
                ///   - proto_version:
                ///   - catchain_max_blocks_coeff:
                public init(
                    flags: Swift.Int? = nil,
                    new_catchain_ids: Swift.Bool? = nil,
                    round_candidates: Swift.Int64,
                    next_candidate_delay_ms: Swift.Int64,
                    consensus_timeout_ms: Swift.Int64,
                    fast_attempts: Swift.Int64,
                    attempt_duration: Swift.Int64,
                    catchain_max_deps: Swift.Int64,
                    max_block_bytes: Swift.Int64,
                    max_collated_bytes: Swift.Int64,
                    proto_version: Swift.Int64? = nil,
                    catchain_max_blocks_coeff: Swift.Int64? = nil
                ) {
                    self.flags = flags
                    self.new_catchain_ids = new_catchain_ids
                    self.round_candidates = round_candidates
                    self.next_candidate_delay_ms = next_candidate_delay_ms
                    self.consensus_timeout_ms = consensus_timeout_ms
                    self.fast_attempts = fast_attempts
                    self.attempt_duration = attempt_duration
                    self.catchain_max_deps = catchain_max_deps
                    self.max_block_bytes = max_block_bytes
                    self.max_collated_bytes = max_collated_bytes
                    self.proto_version = proto_version
                    self.catchain_max_blocks_coeff = catchain_max_blocks_coeff
                }
                public enum CodingKeys: String, CodingKey {
                    case flags
                    case new_catchain_ids
                    case round_candidates
                    case next_candidate_delay_ms
                    case consensus_timeout_ms
                    case fast_attempts
                    case attempt_duration
                    case catchain_max_deps
                    case max_block_bytes
                    case max_collated_bytes
                    case proto_version
                    case catchain_max_blocks_coeff
                }
            }
            /// The configuration for the consensus protocol above catchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/29`.
            public var _29: Components.Schemas.BlockchainConfig._29Payload?
            /// The configuration for the consensus protocol above catchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/31`.
            public struct _31Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/31/fundamental_smc_addr`.
                public var fundamental_smc_addr: [Swift.String]
                /// Creates a new `_31Payload`.
                ///
                /// - Parameters:
                ///   - fundamental_smc_addr:
                public init(fundamental_smc_addr: [Swift.String]) { self.fundamental_smc_addr = fundamental_smc_addr }
                public enum CodingKeys: String, CodingKey { case fundamental_smc_addr }
            }
            /// The configuration for the consensus protocol above catchain.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/31`.
            public var _31: Components.Schemas.BlockchainConfig._31Payload?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/32`.
            public var _32: Components.Schemas.ValidatorsSet?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/33`.
            public var _33: Components.Schemas.ValidatorsSet?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/34`.
            public var _34: Components.Schemas.ValidatorsSet?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/35`.
            public var _35: Components.Schemas.ValidatorsSet?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/36`.
            public var _36: Components.Schemas.ValidatorsSet?
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/37`.
            public var _37: Components.Schemas.ValidatorsSet?
            /// The configuration for punishment for improper behavior (non-validation). In the absence of the parameter, the default fine size is 101 TON
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/40`.
            public struct _40Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/40/misbehaviour_punishment_config`.
                public var misbehaviour_punishment_config: Components.Schemas.MisbehaviourPunishmentConfig
                /// Creates a new `_40Payload`.
                ///
                /// - Parameters:
                ///   - misbehaviour_punishment_config:
                public init(misbehaviour_punishment_config: Components.Schemas.MisbehaviourPunishmentConfig) {
                    self.misbehaviour_punishment_config = misbehaviour_punishment_config
                }
                public enum CodingKeys: String, CodingKey { case misbehaviour_punishment_config }
            }
            /// The configuration for punishment for improper behavior (non-validation). In the absence of the parameter, the default fine size is 101 TON
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/40`.
            public var _40: Components.Schemas.BlockchainConfig._40Payload?
            /// The size limits and some other characteristics of accounts and messages.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/43`.
            public struct _43Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/43/size_limits_config`.
                public var size_limits_config: Components.Schemas.SizeLimitsConfig
                /// Creates a new `_43Payload`.
                ///
                /// - Parameters:
                ///   - size_limits_config:
                public init(size_limits_config: Components.Schemas.SizeLimitsConfig) {
                    self.size_limits_config = size_limits_config
                }
                public enum CodingKeys: String, CodingKey { case size_limits_config }
            }
            /// The size limits and some other characteristics of accounts and messages.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/43`.
            public var _43: Components.Schemas.BlockchainConfig._43Payload?
            /// suspended accounts
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/44`.
            public struct _44Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/44/accounts`.
                public var accounts: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/44/suspended_until`.
                public var suspended_until: Swift.Int
                /// Creates a new `_44Payload`.
                ///
                /// - Parameters:
                ///   - accounts:
                ///   - suspended_until:
                public init(accounts: [Swift.String], suspended_until: Swift.Int) {
                    self.accounts = accounts
                    self.suspended_until = suspended_until
                }
                public enum CodingKeys: String, CodingKey {
                    case accounts
                    case suspended_until
                }
            }
            /// suspended accounts
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/44`.
            public var _44: Components.Schemas.BlockchainConfig._44Payload
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/71`.
            public struct _71Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/71/oracle_bridge_params`.
                public var oracle_bridge_params: Components.Schemas.OracleBridgeParams
                /// Creates a new `_71Payload`.
                ///
                /// - Parameters:
                ///   - oracle_bridge_params:
                public init(oracle_bridge_params: Components.Schemas.OracleBridgeParams) {
                    self.oracle_bridge_params = oracle_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case oracle_bridge_params }
            }
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/71`.
            public var _71: Components.Schemas.BlockchainConfig._71Payload?
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/72`.
            public struct _72Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/72/oracle_bridge_params`.
                public var oracle_bridge_params: Components.Schemas.OracleBridgeParams
                /// Creates a new `_72Payload`.
                ///
                /// - Parameters:
                ///   - oracle_bridge_params:
                public init(oracle_bridge_params: Components.Schemas.OracleBridgeParams) {
                    self.oracle_bridge_params = oracle_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case oracle_bridge_params }
            }
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/72`.
            public var _72: Components.Schemas.BlockchainConfig._72Payload?
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/73`.
            public struct _73Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/73/oracle_bridge_params`.
                public var oracle_bridge_params: Components.Schemas.OracleBridgeParams
                /// Creates a new `_73Payload`.
                ///
                /// - Parameters:
                ///   - oracle_bridge_params:
                public init(oracle_bridge_params: Components.Schemas.OracleBridgeParams) {
                    self.oracle_bridge_params = oracle_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case oracle_bridge_params }
            }
            /// Bridge parameters for wrapping TON in other networks.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/73`.
            public var _73: Components.Schemas.BlockchainConfig._73Payload?
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/79`.
            public struct _79Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/79/jetton_bridge_params`.
                public var jetton_bridge_params: Components.Schemas.JettonBridgeParams
                /// Creates a new `_79Payload`.
                ///
                /// - Parameters:
                ///   - jetton_bridge_params:
                public init(jetton_bridge_params: Components.Schemas.JettonBridgeParams) {
                    self.jetton_bridge_params = jetton_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case jetton_bridge_params }
            }
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/79`.
            public var _79: Components.Schemas.BlockchainConfig._79Payload?
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/81`.
            public struct _81Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/81/jetton_bridge_params`.
                public var jetton_bridge_params: Components.Schemas.JettonBridgeParams
                /// Creates a new `_81Payload`.
                ///
                /// - Parameters:
                ///   - jetton_bridge_params:
                public init(jetton_bridge_params: Components.Schemas.JettonBridgeParams) {
                    self.jetton_bridge_params = jetton_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case jetton_bridge_params }
            }
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/81`.
            public var _81: Components.Schemas.BlockchainConfig._81Payload?
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/82`.
            public struct _82Payload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainConfig/82/jetton_bridge_params`.
                public var jetton_bridge_params: Components.Schemas.JettonBridgeParams
                /// Creates a new `_82Payload`.
                ///
                /// - Parameters:
                ///   - jetton_bridge_params:
                public init(jetton_bridge_params: Components.Schemas.JettonBridgeParams) {
                    self.jetton_bridge_params = jetton_bridge_params
                }
                public enum CodingKeys: String, CodingKey { case jetton_bridge_params }
            }
            /// Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///
            /// - Remark: Generated from `#/components/schemas/BlockchainConfig/82`.
            public var _82: Components.Schemas.BlockchainConfig._82Payload?
            /// Creates a new `BlockchainConfig`.
            ///
            /// - Parameters:
            ///   - raw: config boc in base64 format
            ///   - _0: config address
            ///   - _1: elector address
            ///   - _2: minter address
            ///   - _3: The address of the transaction fee collector.
            ///   - _4: dns root address
            ///   - _5:
            ///   - _6: Minting fees of new currencies.
            ///   - _7: The volume of each of the additional currencies in circulation.
            ///   - _8: The network version and additional capabilities supported by the validators.
            ///   - _9: List of mandatory parameters of the blockchain config.
            ///   - _10: List of critical TON parameters, the change of which significantly affects the network, so more voting rounds are held.
            ///   - _11: This parameter indicates under what conditions proposals to change the TON configuration are accepted.
            ///   - _12: Workchains in the TON Blockchain
            ///   - _13: The cost of filing complaints about incorrect operation of validators.
            ///   - _14: The reward in nanoTons for block creation in the TON blockchain.
            ///   - _15: The reward in nanoTons for block creation in the TON blockchain.
            ///   - _16: The limits on the number of validators in the TON blockchain.
            ///   - _17: The stake parameters configuration in the TON blockchain.
            ///   - _18: The prices for data storage.
            ///   - _20: The cost of computations in the masterchain. The complexity of any computation is estimated in gas units.
            ///   - _21: The cost of computations in the basechains. The complexity of any computation is estimated in gas units.
            ///   - _22: The limits on the block in the masterchain, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///   - _23: The limits on the block in the basechains, upon reaching which the block is finalized and the callback of the remaining messages (if any) is carried over to the next block.
            ///   - _24: The cost of sending messages in the masterchain of the TON blockchain.
            ///   - _25: The cost of sending messages in the basechains of the TON blockchain.
            ///   - _28: The configuration for the Catchain protocol.
            ///   - _29: The configuration for the consensus protocol above catchain.
            ///   - _31: The configuration for the consensus protocol above catchain.
            ///   - _32:
            ///   - _33:
            ///   - _34:
            ///   - _35:
            ///   - _36:
            ///   - _37:
            ///   - _40: The configuration for punishment for improper behavior (non-validation). In the absence of the parameter, the default fine size is 101 TON
            ///   - _43: The size limits and some other characteristics of accounts and messages.
            ///   - _44: suspended accounts
            ///   - _71: Bridge parameters for wrapping TON in other networks.
            ///   - _72: Bridge parameters for wrapping TON in other networks.
            ///   - _73: Bridge parameters for wrapping TON in other networks.
            ///   - _79: Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///   - _81: Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            ///   - _82: Bridge parameters for wrapping tokens from other networks into tokens on the TON network.
            public init(
                raw: Swift.String,
                _0: Swift.String,
                _1: Swift.String,
                _2: Swift.String,
                _3: Swift.String? = nil,
                _4: Swift.String,
                _5: Components.Schemas.BlockchainConfig._5Payload? = nil,
                _6: Components.Schemas.BlockchainConfig._6Payload? = nil,
                _7: Components.Schemas.BlockchainConfig._7Payload? = nil,
                _8: Components.Schemas.BlockchainConfig._8Payload? = nil,
                _9: Components.Schemas.BlockchainConfig._9Payload? = nil,
                _10: Components.Schemas.BlockchainConfig._10Payload? = nil,
                _11: Components.Schemas.BlockchainConfig._11Payload? = nil,
                _12: Components.Schemas.BlockchainConfig._12Payload? = nil,
                _13: Components.Schemas.BlockchainConfig._13Payload? = nil,
                _14: Components.Schemas.BlockchainConfig._14Payload? = nil,
                _15: Components.Schemas.BlockchainConfig._15Payload? = nil,
                _16: Components.Schemas.BlockchainConfig._16Payload? = nil,
                _17: Components.Schemas.BlockchainConfig._17Payload? = nil,
                _18: Components.Schemas.BlockchainConfig._18Payload? = nil,
                _20: Components.Schemas.BlockchainConfig._20Payload? = nil,
                _21: Components.Schemas.BlockchainConfig._21Payload? = nil,
                _22: Components.Schemas.BlockchainConfig._22Payload? = nil,
                _23: Components.Schemas.BlockchainConfig._23Payload? = nil,
                _24: Components.Schemas.BlockchainConfig._24Payload? = nil,
                _25: Components.Schemas.BlockchainConfig._25Payload? = nil,
                _28: Components.Schemas.BlockchainConfig._28Payload? = nil,
                _29: Components.Schemas.BlockchainConfig._29Payload? = nil,
                _31: Components.Schemas.BlockchainConfig._31Payload? = nil,
                _32: Components.Schemas.ValidatorsSet? = nil,
                _33: Components.Schemas.ValidatorsSet? = nil,
                _34: Components.Schemas.ValidatorsSet? = nil,
                _35: Components.Schemas.ValidatorsSet? = nil,
                _36: Components.Schemas.ValidatorsSet? = nil,
                _37: Components.Schemas.ValidatorsSet? = nil,
                _40: Components.Schemas.BlockchainConfig._40Payload? = nil,
                _43: Components.Schemas.BlockchainConfig._43Payload? = nil,
                _44: Components.Schemas.BlockchainConfig._44Payload,
                _71: Components.Schemas.BlockchainConfig._71Payload? = nil,
                _72: Components.Schemas.BlockchainConfig._72Payload? = nil,
                _73: Components.Schemas.BlockchainConfig._73Payload? = nil,
                _79: Components.Schemas.BlockchainConfig._79Payload? = nil,
                _81: Components.Schemas.BlockchainConfig._81Payload? = nil,
                _82: Components.Schemas.BlockchainConfig._82Payload? = nil
            ) {
                self.raw = raw
                self._0 = _0
                self._1 = _1
                self._2 = _2
                self._3 = _3
                self._4 = _4
                self._5 = _5
                self._6 = _6
                self._7 = _7
                self._8 = _8
                self._9 = _9
                self._10 = _10
                self._11 = _11
                self._12 = _12
                self._13 = _13
                self._14 = _14
                self._15 = _15
                self._16 = _16
                self._17 = _17
                self._18 = _18
                self._20 = _20
                self._21 = _21
                self._22 = _22
                self._23 = _23
                self._24 = _24
                self._25 = _25
                self._28 = _28
                self._29 = _29
                self._31 = _31
                self._32 = _32
                self._33 = _33
                self._34 = _34
                self._35 = _35
                self._36 = _36
                self._37 = _37
                self._40 = _40
                self._43 = _43
                self._44 = _44
                self._71 = _71
                self._72 = _72
                self._73 = _73
                self._79 = _79
                self._81 = _81
                self._82 = _82
            }
            public enum CodingKeys: String, CodingKey {
                case raw
                case _0 = "0"
                case _1 = "1"
                case _2 = "2"
                case _3 = "3"
                case _4 = "4"
                case _5 = "5"
                case _6 = "6"
                case _7 = "7"
                case _8 = "8"
                case _9 = "9"
                case _10 = "10"
                case _11 = "11"
                case _12 = "12"
                case _13 = "13"
                case _14 = "14"
                case _15 = "15"
                case _16 = "16"
                case _17 = "17"
                case _18 = "18"
                case _20 = "20"
                case _21 = "21"
                case _22 = "22"
                case _23 = "23"
                case _24 = "24"
                case _25 = "25"
                case _28 = "28"
                case _29 = "29"
                case _31 = "31"
                case _32 = "32"
                case _33 = "33"
                case _34 = "34"
                case _35 = "35"
                case _36 = "36"
                case _37 = "37"
                case _40 = "40"
                case _43 = "43"
                case _44 = "44"
                case _71 = "71"
                case _72 = "72"
                case _73 = "73"
                case _79 = "79"
                case _81 = "81"
                case _82 = "82"
            }
        }
        /// - Remark: Generated from `#/components/schemas/DomainNames`.
        public struct DomainNames: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainNames/domains`.
            public var domains: [Swift.String]
            /// Creates a new `DomainNames`.
            ///
            /// - Parameters:
            ///   - domains:
            public init(domains: [Swift.String]) { self.domains = domains }
            public enum CodingKeys: String, CodingKey { case domains }
        }
        /// - Remark: Generated from `#/components/schemas/DomainBid`.
        public struct DomainBid: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainBid/success`.
            public var success: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/DomainBid/value`.
            public var value: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/DomainBid/txTime`.
            public var txTime: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/DomainBid/txHash`.
            public var txHash: Swift.String
            /// - Remark: Generated from `#/components/schemas/DomainBid/bidder`.
            public var bidder: Components.Schemas.AccountAddress
            /// Creates a new `DomainBid`.
            ///
            /// - Parameters:
            ///   - success:
            ///   - value:
            ///   - txTime:
            ///   - txHash:
            ///   - bidder:
            public init(
                success: Swift.Bool,
                value: Swift.Int64,
                txTime: Swift.Int64,
                txHash: Swift.String,
                bidder: Components.Schemas.AccountAddress
            ) {
                self.success = success
                self.value = value
                self.txTime = txTime
                self.txHash = txHash
                self.bidder = bidder
            }
            public enum CodingKeys: String, CodingKey {
                case success
                case value
                case txTime
                case txHash
                case bidder
            }
        }
        /// - Remark: Generated from `#/components/schemas/DomainBids`.
        public struct DomainBids: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainBids/data`.
            public var data: [Components.Schemas.DomainBid]
            /// Creates a new `DomainBids`.
            ///
            /// - Parameters:
            ///   - data:
            public init(data: [Components.Schemas.DomainBid]) { self.data = data }
            public enum CodingKeys: String, CodingKey { case data }
        }
        /// - Remark: Generated from `#/components/schemas/JettonVerificationType`.
        @frozen public enum JettonVerificationType: String, Codable, Hashable, Sendable {
            case whitelist = "whitelist"
            case blacklist = "blacklist"
            case none = "none"
        }
        /// - Remark: Generated from `#/components/schemas/JettonPreview`.
        public struct JettonPreview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonPreview/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonPreview/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonPreview/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonPreview/decimals`.
            public var decimals: Swift.Int
            /// - Remark: Generated from `#/components/schemas/JettonPreview/image`.
            public var image: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonPreview/verification`.
            public var verification: Components.Schemas.JettonVerificationType
            /// Creates a new `JettonPreview`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name:
            ///   - symbol:
            ///   - decimals:
            ///   - image:
            ///   - verification:
            public init(
                address: Swift.String,
                name: Swift.String,
                symbol: Swift.String,
                decimals: Swift.Int,
                image: Swift.String,
                verification: Components.Schemas.JettonVerificationType
            ) {
                self.address = address
                self.name = name
                self.symbol = symbol
                self.decimals = decimals
                self.image = image
                self.verification = verification
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case symbol
                case decimals
                case image
                case verification
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonBalance`.
        public struct JettonBalance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonBalance/balance`.
            public var balance: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonBalance/price`.
            public var price: Components.Schemas.TokenRates?
            /// - Remark: Generated from `#/components/schemas/JettonBalance/wallet_address`.
            public var wallet_address: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonBalance/jetton`.
            public var jetton: Components.Schemas.JettonPreview
            /// Creates a new `JettonBalance`.
            ///
            /// - Parameters:
            ///   - balance:
            ///   - price:
            ///   - wallet_address:
            ///   - jetton:
            public init(
                balance: Swift.String,
                price: Components.Schemas.TokenRates? = nil,
                wallet_address: Components.Schemas.AccountAddress,
                jetton: Components.Schemas.JettonPreview
            ) {
                self.balance = balance
                self.price = price
                self.wallet_address = wallet_address
                self.jetton = jetton
            }
            public enum CodingKeys: String, CodingKey {
                case balance
                case price
                case wallet_address
                case jetton
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonsBalances`.
        public struct JettonsBalances: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonsBalances/balances`.
            public var balances: [Components.Schemas.JettonBalance]
            /// Creates a new `JettonsBalances`.
            ///
            /// - Parameters:
            ///   - balances:
            public init(balances: [Components.Schemas.JettonBalance]) { self.balances = balances }
            public enum CodingKeys: String, CodingKey { case balances }
        }
        /// - Remark: Generated from `#/components/schemas/Price`.
        public struct Price: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Price/value`.
            public var value: Swift.String
            /// - Remark: Generated from `#/components/schemas/Price/token_name`.
            public var token_name: Swift.String
            /// Creates a new `Price`.
            ///
            /// - Parameters:
            ///   - value:
            ///   - token_name:
            public init(value: Swift.String, token_name: Swift.String) {
                self.value = value
                self.token_name = token_name
            }
            public enum CodingKeys: String, CodingKey {
                case value
                case token_name
            }
        }
        /// - Remark: Generated from `#/components/schemas/ImagePreview`.
        public struct ImagePreview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ImagePreview/resolution`.
            public var resolution: Swift.String
            /// - Remark: Generated from `#/components/schemas/ImagePreview/url`.
            public var url: Swift.String
            /// Creates a new `ImagePreview`.
            ///
            /// - Parameters:
            ///   - resolution:
            ///   - url:
            public init(resolution: Swift.String, url: Swift.String) {
                self.resolution = resolution
                self.url = url
            }
            public enum CodingKeys: String, CodingKey {
                case resolution
                case url
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftApprovedBy`.
        @frozen public enum NftApprovedByPayload: String, Codable, Hashable, Sendable {
            case getgems = "getgems"
            case tonkeeper = "tonkeeper"
            case ton_period_diamonds = "ton.diamonds"
        }
        /// - Remark: Generated from `#/components/schemas/NftApprovedBy`.
        public typealias NftApprovedBy = [Components.Schemas.NftApprovedByPayload]
        /// - Remark: Generated from `#/components/schemas/Sale`.
        public struct Sale: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Sale/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Sale/market`.
            public var market: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/Sale/owner`.
            public var owner: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/Sale/price`.
            public var price: Components.Schemas.Price
            /// Creates a new `Sale`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - market:
            ///   - owner:
            ///   - price:
            public init(
                address: Swift.String,
                market: Components.Schemas.AccountAddress,
                owner: Components.Schemas.AccountAddress? = nil,
                price: Components.Schemas.Price
            ) {
                self.address = address
                self.market = market
                self.owner = owner
                self.price = price
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case market
                case owner
                case price
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftItem`.
        public struct NftItem: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftItem/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/NftItem/index`.
            public var index: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/NftItem/owner`.
            public var owner: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/NftItem/collection`.
            public struct collectionPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/NftItem/collection/address`.
                public var address: Swift.String
                /// - Remark: Generated from `#/components/schemas/NftItem/collection/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/NftItem/collection/description`.
                public var description: Swift.String
                /// Creates a new `collectionPayload`.
                ///
                /// - Parameters:
                ///   - address:
                ///   - name:
                ///   - description:
                public init(address: Swift.String, name: Swift.String, description: Swift.String) {
                    self.address = address
                    self.name = name
                    self.description = description
                }
                public enum CodingKeys: String, CodingKey {
                    case address
                    case name
                    case description
                }
            }
            /// - Remark: Generated from `#/components/schemas/NftItem/collection`.
            public var collection: Components.Schemas.NftItem.collectionPayload?
            /// - Remark: Generated from `#/components/schemas/NftItem/verified`.
            public var verified: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/NftItem/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NftItem/metadata`.
            public var metadata: Components.Schemas.NftItem.metadataPayload
            /// - Remark: Generated from `#/components/schemas/NftItem/sale`.
            public var sale: Components.Schemas.Sale?
            /// - Remark: Generated from `#/components/schemas/NftItem/previews`.
            public var previews: [Components.Schemas.ImagePreview]?
            /// - Remark: Generated from `#/components/schemas/NftItem/dns`.
            public var dns: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NftItem/approved_by`.
            public var approved_by: Components.Schemas.NftApprovedBy
            /// Creates a new `NftItem`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - index:
            ///   - owner:
            ///   - collection:
            ///   - verified:
            ///   - metadata:
            ///   - sale:
            ///   - previews:
            ///   - dns:
            ///   - approved_by:
            public init(
                address: Swift.String,
                index: Swift.Int64,
                owner: Components.Schemas.AccountAddress? = nil,
                collection: Components.Schemas.NftItem.collectionPayload? = nil,
                verified: Swift.Bool,
                metadata: Components.Schemas.NftItem.metadataPayload,
                sale: Components.Schemas.Sale? = nil,
                previews: [Components.Schemas.ImagePreview]? = nil,
                dns: Swift.String? = nil,
                approved_by: Components.Schemas.NftApprovedBy
            ) {
                self.address = address
                self.index = index
                self.owner = owner
                self.collection = collection
                self.verified = verified
                self.metadata = metadata
                self.sale = sale
                self.previews = previews
                self.dns = dns
                self.approved_by = approved_by
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case index
                case owner
                case collection
                case verified
                case metadata
                case sale
                case previews
                case dns
                case approved_by
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftItems`.
        public struct NftItems: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftItems/nft_items`.
            public var nft_items: [Components.Schemas.NftItem]
            /// Creates a new `NftItems`.
            ///
            /// - Parameters:
            ///   - nft_items:
            public init(nft_items: [Components.Schemas.NftItem]) { self.nft_items = nft_items }
            public enum CodingKeys: String, CodingKey { case nft_items }
        }
        /// - Remark: Generated from `#/components/schemas/Refund`.
        public struct Refund: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Refund/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case DNS_period_ton = "DNS.ton"
                case DNS_period_tg = "DNS.tg"
                case GetGems = "GetGems"
            }
            /// - Remark: Generated from `#/components/schemas/Refund/type`.
            public var _type: Components.Schemas.Refund._typePayload
            /// - Remark: Generated from `#/components/schemas/Refund/origin`.
            public var origin: Swift.String
            /// Creates a new `Refund`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - origin:
            public init(_type: Components.Schemas.Refund._typePayload, origin: Swift.String) {
                self._type = _type
                self.origin = origin
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case origin
            }
        }
        /// - Remark: Generated from `#/components/schemas/ValueFlow`.
        public struct ValueFlow: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ValueFlow/account`.
            public var account: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/ValueFlow/ton`.
            public var ton: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ValueFlow/fees`.
            public var fees: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ValueFlow/jettonsPayload`.
            public struct jettonsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/ValueFlow/jettonsPayload/account`.
                public var account: Components.Schemas.AccountAddress
                /// - Remark: Generated from `#/components/schemas/ValueFlow/jettonsPayload/jetton`.
                public var jetton: Components.Schemas.JettonPreview
                /// - Remark: Generated from `#/components/schemas/ValueFlow/jettonsPayload/quantity`.
                public var quantity: Swift.Int64
                /// Creates a new `jettonsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - account:
                ///   - jetton:
                ///   - quantity:
                public init(
                    account: Components.Schemas.AccountAddress,
                    jetton: Components.Schemas.JettonPreview,
                    quantity: Swift.Int64
                ) {
                    self.account = account
                    self.jetton = jetton
                    self.quantity = quantity
                }
                public enum CodingKeys: String, CodingKey {
                    case account
                    case jetton
                    case quantity
                }
            }
            /// - Remark: Generated from `#/components/schemas/ValueFlow/jettons`.
            public typealias jettonsPayload = [Components.Schemas.ValueFlow.jettonsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/ValueFlow/jettons`.
            public var jettons: Components.Schemas.ValueFlow.jettonsPayload?
            /// Creates a new `ValueFlow`.
            ///
            /// - Parameters:
            ///   - account:
            ///   - ton:
            ///   - fees:
            ///   - jettons:
            public init(
                account: Components.Schemas.AccountAddress,
                ton: Swift.Int64,
                fees: Swift.Int64,
                jettons: Components.Schemas.ValueFlow.jettonsPayload? = nil
            ) {
                self.account = account
                self.ton = ton
                self.fees = fees
                self.jettons = jettons
            }
            public enum CodingKeys: String, CodingKey {
                case account
                case ton
                case fees
                case jettons
            }
        }
        /// - Remark: Generated from `#/components/schemas/Action`.
        public struct Action: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Action/type`.
            @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                case TonTransfer = "TonTransfer"
                case JettonTransfer = "JettonTransfer"
                case JettonBurn = "JettonBurn"
                case JettonMint = "JettonMint"
                case NftItemTransfer = "NftItemTransfer"
                case ContractDeploy = "ContractDeploy"
                case Subscribe = "Subscribe"
                case UnSubscribe = "UnSubscribe"
                case AuctionBid = "AuctionBid"
                case NftPurchase = "NftPurchase"
                case DepositStake = "DepositStake"
                case WithdrawStake = "WithdrawStake"
                case WithdrawStakeRequest = "WithdrawStakeRequest"
                case JettonSwap = "JettonSwap"
                case SmartContractExec = "SmartContractExec"
                case ElectionsRecoverStake = "ElectionsRecoverStake"
                case ElectionsDepositStake = "ElectionsDepositStake"
                case DomainRenew = "DomainRenew"
                case Unknown = "Unknown"
            }
            /// - Remark: Generated from `#/components/schemas/Action/status`.
            @frozen public enum statusPayload: String, Codable, Hashable, Sendable {
                case ok = "ok"
                case failed = "failed"
            }
            /// - Remark: Generated from `#/components/schemas/Action/status`.
            public var status: Components.Schemas.Action.statusPayload
            /// - Remark: Generated from `#/components/schemas/Action/TonTransfer`.
            public var TonTransfer: Components.Schemas.TonTransferAction?
            /// - Remark: Generated from `#/components/schemas/Action/ContractDeploy`.
            public var ContractDeploy: Components.Schemas.ContractDeployAction?
            /// - Remark: Generated from `#/components/schemas/Action/JettonTransfer`.
            public var JettonTransfer: Components.Schemas.JettonTransferAction?
            /// - Remark: Generated from `#/components/schemas/Action/JettonBurn`.
            public var JettonBurn: Components.Schemas.JettonBurnAction?
            /// - Remark: Generated from `#/components/schemas/Action/JettonMint`.
            public var JettonMint: Components.Schemas.JettonMintAction?
            /// - Remark: Generated from `#/components/schemas/Action/NftItemTransfer`.
            public var NftItemTransfer: Components.Schemas.NftItemTransferAction?
            /// - Remark: Generated from `#/components/schemas/Action/Subscribe`.
            public var Subscribe: Components.Schemas.SubscriptionAction?
            /// - Remark: Generated from `#/components/schemas/Action/UnSubscribe`.
            public var UnSubscribe: Components.Schemas.UnSubscriptionAction?
            /// - Remark: Generated from `#/components/schemas/Action/AuctionBid`.
            public var AuctionBid: Components.Schemas.AuctionBidAction?
            /// - Remark: Generated from `#/components/schemas/Action/NftPurchase`.
            public var NftPurchase: Components.Schemas.NftPurchaseAction?
            /// - Remark: Generated from `#/components/schemas/Action/DepositStake`.
            public var DepositStake: Components.Schemas.DepositStakeAction?
            /// - Remark: Generated from `#/components/schemas/Action/WithdrawStake`.
            public var WithdrawStake: Components.Schemas.WithdrawStakeAction?
            /// - Remark: Generated from `#/components/schemas/Action/WithdrawStakeRequest`.
            public var WithdrawStakeRequest: Components.Schemas.WithdrawStakeRequestAction?
            /// - Remark: Generated from `#/components/schemas/Action/ElectionsDepositStake`.
            public var ElectionsDepositStake: Components.Schemas.ElectionsDepositStakeAction?
            /// - Remark: Generated from `#/components/schemas/Action/ElectionsRecoverStake`.
            public var ElectionsRecoverStake: Components.Schemas.ElectionsRecoverStakeAction?
            /// - Remark: Generated from `#/components/schemas/Action/JettonSwap`.
            public var JettonSwap: Components.Schemas.JettonSwapAction?
            /// - Remark: Generated from `#/components/schemas/Action/SmartContractExec`.
            public var SmartContractExec: Components.Schemas.SmartContractAction?
            /// - Remark: Generated from `#/components/schemas/Action/DomainRenew`.
            public var DomainRenew: Components.Schemas.DomainRenewAction?
            /// - Remark: Generated from `#/components/schemas/Action/simple_preview`.
            public var simple_preview: Components.Schemas.ActionSimplePreview
            /// Creates a new `Action`.
            ///
            /// - Parameters:
            ///   - status:
            ///   - TonTransfer:
            ///   - ContractDeploy:
            ///   - JettonTransfer:
            ///   - JettonBurn:
            ///   - JettonMint:
            ///   - NftItemTransfer:
            ///   - Subscribe:
            ///   - UnSubscribe:
            ///   - AuctionBid:
            ///   - NftPurchase:
            ///   - DepositStake:
            ///   - WithdrawStake:
            ///   - WithdrawStakeRequest:
            ///   - ElectionsDepositStake:
            ///   - ElectionsRecoverStake:
            ///   - JettonSwap:
            ///   - SmartContractExec:
            ///   - DomainRenew:
            ///   - simple_preview:
            public init(
                status: Components.Schemas.Action.statusPayload,
                TonTransfer: Components.Schemas.TonTransferAction? = nil,
                ContractDeploy: Components.Schemas.ContractDeployAction? = nil,
                JettonTransfer: Components.Schemas.JettonTransferAction? = nil,
                JettonBurn: Components.Schemas.JettonBurnAction? = nil,
                JettonMint: Components.Schemas.JettonMintAction? = nil,
                NftItemTransfer: Components.Schemas.NftItemTransferAction? = nil,
                Subscribe: Components.Schemas.SubscriptionAction? = nil,
                UnSubscribe: Components.Schemas.UnSubscriptionAction? = nil,
                AuctionBid: Components.Schemas.AuctionBidAction? = nil,
                NftPurchase: Components.Schemas.NftPurchaseAction? = nil,
                DepositStake: Components.Schemas.DepositStakeAction? = nil,
                WithdrawStake: Components.Schemas.WithdrawStakeAction? = nil,
                WithdrawStakeRequest: Components.Schemas.WithdrawStakeRequestAction? = nil,
                ElectionsDepositStake: Components.Schemas.ElectionsDepositStakeAction? = nil,
                ElectionsRecoverStake: Components.Schemas.ElectionsRecoverStakeAction? = nil,
                JettonSwap: Components.Schemas.JettonSwapAction? = nil,
                SmartContractExec: Components.Schemas.SmartContractAction? = nil,
                DomainRenew: Components.Schemas.DomainRenewAction? = nil,
                simple_preview: Components.Schemas.ActionSimplePreview
            ) {
                self.status = status
                self.TonTransfer = TonTransfer
                self.ContractDeploy = ContractDeploy
                self.JettonTransfer = JettonTransfer
                self.JettonBurn = JettonBurn
                self.JettonMint = JettonMint
                self.NftItemTransfer = NftItemTransfer
                self.Subscribe = Subscribe
                self.UnSubscribe = UnSubscribe
                self.AuctionBid = AuctionBid
                self.NftPurchase = NftPurchase
                self.DepositStake = DepositStake
                self.WithdrawStake = WithdrawStake
                self.WithdrawStakeRequest = WithdrawStakeRequest
                self.ElectionsDepositStake = ElectionsDepositStake
                self.ElectionsRecoverStake = ElectionsRecoverStake
                self.JettonSwap = JettonSwap
                self.SmartContractExec = SmartContractExec
                self.DomainRenew = DomainRenew
                self.simple_preview = simple_preview
            }
            public enum CodingKeys: String, CodingKey {
                case status
                case TonTransfer
                case ContractDeploy
                case JettonTransfer
                case JettonBurn
                case JettonMint
                case NftItemTransfer
                case Subscribe
                case UnSubscribe
                case AuctionBid
                case NftPurchase
                case DepositStake
                case WithdrawStake
                case WithdrawStakeRequest
                case ElectionsDepositStake
                case ElectionsRecoverStake
                case JettonSwap
                case SmartContractExec
                case DomainRenew
                case simple_preview
            }
        }
        /// - Remark: Generated from `#/components/schemas/TonTransferAction`.
        public struct TonTransferAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/sender`.
            public var sender: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/recipient`.
            public var recipient: Components.Schemas.AccountAddress
            /// amount in nanotons
            ///
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/encrypted_comment`.
            public var encrypted_comment: Components.Schemas.EncryptedComment?
            /// - Remark: Generated from `#/components/schemas/TonTransferAction/refund`.
            public var refund: Components.Schemas.Refund?
            /// Creates a new `TonTransferAction`.
            ///
            /// - Parameters:
            ///   - sender:
            ///   - recipient:
            ///   - amount: amount in nanotons
            ///   - comment:
            ///   - encrypted_comment:
            ///   - refund:
            public init(
                sender: Components.Schemas.AccountAddress,
                recipient: Components.Schemas.AccountAddress,
                amount: Swift.Int64,
                comment: Swift.String? = nil,
                encrypted_comment: Components.Schemas.EncryptedComment? = nil,
                refund: Components.Schemas.Refund? = nil
            ) {
                self.sender = sender
                self.recipient = recipient
                self.amount = amount
                self.comment = comment
                self.encrypted_comment = encrypted_comment
                self.refund = refund
            }
            public enum CodingKeys: String, CodingKey {
                case sender
                case recipient
                case amount
                case comment
                case encrypted_comment
                case refund
            }
        }
        /// - Remark: Generated from `#/components/schemas/SmartContractAction`.
        public struct SmartContractAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/executor`.
            public var executor: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/contract`.
            public var contract: Components.Schemas.AccountAddress
            /// amount in nanotons
            ///
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/ton_attached`.
            public var ton_attached: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/operation`.
            public var operation: Swift.String
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/payload`.
            public var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/SmartContractAction/refund`.
            public var refund: Components.Schemas.Refund?
            /// Creates a new `SmartContractAction`.
            ///
            /// - Parameters:
            ///   - executor:
            ///   - contract:
            ///   - ton_attached: amount in nanotons
            ///   - operation:
            ///   - payload:
            ///   - refund:
            public init(
                executor: Components.Schemas.AccountAddress,
                contract: Components.Schemas.AccountAddress,
                ton_attached: Swift.Int64,
                operation: Swift.String,
                payload: Swift.String? = nil,
                refund: Components.Schemas.Refund? = nil
            ) {
                self.executor = executor
                self.contract = contract
                self.ton_attached = ton_attached
                self.operation = operation
                self.payload = payload
                self.refund = refund
            }
            public enum CodingKeys: String, CodingKey {
                case executor
                case contract
                case ton_attached
                case operation
                case payload
                case refund
            }
        }
        /// - Remark: Generated from `#/components/schemas/DomainRenewAction`.
        public struct DomainRenewAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainRenewAction/domain`.
            public var domain: Swift.String
            /// - Remark: Generated from `#/components/schemas/DomainRenewAction/contract_address`.
            public var contract_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/DomainRenewAction/renewer`.
            public var renewer: Components.Schemas.AccountAddress
            /// Creates a new `DomainRenewAction`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - contract_address:
            ///   - renewer:
            public init(
                domain: Swift.String,
                contract_address: Swift.String,
                renewer: Components.Schemas.AccountAddress
            ) {
                self.domain = domain
                self.contract_address = contract_address
                self.renewer = renewer
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case contract_address
                case renewer
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftItemTransferAction`.
        public struct NftItemTransferAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/sender`.
            public var sender: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/recipient`.
            public var recipient: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/nft`.
            public var nft: Swift.String
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/encrypted_comment`.
            public var encrypted_comment: Components.Schemas.EncryptedComment?
            /// raw hex encoded payload
            ///
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/payload`.
            public var payload: Swift.String?
            /// - Remark: Generated from `#/components/schemas/NftItemTransferAction/refund`.
            public var refund: Components.Schemas.Refund?
            /// Creates a new `NftItemTransferAction`.
            ///
            /// - Parameters:
            ///   - sender:
            ///   - recipient:
            ///   - nft:
            ///   - comment:
            ///   - encrypted_comment:
            ///   - payload: raw hex encoded payload
            ///   - refund:
            public init(
                sender: Components.Schemas.AccountAddress? = nil,
                recipient: Components.Schemas.AccountAddress? = nil,
                nft: Swift.String,
                comment: Swift.String? = nil,
                encrypted_comment: Components.Schemas.EncryptedComment? = nil,
                payload: Swift.String? = nil,
                refund: Components.Schemas.Refund? = nil
            ) {
                self.sender = sender
                self.recipient = recipient
                self.nft = nft
                self.comment = comment
                self.encrypted_comment = encrypted_comment
                self.payload = payload
                self.refund = refund
            }
            public enum CodingKeys: String, CodingKey {
                case sender
                case recipient
                case nft
                case comment
                case encrypted_comment
                case payload
                case refund
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonTransferAction`.
        public struct JettonTransferAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/sender`.
            public var sender: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/recipient`.
            public var recipient: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/senders_wallet`.
            public var senders_wallet: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/recipients_wallet`.
            public var recipients_wallet: Swift.String
            /// amount in quanta of tokens
            ///
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/comment`.
            public var comment: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/encrypted_comment`.
            public var encrypted_comment: Components.Schemas.EncryptedComment?
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/refund`.
            public var refund: Components.Schemas.Refund?
            /// - Remark: Generated from `#/components/schemas/JettonTransferAction/jetton`.
            public var jetton: Components.Schemas.JettonPreview
            /// Creates a new `JettonTransferAction`.
            ///
            /// - Parameters:
            ///   - sender:
            ///   - recipient:
            ///   - senders_wallet:
            ///   - recipients_wallet:
            ///   - amount: amount in quanta of tokens
            ///   - comment:
            ///   - encrypted_comment:
            ///   - refund:
            ///   - jetton:
            public init(
                sender: Components.Schemas.AccountAddress? = nil,
                recipient: Components.Schemas.AccountAddress? = nil,
                senders_wallet: Swift.String,
                recipients_wallet: Swift.String,
                amount: Swift.String,
                comment: Swift.String? = nil,
                encrypted_comment: Components.Schemas.EncryptedComment? = nil,
                refund: Components.Schemas.Refund? = nil,
                jetton: Components.Schemas.JettonPreview
            ) {
                self.sender = sender
                self.recipient = recipient
                self.senders_wallet = senders_wallet
                self.recipients_wallet = recipients_wallet
                self.amount = amount
                self.comment = comment
                self.encrypted_comment = encrypted_comment
                self.refund = refund
                self.jetton = jetton
            }
            public enum CodingKeys: String, CodingKey {
                case sender
                case recipient
                case senders_wallet
                case recipients_wallet
                case amount
                case comment
                case encrypted_comment
                case refund
                case jetton
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonBurnAction`.
        public struct JettonBurnAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonBurnAction/sender`.
            public var sender: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonBurnAction/senders_wallet`.
            public var senders_wallet: Swift.String
            /// amount in quanta of tokens
            ///
            /// - Remark: Generated from `#/components/schemas/JettonBurnAction/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonBurnAction/jetton`.
            public var jetton: Components.Schemas.JettonPreview
            /// Creates a new `JettonBurnAction`.
            ///
            /// - Parameters:
            ///   - sender:
            ///   - senders_wallet:
            ///   - amount: amount in quanta of tokens
            ///   - jetton:
            public init(
                sender: Components.Schemas.AccountAddress,
                senders_wallet: Swift.String,
                amount: Swift.String,
                jetton: Components.Schemas.JettonPreview
            ) {
                self.sender = sender
                self.senders_wallet = senders_wallet
                self.amount = amount
                self.jetton = jetton
            }
            public enum CodingKeys: String, CodingKey {
                case sender
                case senders_wallet
                case amount
                case jetton
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonMintAction`.
        public struct JettonMintAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonMintAction/recipient`.
            public var recipient: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonMintAction/recipients_wallet`.
            public var recipients_wallet: Swift.String
            /// amount in quanta of tokens
            ///
            /// - Remark: Generated from `#/components/schemas/JettonMintAction/amount`.
            public var amount: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonMintAction/jetton`.
            public var jetton: Components.Schemas.JettonPreview
            /// Creates a new `JettonMintAction`.
            ///
            /// - Parameters:
            ///   - recipient:
            ///   - recipients_wallet:
            ///   - amount: amount in quanta of tokens
            ///   - jetton:
            public init(
                recipient: Components.Schemas.AccountAddress,
                recipients_wallet: Swift.String,
                amount: Swift.String,
                jetton: Components.Schemas.JettonPreview
            ) {
                self.recipient = recipient
                self.recipients_wallet = recipients_wallet
                self.amount = amount
                self.jetton = jetton
            }
            public enum CodingKeys: String, CodingKey {
                case recipient
                case recipients_wallet
                case amount
                case jetton
            }
        }
        /// - Remark: Generated from `#/components/schemas/ContractDeployAction`.
        public struct ContractDeployAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ContractDeployAction/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/ContractDeployAction/interfaces`.
            public var interfaces: [Swift.String]
            /// Creates a new `ContractDeployAction`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - interfaces:
            public init(address: Swift.String, interfaces: [Swift.String]) {
                self.address = address
                self.interfaces = interfaces
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case interfaces
            }
        }
        /// - Remark: Generated from `#/components/schemas/SubscriptionAction`.
        public struct SubscriptionAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/SubscriptionAction/subscriber`.
            public var subscriber: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/SubscriptionAction/subscription`.
            public var subscription: Swift.String
            /// - Remark: Generated from `#/components/schemas/SubscriptionAction/beneficiary`.
            public var beneficiary: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/SubscriptionAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/SubscriptionAction/initial`.
            public var initial: Swift.Bool
            /// Creates a new `SubscriptionAction`.
            ///
            /// - Parameters:
            ///   - subscriber:
            ///   - subscription:
            ///   - beneficiary:
            ///   - amount:
            ///   - initial:
            public init(
                subscriber: Components.Schemas.AccountAddress,
                subscription: Swift.String,
                beneficiary: Components.Schemas.AccountAddress,
                amount: Swift.Int64,
                initial: Swift.Bool
            ) {
                self.subscriber = subscriber
                self.subscription = subscription
                self.beneficiary = beneficiary
                self.amount = amount
                self.initial = initial
            }
            public enum CodingKeys: String, CodingKey {
                case subscriber
                case subscription
                case beneficiary
                case amount
                case initial
            }
        }
        /// - Remark: Generated from `#/components/schemas/UnSubscriptionAction`.
        public struct UnSubscriptionAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/UnSubscriptionAction/subscriber`.
            public var subscriber: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/UnSubscriptionAction/subscription`.
            public var subscription: Swift.String
            /// - Remark: Generated from `#/components/schemas/UnSubscriptionAction/beneficiary`.
            public var beneficiary: Components.Schemas.AccountAddress
            /// Creates a new `UnSubscriptionAction`.
            ///
            /// - Parameters:
            ///   - subscriber:
            ///   - subscription:
            ///   - beneficiary:
            public init(
                subscriber: Components.Schemas.AccountAddress,
                subscription: Swift.String,
                beneficiary: Components.Schemas.AccountAddress
            ) {
                self.subscriber = subscriber
                self.subscription = subscription
                self.beneficiary = beneficiary
            }
            public enum CodingKeys: String, CodingKey {
                case subscriber
                case subscription
                case beneficiary
            }
        }
        /// - Remark: Generated from `#/components/schemas/AuctionBidAction`.
        public struct AuctionBidAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AuctionBidAction/auction_type`.
            public var auction_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/AuctionBidAction/amount`.
            public var amount: Components.Schemas.Price
            /// - Remark: Generated from `#/components/schemas/AuctionBidAction/nft`.
            public var nft: Components.Schemas.NftItem?
            /// - Remark: Generated from `#/components/schemas/AuctionBidAction/bidder`.
            public var bidder: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/AuctionBidAction/auction`.
            public var auction: Components.Schemas.AccountAddress
            /// Creates a new `AuctionBidAction`.
            ///
            /// - Parameters:
            ///   - auction_type:
            ///   - amount:
            ///   - nft:
            ///   - bidder:
            ///   - auction:
            public init(
                auction_type: Swift.String,
                amount: Components.Schemas.Price,
                nft: Components.Schemas.NftItem? = nil,
                bidder: Components.Schemas.AccountAddress,
                auction: Components.Schemas.AccountAddress
            ) {
                self.auction_type = auction_type
                self.amount = amount
                self.nft = nft
                self.bidder = bidder
                self.auction = auction
            }
            public enum CodingKeys: String, CodingKey {
                case auction_type
                case amount
                case nft
                case bidder
                case auction
            }
        }
        /// validator's participation in elections
        ///
        /// - Remark: Generated from `#/components/schemas/DepositStakeAction`.
        public struct DepositStakeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DepositStakeAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/DepositStakeAction/staker`.
            public var staker: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/DepositStakeAction/pool`.
            public var pool: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/DepositStakeAction/implementation`.
            public var implementation: Components.Schemas.PoolImplementationType
            /// Creates a new `DepositStakeAction`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - staker:
            ///   - pool:
            ///   - implementation:
            public init(
                amount: Swift.Int64,
                staker: Components.Schemas.AccountAddress,
                pool: Components.Schemas.AccountAddress,
                implementation: Components.Schemas.PoolImplementationType
            ) {
                self.amount = amount
                self.staker = staker
                self.pool = pool
                self.implementation = implementation
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case staker
                case pool
                case implementation
            }
        }
        /// validator's participation in elections
        ///
        /// - Remark: Generated from `#/components/schemas/WithdrawStakeAction`.
        public struct WithdrawStakeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeAction/staker`.
            public var staker: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeAction/pool`.
            public var pool: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeAction/implementation`.
            public var implementation: Components.Schemas.PoolImplementationType
            /// Creates a new `WithdrawStakeAction`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - staker:
            ///   - pool:
            ///   - implementation:
            public init(
                amount: Swift.Int64,
                staker: Components.Schemas.AccountAddress,
                pool: Components.Schemas.AccountAddress,
                implementation: Components.Schemas.PoolImplementationType
            ) {
                self.amount = amount
                self.staker = staker
                self.pool = pool
                self.implementation = implementation
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case staker
                case pool
                case implementation
            }
        }
        /// validator's participation in elections
        ///
        /// - Remark: Generated from `#/components/schemas/WithdrawStakeRequestAction`.
        public struct WithdrawStakeRequestAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeRequestAction/amount`.
            public var amount: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeRequestAction/staker`.
            public var staker: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeRequestAction/pool`.
            public var pool: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/WithdrawStakeRequestAction/implementation`.
            public var implementation: Components.Schemas.PoolImplementationType
            /// Creates a new `WithdrawStakeRequestAction`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - staker:
            ///   - pool:
            ///   - implementation:
            public init(
                amount: Swift.Int64? = nil,
                staker: Components.Schemas.AccountAddress,
                pool: Components.Schemas.AccountAddress,
                implementation: Components.Schemas.PoolImplementationType
            ) {
                self.amount = amount
                self.staker = staker
                self.pool = pool
                self.implementation = implementation
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case staker
                case pool
                case implementation
            }
        }
        /// - Remark: Generated from `#/components/schemas/ElectionsRecoverStakeAction`.
        public struct ElectionsRecoverStakeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ElectionsRecoverStakeAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ElectionsRecoverStakeAction/staker`.
            public var staker: Components.Schemas.AccountAddress
            /// Creates a new `ElectionsRecoverStakeAction`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - staker:
            public init(amount: Swift.Int64, staker: Components.Schemas.AccountAddress) {
                self.amount = amount
                self.staker = staker
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case staker
            }
        }
        /// - Remark: Generated from `#/components/schemas/ElectionsDepositStakeAction`.
        public struct ElectionsDepositStakeAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ElectionsDepositStakeAction/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/ElectionsDepositStakeAction/staker`.
            public var staker: Components.Schemas.AccountAddress
            /// Creates a new `ElectionsDepositStakeAction`.
            ///
            /// - Parameters:
            ///   - amount:
            ///   - staker:
            public init(amount: Swift.Int64, staker: Components.Schemas.AccountAddress) {
                self.amount = amount
                self.staker = staker
            }
            public enum CodingKeys: String, CodingKey {
                case amount
                case staker
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonSwapAction`.
        public struct JettonSwapAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/dex`.
            public var dex: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/amount_in`.
            public var amount_in: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/amount_out`.
            public var amount_out: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/ton_in`.
            public var ton_in: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/ton_out`.
            public var ton_out: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/user_wallet`.
            public var user_wallet: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/router`.
            public var router: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/jetton_master_in`.
            public var jetton_master_in: Components.Schemas.JettonPreview?
            /// - Remark: Generated from `#/components/schemas/JettonSwapAction/jetton_master_out`.
            public var jetton_master_out: Components.Schemas.JettonPreview?
            /// Creates a new `JettonSwapAction`.
            ///
            /// - Parameters:
            ///   - dex:
            ///   - amount_in:
            ///   - amount_out:
            ///   - ton_in:
            ///   - ton_out:
            ///   - user_wallet:
            ///   - router:
            ///   - jetton_master_in:
            ///   - jetton_master_out:
            public init(
                dex: Swift.String,
                amount_in: Swift.String,
                amount_out: Swift.String,
                ton_in: Swift.Int64? = nil,
                ton_out: Swift.Int64? = nil,
                user_wallet: Components.Schemas.AccountAddress,
                router: Components.Schemas.AccountAddress,
                jetton_master_in: Components.Schemas.JettonPreview? = nil,
                jetton_master_out: Components.Schemas.JettonPreview? = nil
            ) {
                self.dex = dex
                self.amount_in = amount_in
                self.amount_out = amount_out
                self.ton_in = ton_in
                self.ton_out = ton_out
                self.user_wallet = user_wallet
                self.router = router
                self.jetton_master_in = jetton_master_in
                self.jetton_master_out = jetton_master_out
            }
            public enum CodingKeys: String, CodingKey {
                case dex
                case amount_in
                case amount_out
                case ton_in
                case ton_out
                case user_wallet
                case router
                case jetton_master_in
                case jetton_master_out
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftPurchaseAction`.
        public struct NftPurchaseAction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftPurchaseAction/auction_type`.
            public var auction_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/NftPurchaseAction/amount`.
            public var amount: Components.Schemas.Price
            /// - Remark: Generated from `#/components/schemas/NftPurchaseAction/nft`.
            public var nft: Components.Schemas.NftItem
            /// - Remark: Generated from `#/components/schemas/NftPurchaseAction/seller`.
            public var seller: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/NftPurchaseAction/buyer`.
            public var buyer: Components.Schemas.AccountAddress
            /// Creates a new `NftPurchaseAction`.
            ///
            /// - Parameters:
            ///   - auction_type:
            ///   - amount:
            ///   - nft:
            ///   - seller:
            ///   - buyer:
            public init(
                auction_type: Swift.String,
                amount: Components.Schemas.Price,
                nft: Components.Schemas.NftItem,
                seller: Components.Schemas.AccountAddress,
                buyer: Components.Schemas.AccountAddress
            ) {
                self.auction_type = auction_type
                self.amount = amount
                self.nft = nft
                self.seller = seller
                self.buyer = buyer
            }
            public enum CodingKeys: String, CodingKey {
                case auction_type
                case amount
                case nft
                case seller
                case buyer
            }
        }
        /// shortly describes what this action is about.
        ///
        /// - Remark: Generated from `#/components/schemas/ActionSimplePreview`.
        public struct ActionSimplePreview: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/description`.
            public var description: Swift.String
            /// a link to an image for this particular action.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/action_image`.
            public var action_image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/value`.
            public var value: Swift.String?
            /// a link to an image that depicts this action's asset.
            ///
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/value_image`.
            public var value_image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/ActionSimplePreview/accounts`.
            public var accounts: [Components.Schemas.AccountAddress]
            /// Creates a new `ActionSimplePreview`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - description:
            ///   - action_image: a link to an image for this particular action.
            ///   - value:
            ///   - value_image: a link to an image that depicts this action's asset.
            ///   - accounts:
            public init(
                name: Swift.String,
                description: Swift.String,
                action_image: Swift.String? = nil,
                value: Swift.String? = nil,
                value_image: Swift.String? = nil,
                accounts: [Components.Schemas.AccountAddress]
            ) {
                self.name = name
                self.description = description
                self.action_image = action_image
                self.value = value
                self.value_image = value_image
                self.accounts = accounts
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case description
                case action_image
                case value
                case value_image
                case accounts
            }
        }
        /// An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
        ///
        /// - Remark: Generated from `#/components/schemas/AccountEvent`.
        public struct AccountEvent: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountEvent/event_id`.
            public var event_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountEvent/account`.
            public var account: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/AccountEvent/timestamp`.
            public var timestamp: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountEvent/actions`.
            public var actions: [Components.Schemas.Action]
            /// scam
            ///
            /// - Remark: Generated from `#/components/schemas/AccountEvent/is_scam`.
            public var is_scam: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/AccountEvent/lt`.
            public var lt: Swift.Int64
            /// Event is not finished yet. Transactions still happening
            ///
            /// - Remark: Generated from `#/components/schemas/AccountEvent/in_progress`.
            public var in_progress: Swift.Bool
            /// TODO
            ///
            /// - Remark: Generated from `#/components/schemas/AccountEvent/extra`.
            public var extra: Swift.Int64
            /// Creates a new `AccountEvent`.
            ///
            /// - Parameters:
            ///   - event_id:
            ///   - account:
            ///   - timestamp:
            ///   - actions:
            ///   - is_scam: scam
            ///   - lt:
            ///   - in_progress: Event is not finished yet. Transactions still happening
            ///   - extra: TODO
            public init(
                event_id: Swift.String,
                account: Components.Schemas.AccountAddress,
                timestamp: Swift.Int64,
                actions: [Components.Schemas.Action],
                is_scam: Swift.Bool,
                lt: Swift.Int64,
                in_progress: Swift.Bool,
                extra: Swift.Int64
            ) {
                self.event_id = event_id
                self.account = account
                self.timestamp = timestamp
                self.actions = actions
                self.is_scam = is_scam
                self.lt = lt
                self.in_progress = in_progress
                self.extra = extra
            }
            public enum CodingKeys: String, CodingKey {
                case event_id
                case account
                case timestamp
                case actions
                case is_scam
                case lt
                case in_progress
                case extra
            }
        }
        /// - Remark: Generated from `#/components/schemas/AccountEvents`.
        public struct AccountEvents: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountEvents/events`.
            public var events: [Components.Schemas.AccountEvent]
            /// - Remark: Generated from `#/components/schemas/AccountEvents/next_from`.
            public var next_from: Swift.Int64
            /// Creates a new `AccountEvents`.
            ///
            /// - Parameters:
            ///   - events:
            ///   - next_from:
            public init(events: [Components.Schemas.AccountEvent], next_from: Swift.Int64) {
                self.events = events
                self.next_from = next_from
            }
            public enum CodingKeys: String, CodingKey {
                case events
                case next_from
            }
        }
        /// - Remark: Generated from `#/components/schemas/TraceID`.
        public struct TraceID: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TraceID/id`.
            public var id: Swift.String
            /// - Remark: Generated from `#/components/schemas/TraceID/utime`.
            public var utime: Swift.Int
            /// Creates a new `TraceID`.
            ///
            /// - Parameters:
            ///   - id:
            ///   - utime:
            public init(id: Swift.String, utime: Swift.Int) {
                self.id = id
                self.utime = utime
            }
            public enum CodingKeys: String, CodingKey {
                case id
                case utime
            }
        }
        /// - Remark: Generated from `#/components/schemas/TraceIDs`.
        public struct TraceIDs: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TraceIDs/traces`.
            public var traces: [Components.Schemas.TraceID]
            /// Creates a new `TraceIDs`.
            ///
            /// - Parameters:
            ///   - traces:
            public init(traces: [Components.Schemas.TraceID]) { self.traces = traces }
            public enum CodingKeys: String, CodingKey { case traces }
        }
        /// - Remark: Generated from `#/components/schemas/ApyHistory`.
        public struct ApyHistory: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/ApyHistory/apy`.
            public var apy: Swift.Double
            /// - Remark: Generated from `#/components/schemas/ApyHistory/time`.
            public var time: Swift.Int
            /// Creates a new `ApyHistory`.
            ///
            /// - Parameters:
            ///   - apy:
            ///   - time:
            public init(apy: Swift.Double, time: Swift.Int) {
                self.apy = apy
                self.time = time
            }
            public enum CodingKeys: String, CodingKey {
                case apy
                case time
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subscription`.
        public struct Subscription: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subscription/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subscription/wallet_address`.
            public var wallet_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subscription/beneficiary_address`.
            public var beneficiary_address: Swift.String
            /// - Remark: Generated from `#/components/schemas/Subscription/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/period`.
            public var period: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/start_time`.
            public var start_time: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/timeout`.
            public var timeout: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/last_payment_time`.
            public var last_payment_time: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/last_request_time`.
            public var last_request_time: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/subscription_id`.
            public var subscription_id: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Subscription/failed_attempts`.
            public var failed_attempts: Swift.Int32
            /// Creates a new `Subscription`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - wallet_address:
            ///   - beneficiary_address:
            ///   - amount:
            ///   - period:
            ///   - start_time:
            ///   - timeout:
            ///   - last_payment_time:
            ///   - last_request_time:
            ///   - subscription_id:
            ///   - failed_attempts:
            public init(
                address: Swift.String,
                wallet_address: Swift.String,
                beneficiary_address: Swift.String,
                amount: Swift.Int64,
                period: Swift.Int64,
                start_time: Swift.Int64,
                timeout: Swift.Int64,
                last_payment_time: Swift.Int64,
                last_request_time: Swift.Int64,
                subscription_id: Swift.Int64,
                failed_attempts: Swift.Int32
            ) {
                self.address = address
                self.wallet_address = wallet_address
                self.beneficiary_address = beneficiary_address
                self.amount = amount
                self.period = period
                self.start_time = start_time
                self.timeout = timeout
                self.last_payment_time = last_payment_time
                self.last_request_time = last_request_time
                self.subscription_id = subscription_id
                self.failed_attempts = failed_attempts
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case wallet_address
                case beneficiary_address
                case amount
                case period
                case start_time
                case timeout
                case last_payment_time
                case last_request_time
                case subscription_id
                case failed_attempts
            }
        }
        /// - Remark: Generated from `#/components/schemas/Subscriptions`.
        public struct Subscriptions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Subscriptions/subscriptions`.
            public var subscriptions: [Components.Schemas.Subscription]
            /// Creates a new `Subscriptions`.
            ///
            /// - Parameters:
            ///   - subscriptions:
            public init(subscriptions: [Components.Schemas.Subscription]) { self.subscriptions = subscriptions }
            public enum CodingKeys: String, CodingKey { case subscriptions }
        }
        /// - Remark: Generated from `#/components/schemas/Auction`.
        public struct Auction: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Auction/domain`.
            public var domain: Swift.String
            /// - Remark: Generated from `#/components/schemas/Auction/owner`.
            public var owner: Swift.String
            /// - Remark: Generated from `#/components/schemas/Auction/price`.
            public var price: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Auction/bids`.
            public var bids: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Auction/date`.
            public var date: Swift.Int64
            /// Creates a new `Auction`.
            ///
            /// - Parameters:
            ///   - domain:
            ///   - owner:
            ///   - price:
            ///   - bids:
            ///   - date:
            public init(
                domain: Swift.String,
                owner: Swift.String,
                price: Swift.Int64,
                bids: Swift.Int64,
                date: Swift.Int64
            ) {
                self.domain = domain
                self.owner = owner
                self.price = price
                self.bids = bids
                self.date = date
            }
            public enum CodingKeys: String, CodingKey {
                case domain
                case owner
                case price
                case bids
                case date
            }
        }
        /// - Remark: Generated from `#/components/schemas/Auctions`.
        public struct Auctions: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Auctions/data`.
            public var data: [Components.Schemas.Auction]
            /// - Remark: Generated from `#/components/schemas/Auctions/total`.
            public var total: Swift.Int64
            /// Creates a new `Auctions`.
            ///
            /// - Parameters:
            ///   - data:
            ///   - total:
            public init(data: [Components.Schemas.Auction], total: Swift.Int64) {
                self.data = data
                self.total = total
            }
            public enum CodingKeys: String, CodingKey {
                case data
                case total
            }
        }
        /// - Remark: Generated from `#/components/schemas/WalletDNS`.
        public struct WalletDNS: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/WalletDNS/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/WalletDNS/account`.
            public var account: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/WalletDNS/is_wallet`.
            public var is_wallet: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WalletDNS/has_method_pubkey`.
            public var has_method_pubkey: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WalletDNS/has_method_seqno`.
            public var has_method_seqno: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/WalletDNS/names`.
            public var names: [Swift.String]
            /// Creates a new `WalletDNS`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - account:
            ///   - is_wallet:
            ///   - has_method_pubkey:
            ///   - has_method_seqno:
            ///   - names:
            public init(
                address: Swift.String,
                account: Components.Schemas.AccountAddress,
                is_wallet: Swift.Bool,
                has_method_pubkey: Swift.Bool,
                has_method_seqno: Swift.Bool,
                names: [Swift.String]
            ) {
                self.address = address
                self.account = account
                self.is_wallet = is_wallet
                self.has_method_pubkey = has_method_pubkey
                self.has_method_seqno = has_method_seqno
                self.names = names
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case account
                case is_wallet
                case has_method_pubkey
                case has_method_seqno
                case names
            }
        }
        /// - Remark: Generated from `#/components/schemas/DomainInfo`.
        public struct DomainInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DomainInfo/name`.
            public var name: Swift.String
            /// date of expiring. optional. not all domain in ton has expiration date
            ///
            /// - Remark: Generated from `#/components/schemas/DomainInfo/expiring_at`.
            public var expiring_at: Swift.Int64?
            /// - Remark: Generated from `#/components/schemas/DomainInfo/item`.
            public var item: Components.Schemas.NftItem?
            /// Creates a new `DomainInfo`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - expiring_at: date of expiring. optional. not all domain in ton has expiration date
            ///   - item:
            public init(name: Swift.String, expiring_at: Swift.Int64? = nil, item: Components.Schemas.NftItem? = nil) {
                self.name = name
                self.expiring_at = expiring_at
                self.item = item
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case expiring_at
                case item
            }
        }
        /// - Remark: Generated from `#/components/schemas/DnsRecord`.
        public struct DnsRecord: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DnsRecord/wallet`.
            public var wallet: Components.Schemas.WalletDNS?
            /// - Remark: Generated from `#/components/schemas/DnsRecord/next_resolver`.
            public var next_resolver: Swift.String?
            /// - Remark: Generated from `#/components/schemas/DnsRecord/sites`.
            public var sites: [Swift.String]
            /// tonstorage bag id
            ///
            /// - Remark: Generated from `#/components/schemas/DnsRecord/storage`.
            public var storage: Swift.String?
            /// Creates a new `DnsRecord`.
            ///
            /// - Parameters:
            ///   - wallet:
            ///   - next_resolver:
            ///   - sites:
            ///   - storage: tonstorage bag id
            public init(
                wallet: Components.Schemas.WalletDNS? = nil,
                next_resolver: Swift.String? = nil,
                sites: [Swift.String],
                storage: Swift.String? = nil
            ) {
                self.wallet = wallet
                self.next_resolver = next_resolver
                self.sites = sites
                self.storage = storage
            }
            public enum CodingKeys: String, CodingKey {
                case wallet
                case next_resolver
                case sites
                case storage
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftCollection`.
        public struct NftCollection: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftCollection/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/NftCollection/next_item_index`.
            public var next_item_index: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/NftCollection/owner`.
            public var owner: Components.Schemas.AccountAddress?
            /// - Remark: Generated from `#/components/schemas/NftCollection/raw_collection_content`.
            public var raw_collection_content: Swift.String
            /// - Remark: Generated from `#/components/schemas/NftCollection/metadata`.
            public struct metadataPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                /// Creates a new `metadataPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/NftCollection/metadata`.
            public var metadata: Components.Schemas.NftCollection.metadataPayload?
            /// - Remark: Generated from `#/components/schemas/NftCollection/previews`.
            public var previews: [Components.Schemas.ImagePreview]?
            /// - Remark: Generated from `#/components/schemas/NftCollection/approved_by`.
            public var approved_by: Components.Schemas.NftApprovedBy
            /// Creates a new `NftCollection`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - next_item_index:
            ///   - owner:
            ///   - raw_collection_content:
            ///   - metadata:
            ///   - previews:
            ///   - approved_by:
            public init(
                address: Swift.String,
                next_item_index: Swift.Int64,
                owner: Components.Schemas.AccountAddress? = nil,
                raw_collection_content: Swift.String,
                metadata: Components.Schemas.NftCollection.metadataPayload? = nil,
                previews: [Components.Schemas.ImagePreview]? = nil,
                approved_by: Components.Schemas.NftApprovedBy
            ) {
                self.address = address
                self.next_item_index = next_item_index
                self.owner = owner
                self.raw_collection_content = raw_collection_content
                self.metadata = metadata
                self.previews = previews
                self.approved_by = approved_by
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case next_item_index
                case owner
                case raw_collection_content
                case metadata
                case previews
                case approved_by
            }
        }
        /// - Remark: Generated from `#/components/schemas/NftCollections`.
        public struct NftCollections: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/NftCollections/nft_collections`.
            public var nft_collections: [Components.Schemas.NftCollection]
            /// Creates a new `NftCollections`.
            ///
            /// - Parameters:
            ///   - nft_collections:
            public init(nft_collections: [Components.Schemas.NftCollection]) { self.nft_collections = nft_collections }
            public enum CodingKeys: String, CodingKey { case nft_collections }
        }
        /// - Remark: Generated from `#/components/schemas/Trace`.
        public struct Trace: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Trace/transaction`.
            public var transaction: Components.Schemas.Transaction {
                get { storage.value.transaction }
                _modify { yield &storage.value.transaction }
            }
            /// - Remark: Generated from `#/components/schemas/Trace/interfaces`.
            public var interfaces: [Swift.String] {
                get { storage.value.interfaces }
                _modify { yield &storage.value.interfaces }
            }
            /// - Remark: Generated from `#/components/schemas/Trace/children`.
            public var children: [Components.Schemas.Trace]? {
                get { storage.value.children }
                _modify { yield &storage.value.children }
            }
            /// - Remark: Generated from `#/components/schemas/Trace/emulated`.
            public var emulated: Swift.Bool? {
                get { storage.value.emulated }
                _modify { yield &storage.value.emulated }
            }
            /// Creates a new `Trace`.
            ///
            /// - Parameters:
            ///   - transaction:
            ///   - interfaces:
            ///   - children:
            ///   - emulated:
            public init(
                transaction: Components.Schemas.Transaction,
                interfaces: [Swift.String],
                children: [Components.Schemas.Trace]? = nil,
                emulated: Swift.Bool? = nil
            ) {
                storage = .init(
                    value: .init(
                        transaction: transaction,
                        interfaces: interfaces,
                        children: children,
                        emulated: emulated
                    )
                )
            }
            public enum CodingKeys: String, CodingKey {
                case transaction
                case interfaces
                case children
                case emulated
            }
            public init(from decoder: any Decoder) throws { storage = try .init(from: decoder) }
            public func encode(to encoder: any Encoder) throws { try storage.encode(to: encoder) }
            /// Internal reference storage to allow type recursion.
            private var storage: OpenAPIRuntime.CopyOnWriteBox<Storage>
            private struct Storage: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/Trace/transaction`.
                var transaction: Components.Schemas.Transaction
                /// - Remark: Generated from `#/components/schemas/Trace/interfaces`.
                var interfaces: [Swift.String]
                /// - Remark: Generated from `#/components/schemas/Trace/children`.
                var children: [Components.Schemas.Trace]?
                /// - Remark: Generated from `#/components/schemas/Trace/emulated`.
                var emulated: Swift.Bool?
                init(
                    transaction: Components.Schemas.Transaction,
                    interfaces: [Swift.String],
                    children: [Components.Schemas.Trace]? = nil,
                    emulated: Swift.Bool? = nil
                ) {
                    self.transaction = transaction
                    self.interfaces = interfaces
                    self.children = children
                    self.emulated = emulated
                }
                typealias CodingKeys = Components.Schemas.Trace.CodingKeys
            }
        }
        /// - Remark: Generated from `#/components/schemas/MessageConsequences`.
        public struct MessageConsequences: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/MessageConsequences/trace`.
            public var trace: Components.Schemas.Trace
            /// - Remark: Generated from `#/components/schemas/MessageConsequences/risk`.
            public var risk: Components.Schemas.Risk
            /// - Remark: Generated from `#/components/schemas/MessageConsequences/event`.
            public var event: Components.Schemas.AccountEvent
            /// Creates a new `MessageConsequences`.
            ///
            /// - Parameters:
            ///   - trace:
            ///   - risk:
            ///   - event:
            public init(
                trace: Components.Schemas.Trace,
                risk: Components.Schemas.Risk,
                event: Components.Schemas.AccountEvent
            ) {
                self.trace = trace
                self.risk = risk
                self.event = event
            }
            public enum CodingKeys: String, CodingKey {
                case trace
                case risk
                case event
            }
        }
        /// Risk specifies assets that could be lost if a message would be sent to a malicious smart contract. It makes sense to understand the risk BEFORE sending a message to the blockchain.
        ///
        /// - Remark: Generated from `#/components/schemas/Risk`.
        public struct Risk: Codable, Hashable, Sendable {
            /// transfer all the remaining balance of the wallet.
            ///
            /// - Remark: Generated from `#/components/schemas/Risk/transfer_all_remaining_balance`.
            public var transfer_all_remaining_balance: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Risk/ton`.
            public var ton: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Risk/jettons`.
            public var jettons: [Components.Schemas.JettonQuantity]
            /// - Remark: Generated from `#/components/schemas/Risk/nfts`.
            public var nfts: [Components.Schemas.NftItem]
            /// Creates a new `Risk`.
            ///
            /// - Parameters:
            ///   - transfer_all_remaining_balance: transfer all the remaining balance of the wallet.
            ///   - ton:
            ///   - jettons:
            ///   - nfts:
            public init(
                transfer_all_remaining_balance: Swift.Bool,
                ton: Swift.Int64,
                jettons: [Components.Schemas.JettonQuantity],
                nfts: [Components.Schemas.NftItem]
            ) {
                self.transfer_all_remaining_balance = transfer_all_remaining_balance
                self.ton = ton
                self.jettons = jettons
                self.nfts = nfts
            }
            public enum CodingKeys: String, CodingKey {
                case transfer_all_remaining_balance
                case ton
                case jettons
                case nfts
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonQuantity`.
        public struct JettonQuantity: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonQuantity/quantity`.
            public var quantity: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonQuantity/wallet_address`.
            public var wallet_address: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/JettonQuantity/jetton`.
            public var jetton: Components.Schemas.JettonPreview
            /// Creates a new `JettonQuantity`.
            ///
            /// - Parameters:
            ///   - quantity:
            ///   - wallet_address:
            ///   - jetton:
            public init(
                quantity: Swift.String,
                wallet_address: Components.Schemas.AccountAddress,
                jetton: Components.Schemas.JettonPreview
            ) {
                self.quantity = quantity
                self.wallet_address = wallet_address
                self.jetton = jetton
            }
            public enum CodingKeys: String, CodingKey {
                case quantity
                case wallet_address
                case jetton
            }
        }
        /// - Remark: Generated from `#/components/schemas/DecodedMessage`.
        public struct DecodedMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DecodedMessage/destination`.
            public var destination: Components.Schemas.AccountAddress
            /// - Remark: Generated from `#/components/schemas/DecodedMessage/destination_wallet_version`.
            public var destination_wallet_version: Swift.String
            /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded`.
            public struct ext_in_msg_decodedPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3`.
                public struct wallet_v3Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3/subwallet_id`.
                    public var subwallet_id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3/valid_until`.
                    public var valid_until: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3/seqno`.
                    public var seqno: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3/raw_messages`.
                    public var raw_messages: [Components.Schemas.DecodedRawMessage]
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3/op`.
                    public var op: OpenAPIRuntime.OpenAPIValueContainer
                    /// Creates a new `wallet_v3Payload`.
                    ///
                    /// - Parameters:
                    ///   - subwallet_id:
                    ///   - valid_until:
                    ///   - seqno:
                    ///   - raw_messages:
                    ///   - op:
                    public init(
                        subwallet_id: Swift.Int,
                        valid_until: Swift.Int,
                        seqno: Swift.Int,
                        raw_messages: [Components.Schemas.DecodedRawMessage],
                        op: OpenAPIRuntime.OpenAPIValueContainer
                    ) {
                        self.subwallet_id = subwallet_id
                        self.valid_until = valid_until
                        self.seqno = seqno
                        self.raw_messages = raw_messages
                        self.op = op
                    }
                    public enum CodingKeys: String, CodingKey {
                        case subwallet_id
                        case valid_until
                        case seqno
                        case raw_messages
                        case op
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v3`.
                public var wallet_v3: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload.wallet_v3Payload?
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4`.
                public struct wallet_v4Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4/subwallet_id`.
                    public var subwallet_id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4/valid_until`.
                    public var valid_until: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4/seqno`.
                    public var seqno: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4/op`.
                    public var op: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4/raw_messages`.
                    public var raw_messages: [Components.Schemas.DecodedRawMessage]
                    /// Creates a new `wallet_v4Payload`.
                    ///
                    /// - Parameters:
                    ///   - subwallet_id:
                    ///   - valid_until:
                    ///   - seqno:
                    ///   - op:
                    ///   - raw_messages:
                    public init(
                        subwallet_id: Swift.Int,
                        valid_until: Swift.Int,
                        seqno: Swift.Int,
                        op: Swift.Int,
                        raw_messages: [Components.Schemas.DecodedRawMessage]
                    ) {
                        self.subwallet_id = subwallet_id
                        self.valid_until = valid_until
                        self.seqno = seqno
                        self.op = op
                        self.raw_messages = raw_messages
                    }
                    public enum CodingKeys: String, CodingKey {
                        case subwallet_id
                        case valid_until
                        case seqno
                        case op
                        case raw_messages
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_v4`.
                public var wallet_v4: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload.wallet_v4Payload?
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_highload_v2`.
                public struct wallet_highload_v2Payload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_highload_v2/subwallet_id`.
                    public var subwallet_id: Swift.Int
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_highload_v2/bounded_query_id`.
                    public var bounded_query_id: Swift.String
                    /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_highload_v2/raw_messages`.
                    public var raw_messages: [Components.Schemas.DecodedRawMessage]
                    /// Creates a new `wallet_highload_v2Payload`.
                    ///
                    /// - Parameters:
                    ///   - subwallet_id:
                    ///   - bounded_query_id:
                    ///   - raw_messages:
                    public init(
                        subwallet_id: Swift.Int,
                        bounded_query_id: Swift.String,
                        raw_messages: [Components.Schemas.DecodedRawMessage]
                    ) {
                        self.subwallet_id = subwallet_id
                        self.bounded_query_id = bounded_query_id
                        self.raw_messages = raw_messages
                    }
                    public enum CodingKeys: String, CodingKey {
                        case subwallet_id
                        case bounded_query_id
                        case raw_messages
                    }
                }
                /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded/wallet_highload_v2`.
                public var wallet_highload_v2:
                    Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload.wallet_highload_v2Payload?
                /// Creates a new `ext_in_msg_decodedPayload`.
                ///
                /// - Parameters:
                ///   - wallet_v3:
                ///   - wallet_v4:
                ///   - wallet_highload_v2:
                public init(
                    wallet_v3: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload.wallet_v3Payload? = nil,
                    wallet_v4: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload.wallet_v4Payload? = nil,
                    wallet_highload_v2: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload
                        .wallet_highload_v2Payload? = nil
                ) {
                    self.wallet_v3 = wallet_v3
                    self.wallet_v4 = wallet_v4
                    self.wallet_highload_v2 = wallet_highload_v2
                }
                public enum CodingKeys: String, CodingKey {
                    case wallet_v3
                    case wallet_v4
                    case wallet_highload_v2
                }
            }
            /// - Remark: Generated from `#/components/schemas/DecodedMessage/ext_in_msg_decoded`.
            public var ext_in_msg_decoded: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload?
            /// Creates a new `DecodedMessage`.
            ///
            /// - Parameters:
            ///   - destination:
            ///   - destination_wallet_version:
            ///   - ext_in_msg_decoded:
            public init(
                destination: Components.Schemas.AccountAddress,
                destination_wallet_version: Swift.String,
                ext_in_msg_decoded: Components.Schemas.DecodedMessage.ext_in_msg_decodedPayload? = nil
            ) {
                self.destination = destination
                self.destination_wallet_version = destination_wallet_version
                self.ext_in_msg_decoded = ext_in_msg_decoded
            }
            public enum CodingKeys: String, CodingKey {
                case destination
                case destination_wallet_version
                case ext_in_msg_decoded
            }
        }
        /// - Remark: Generated from `#/components/schemas/DecodedRawMessage`.
        public struct DecodedRawMessage: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message`.
            public struct messagePayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message/boc`.
                public var boc: Swift.String
                /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message/decoded_op_name`.
                public var decoded_op_name: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message/op_code`.
                public var op_code: Swift.String?
                /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message/decoded_body`.
                public var decoded_body: OpenAPIRuntime.OpenAPIValueContainer?
                /// Creates a new `messagePayload`.
                ///
                /// - Parameters:
                ///   - boc:
                ///   - decoded_op_name:
                ///   - op_code:
                ///   - decoded_body:
                public init(
                    boc: Swift.String,
                    decoded_op_name: Swift.String? = nil,
                    op_code: Swift.String? = nil,
                    decoded_body: OpenAPIRuntime.OpenAPIValueContainer? = nil
                ) {
                    self.boc = boc
                    self.decoded_op_name = decoded_op_name
                    self.op_code = op_code
                    self.decoded_body = decoded_body
                }
                public enum CodingKeys: String, CodingKey {
                    case boc
                    case decoded_op_name
                    case op_code
                    case decoded_body
                }
            }
            /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/message`.
            public var message: Components.Schemas.DecodedRawMessage.messagePayload
            /// - Remark: Generated from `#/components/schemas/DecodedRawMessage/mode`.
            public var mode: Swift.Int
            /// Creates a new `DecodedRawMessage`.
            ///
            /// - Parameters:
            ///   - message:
            ///   - mode:
            public init(message: Components.Schemas.DecodedRawMessage.messagePayload, mode: Swift.Int) {
                self.message = message
                self.mode = mode
            }
            public enum CodingKeys: String, CodingKey {
                case message
                case mode
            }
        }
        /// - Remark: Generated from `#/components/schemas/Event`.
        public struct Event: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Event/event_id`.
            public var event_id: Swift.String
            /// - Remark: Generated from `#/components/schemas/Event/timestamp`.
            public var timestamp: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/Event/actions`.
            public var actions: [Components.Schemas.Action]
            /// - Remark: Generated from `#/components/schemas/Event/value_flow`.
            public var value_flow: [Components.Schemas.ValueFlow]
            /// scam
            ///
            /// - Remark: Generated from `#/components/schemas/Event/is_scam`.
            public var is_scam: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Event/lt`.
            public var lt: Swift.Int64
            /// Event is not finished yet. Transactions still happening
            ///
            /// - Remark: Generated from `#/components/schemas/Event/in_progress`.
            public var in_progress: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/Event/fees`.
            public var fees: OpenAPIRuntime.OpenAPIValueContainer
            /// Creates a new `Event`.
            ///
            /// - Parameters:
            ///   - event_id:
            ///   - timestamp:
            ///   - actions:
            ///   - value_flow:
            ///   - is_scam: scam
            ///   - lt:
            ///   - in_progress: Event is not finished yet. Transactions still happening
            ///   - fees:
            public init(
                event_id: Swift.String,
                timestamp: Swift.Int64,
                actions: [Components.Schemas.Action],
                value_flow: [Components.Schemas.ValueFlow],
                is_scam: Swift.Bool,
                lt: Swift.Int64,
                in_progress: Swift.Bool,
                fees: OpenAPIRuntime.OpenAPIValueContainer
            ) {
                self.event_id = event_id
                self.timestamp = timestamp
                self.actions = actions
                self.value_flow = value_flow
                self.is_scam = is_scam
                self.lt = lt
                self.in_progress = in_progress
                self.fees = fees
            }
            public enum CodingKeys: String, CodingKey {
                case event_id
                case timestamp
                case actions
                case value_flow
                case is_scam
                case lt
                case in_progress
                case fees
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonMetadata`.
        public struct JettonMetadata: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/symbol`.
            public var symbol: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/decimals`.
            public var decimals: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/image`.
            public var image: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/description`.
            public var description: Swift.String?
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/social`.
            public var social: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/websites`.
            public var websites: [Swift.String]?
            /// - Remark: Generated from `#/components/schemas/JettonMetadata/catalogs`.
            public var catalogs: [Swift.String]?
            /// Creates a new `JettonMetadata`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name:
            ///   - symbol:
            ///   - decimals:
            ///   - image:
            ///   - description:
            ///   - social:
            ///   - websites:
            ///   - catalogs:
            public init(
                address: Swift.String,
                name: Swift.String,
                symbol: Swift.String,
                decimals: Swift.String,
                image: Swift.String? = nil,
                description: Swift.String? = nil,
                social: [Swift.String]? = nil,
                websites: [Swift.String]? = nil,
                catalogs: [Swift.String]? = nil
            ) {
                self.address = address
                self.name = name
                self.symbol = symbol
                self.decimals = decimals
                self.image = image
                self.description = description
                self.social = social
                self.websites = websites
                self.catalogs = catalogs
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case symbol
                case decimals
                case image
                case description
                case social
                case websites
                case catalogs
            }
        }
        /// - Remark: Generated from `#/components/schemas/InscriptionBalances`.
        public struct InscriptionBalances: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InscriptionBalances/inscriptions`.
            public var inscriptions: [Components.Schemas.InscriptionBalance]
            /// Creates a new `InscriptionBalances`.
            ///
            /// - Parameters:
            ///   - inscriptions:
            public init(inscriptions: [Components.Schemas.InscriptionBalance]) { self.inscriptions = inscriptions }
            public enum CodingKeys: String, CodingKey { case inscriptions }
        }
        /// - Remark: Generated from `#/components/schemas/InscriptionBalance`.
        public struct InscriptionBalance: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InscriptionBalance/type`.
            public var _type: Swift.String
            /// - Remark: Generated from `#/components/schemas/InscriptionBalance/ticker`.
            public var ticker: Swift.String
            /// - Remark: Generated from `#/components/schemas/InscriptionBalance/balance`.
            public var balance: Swift.String
            /// - Remark: Generated from `#/components/schemas/InscriptionBalance/decimals`.
            public var decimals: Swift.Int
            /// Creates a new `InscriptionBalance`.
            ///
            /// - Parameters:
            ///   - _type:
            ///   - ticker:
            ///   - balance:
            ///   - decimals:
            public init(_type: Swift.String, ticker: Swift.String, balance: Swift.String, decimals: Swift.Int) {
                self._type = _type
                self.ticker = ticker
                self.balance = balance
                self.decimals = decimals
            }
            public enum CodingKeys: String, CodingKey {
                case _type = "type"
                case ticker
                case balance
                case decimals
            }
        }
        /// - Remark: Generated from `#/components/schemas/Jettons`.
        public struct Jettons: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Jettons/jettons`.
            public var jettons: [Components.Schemas.JettonInfo]
            /// Creates a new `Jettons`.
            ///
            /// - Parameters:
            ///   - jettons:
            public init(jettons: [Components.Schemas.JettonInfo]) { self.jettons = jettons }
            public enum CodingKeys: String, CodingKey { case jettons }
        }
        /// - Remark: Generated from `#/components/schemas/JettonInfo`.
        public struct JettonInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonInfo/mintable`.
            public var mintable: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/JettonInfo/total_supply`.
            public var total_supply: Swift.String
            /// - Remark: Generated from `#/components/schemas/JettonInfo/metadata`.
            public var metadata: Components.Schemas.JettonMetadata
            /// - Remark: Generated from `#/components/schemas/JettonInfo/verification`.
            public var verification: Components.Schemas.JettonVerificationType
            /// - Remark: Generated from `#/components/schemas/JettonInfo/holders_count`.
            public var holders_count: Swift.Int32
            /// Creates a new `JettonInfo`.
            ///
            /// - Parameters:
            ///   - mintable:
            ///   - total_supply:
            ///   - metadata:
            ///   - verification:
            ///   - holders_count:
            public init(
                mintable: Swift.Bool,
                total_supply: Swift.String,
                metadata: Components.Schemas.JettonMetadata,
                verification: Components.Schemas.JettonVerificationType,
                holders_count: Swift.Int32
            ) {
                self.mintable = mintable
                self.total_supply = total_supply
                self.metadata = metadata
                self.verification = verification
                self.holders_count = holders_count
            }
            public enum CodingKeys: String, CodingKey {
                case mintable
                case total_supply
                case metadata
                case verification
                case holders_count
            }
        }
        /// - Remark: Generated from `#/components/schemas/JettonHolders`.
        public struct JettonHolders: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/JettonHolders/addressesPayload`.
            public struct addressesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/JettonHolders/addressesPayload/address`.
                public var address: Swift.String
                /// - Remark: Generated from `#/components/schemas/JettonHolders/addressesPayload/owner`.
                public var owner: Components.Schemas.AccountAddress
                /// - Remark: Generated from `#/components/schemas/JettonHolders/addressesPayload/balance`.
                public var balance: Swift.String
                /// Creates a new `addressesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - address:
                ///   - owner:
                ///   - balance:
                public init(address: Swift.String, owner: Components.Schemas.AccountAddress, balance: Swift.String) {
                    self.address = address
                    self.owner = owner
                    self.balance = balance
                }
                public enum CodingKeys: String, CodingKey {
                    case address
                    case owner
                    case balance
                }
            }
            /// - Remark: Generated from `#/components/schemas/JettonHolders/addresses`.
            public typealias addressesPayload = [Components.Schemas.JettonHolders.addressesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/JettonHolders/addresses`.
            public var addresses: Components.Schemas.JettonHolders.addressesPayload
            /// Creates a new `JettonHolders`.
            ///
            /// - Parameters:
            ///   - addresses:
            public init(addresses: Components.Schemas.JettonHolders.addressesPayload) { self.addresses = addresses }
            public enum CodingKeys: String, CodingKey { case addresses }
        }
        /// - Remark: Generated from `#/components/schemas/AccountStaking`.
        public struct AccountStaking: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountStaking/pools`.
            public var pools: [Components.Schemas.AccountStakingInfo]
            /// Creates a new `AccountStaking`.
            ///
            /// - Parameters:
            ///   - pools:
            public init(pools: [Components.Schemas.AccountStakingInfo]) { self.pools = pools }
            public enum CodingKeys: String, CodingKey { case pools }
        }
        /// - Remark: Generated from `#/components/schemas/AccountStakingInfo`.
        public struct AccountStakingInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountStakingInfo/pool`.
            public var pool: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountStakingInfo/amount`.
            public var amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStakingInfo/pending_deposit`.
            public var pending_deposit: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStakingInfo/pending_withdraw`.
            public var pending_withdraw: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/AccountStakingInfo/ready_withdraw`.
            public var ready_withdraw: Swift.Int64
            /// Creates a new `AccountStakingInfo`.
            ///
            /// - Parameters:
            ///   - pool:
            ///   - amount:
            ///   - pending_deposit:
            ///   - pending_withdraw:
            ///   - ready_withdraw:
            public init(
                pool: Swift.String,
                amount: Swift.Int64,
                pending_deposit: Swift.Int64,
                pending_withdraw: Swift.Int64,
                ready_withdraw: Swift.Int64
            ) {
                self.pool = pool
                self.amount = amount
                self.pending_deposit = pending_deposit
                self.pending_withdraw = pending_withdraw
                self.ready_withdraw = ready_withdraw
            }
            public enum CodingKeys: String, CodingKey {
                case pool
                case amount
                case pending_deposit
                case pending_withdraw
                case ready_withdraw
            }
        }
        /// - Remark: Generated from `#/components/schemas/PoolInfo`.
        public struct PoolInfo: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PoolInfo/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/PoolInfo/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/PoolInfo/total_amount`.
            public var total_amount: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/PoolInfo/implementation`.
            public var implementation: Components.Schemas.PoolImplementationType
            /// APY in percent
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/apy`.
            public var apy: Swift.Double
            /// - Remark: Generated from `#/components/schemas/PoolInfo/min_stake`.
            public var min_stake: Swift.Int64
            /// current nomination cycle beginning timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/cycle_start`.
            public var cycle_start: Swift.Int64
            /// current nomination cycle ending timestamp
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/cycle_end`.
            public var cycle_end: Swift.Int64
            /// this pool has verified source code or managed by trusted company
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/verified`.
            public var verified: Swift.Bool
            /// current number of nominators
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/current_nominators`.
            public var current_nominators: Swift.Int
            /// maximum number of nominators
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/max_nominators`.
            public var max_nominators: Swift.Int
            /// for liquid staking master account of jetton
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/liquid_jetton_master`.
            public var liquid_jetton_master: Swift.String?
            /// total stake of all nominators
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/nominators_stake`.
            public var nominators_stake: Swift.Int64
            /// stake of validator
            ///
            /// - Remark: Generated from `#/components/schemas/PoolInfo/validator_stake`.
            public var validator_stake: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/PoolInfo/cycle_length`.
            public var cycle_length: Swift.Int64?
            /// Creates a new `PoolInfo`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - name:
            ///   - total_amount:
            ///   - implementation:
            ///   - apy: APY in percent
            ///   - min_stake:
            ///   - cycle_start: current nomination cycle beginning timestamp
            ///   - cycle_end: current nomination cycle ending timestamp
            ///   - verified: this pool has verified source code or managed by trusted company
            ///   - current_nominators: current number of nominators
            ///   - max_nominators: maximum number of nominators
            ///   - liquid_jetton_master: for liquid staking master account of jetton
            ///   - nominators_stake: total stake of all nominators
            ///   - validator_stake: stake of validator
            ///   - cycle_length:
            public init(
                address: Swift.String,
                name: Swift.String,
                total_amount: Swift.Int64,
                implementation: Components.Schemas.PoolImplementationType,
                apy: Swift.Double,
                min_stake: Swift.Int64,
                cycle_start: Swift.Int64,
                cycle_end: Swift.Int64,
                verified: Swift.Bool,
                current_nominators: Swift.Int,
                max_nominators: Swift.Int,
                liquid_jetton_master: Swift.String? = nil,
                nominators_stake: Swift.Int64,
                validator_stake: Swift.Int64,
                cycle_length: Swift.Int64? = nil
            ) {
                self.address = address
                self.name = name
                self.total_amount = total_amount
                self.implementation = implementation
                self.apy = apy
                self.min_stake = min_stake
                self.cycle_start = cycle_start
                self.cycle_end = cycle_end
                self.verified = verified
                self.current_nominators = current_nominators
                self.max_nominators = max_nominators
                self.liquid_jetton_master = liquid_jetton_master
                self.nominators_stake = nominators_stake
                self.validator_stake = validator_stake
                self.cycle_length = cycle_length
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case name
                case total_amount
                case implementation
                case apy
                case min_stake
                case cycle_start
                case cycle_end
                case verified
                case current_nominators
                case max_nominators
                case liquid_jetton_master
                case nominators_stake
                case validator_stake
                case cycle_length
            }
        }
        /// - Remark: Generated from `#/components/schemas/PoolImplementation`.
        public struct PoolImplementation: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/PoolImplementation/name`.
            public var name: Swift.String
            /// - Remark: Generated from `#/components/schemas/PoolImplementation/description`.
            public var description: Swift.String
            /// - Remark: Generated from `#/components/schemas/PoolImplementation/url`.
            public var url: Swift.String
            /// - Remark: Generated from `#/components/schemas/PoolImplementation/socials`.
            public var socials: [Swift.String]
            /// Creates a new `PoolImplementation`.
            ///
            /// - Parameters:
            ///   - name:
            ///   - description:
            ///   - url:
            ///   - socials:
            public init(name: Swift.String, description: Swift.String, url: Swift.String, socials: [Swift.String]) {
                self.name = name
                self.description = description
                self.url = url
                self.socials = socials
            }
            public enum CodingKeys: String, CodingKey {
                case name
                case description
                case url
                case socials
            }
        }
        /// - Remark: Generated from `#/components/schemas/StorageProvider`.
        public struct StorageProvider: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/StorageProvider/address`.
            public var address: Swift.String
            /// - Remark: Generated from `#/components/schemas/StorageProvider/accept_new_contracts`.
            public var accept_new_contracts: Swift.Bool
            /// - Remark: Generated from `#/components/schemas/StorageProvider/rate_per_mb_day`.
            public var rate_per_mb_day: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/StorageProvider/max_span`.
            public var max_span: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/StorageProvider/minimal_file_size`.
            public var minimal_file_size: Swift.Int64
            /// - Remark: Generated from `#/components/schemas/StorageProvider/maximal_file_size`.
            public var maximal_file_size: Swift.Int64
            /// Creates a new `StorageProvider`.
            ///
            /// - Parameters:
            ///   - address:
            ///   - accept_new_contracts:
            ///   - rate_per_mb_day:
            ///   - max_span:
            ///   - minimal_file_size:
            ///   - maximal_file_size:
            public init(
                address: Swift.String,
                accept_new_contracts: Swift.Bool,
                rate_per_mb_day: Swift.Int64,
                max_span: Swift.Int64,
                minimal_file_size: Swift.Int64,
                maximal_file_size: Swift.Int64
            ) {
                self.address = address
                self.accept_new_contracts = accept_new_contracts
                self.rate_per_mb_day = rate_per_mb_day
                self.max_span = max_span
                self.minimal_file_size = minimal_file_size
                self.maximal_file_size = maximal_file_size
            }
            public enum CodingKeys: String, CodingKey {
                case address
                case accept_new_contracts
                case rate_per_mb_day
                case max_span
                case minimal_file_size
                case maximal_file_size
            }
        }
        /// - Remark: Generated from `#/components/schemas/FoundAccounts`.
        public struct FoundAccounts: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/FoundAccounts/addressesPayload`.
            public struct addressesPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/FoundAccounts/addressesPayload/address`.
                public var address: Swift.String
                /// - Remark: Generated from `#/components/schemas/FoundAccounts/addressesPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/FoundAccounts/addressesPayload/preview`.
                public var preview: Swift.String
                /// Creates a new `addressesPayloadPayload`.
                ///
                /// - Parameters:
                ///   - address:
                ///   - name:
                ///   - preview:
                public init(address: Swift.String, name: Swift.String, preview: Swift.String) {
                    self.address = address
                    self.name = name
                    self.preview = preview
                }
                public enum CodingKeys: String, CodingKey {
                    case address
                    case name
                    case preview
                }
            }
            /// - Remark: Generated from `#/components/schemas/FoundAccounts/addresses`.
            public typealias addressesPayload = [Components.Schemas.FoundAccounts.addressesPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/FoundAccounts/addresses`.
            public var addresses: Components.Schemas.FoundAccounts.addressesPayload
            /// Creates a new `FoundAccounts`.
            ///
            /// - Parameters:
            ///   - addresses:
            public init(addresses: Components.Schemas.FoundAccounts.addressesPayload) { self.addresses = addresses }
            public enum CodingKeys: String, CodingKey { case addresses }
        }
        /// - Remark: Generated from `#/components/schemas/DnsExpiring`.
        public struct DnsExpiring: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/DnsExpiring/itemsPayload`.
            public struct itemsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/DnsExpiring/itemsPayload/expiring_at`.
                public var expiring_at: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/DnsExpiring/itemsPayload/name`.
                public var name: Swift.String
                /// - Remark: Generated from `#/components/schemas/DnsExpiring/itemsPayload/dns_item`.
                public var dns_item: Components.Schemas.NftItem?
                /// Creates a new `itemsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - expiring_at:
                ///   - name:
                ///   - dns_item:
                public init(expiring_at: Swift.Int64, name: Swift.String, dns_item: Components.Schemas.NftItem? = nil) {
                    self.expiring_at = expiring_at
                    self.name = name
                    self.dns_item = dns_item
                }
                public enum CodingKeys: String, CodingKey {
                    case expiring_at
                    case name
                    case dns_item
                }
            }
            /// - Remark: Generated from `#/components/schemas/DnsExpiring/items`.
            public typealias itemsPayload = [Components.Schemas.DnsExpiring.itemsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/DnsExpiring/items`.
            public var items: Components.Schemas.DnsExpiring.itemsPayload
            /// Creates a new `DnsExpiring`.
            ///
            /// - Parameters:
            ///   - items:
            public init(items: Components.Schemas.DnsExpiring.itemsPayload) { self.items = items }
            public enum CodingKeys: String, CodingKey { case items }
        }
        /// - Remark: Generated from `#/components/schemas/AccountInfoByStateInit`.
        public struct AccountInfoByStateInit: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/AccountInfoByStateInit/public_key`.
            public var public_key: Swift.String
            /// - Remark: Generated from `#/components/schemas/AccountInfoByStateInit/address`.
            public var address: Swift.String
            /// Creates a new `AccountInfoByStateInit`.
            ///
            /// - Parameters:
            ///   - public_key:
            ///   - address:
            public init(public_key: Swift.String, address: Swift.String) {
                self.public_key = public_key
                self.address = address
            }
            public enum CodingKeys: String, CodingKey {
                case public_key
                case address
            }
        }
        /// - Remark: Generated from `#/components/schemas/Seqno`.
        public struct Seqno: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/Seqno/seqno`.
            public var seqno: Swift.Int
            /// Creates a new `Seqno`.
            ///
            /// - Parameters:
            ///   - seqno:
            public init(seqno: Swift.Int) { self.seqno = seqno }
            public enum CodingKeys: String, CodingKey { case seqno }
        }
        /// - Remark: Generated from `#/components/schemas/BlockRaw`.
        public struct BlockRaw: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockRaw/workchain`.
            public var workchain: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockRaw/shard`.
            public var shard: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockRaw/seqno`.
            public var seqno: Swift.Int
            /// - Remark: Generated from `#/components/schemas/BlockRaw/root_hash`.
            public var root_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockRaw/file_hash`.
            public var file_hash: Swift.String
            /// Creates a new `BlockRaw`.
            ///
            /// - Parameters:
            ///   - workchain:
            ///   - shard:
            ///   - seqno:
            ///   - root_hash:
            ///   - file_hash:
            public init(
                workchain: Swift.Int,
                shard: Swift.Int,
                seqno: Swift.Int,
                root_hash: Swift.String,
                file_hash: Swift.String
            ) {
                self.workchain = workchain
                self.shard = shard
                self.seqno = seqno
                self.root_hash = root_hash
                self.file_hash = file_hash
            }
            public enum CodingKeys: String, CodingKey {
                case workchain
                case shard
                case seqno
                case root_hash
                case file_hash
            }
        }
        /// - Remark: Generated from `#/components/schemas/InitStateRaw`.
        public struct InitStateRaw: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/InitStateRaw/workchain`.
            public var workchain: Swift.Int
            /// - Remark: Generated from `#/components/schemas/InitStateRaw/root_hash`.
            public var root_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/InitStateRaw/file_hash`.
            public var file_hash: Swift.String
            /// Creates a new `InitStateRaw`.
            ///
            /// - Parameters:
            ///   - workchain:
            ///   - root_hash:
            ///   - file_hash:
            public init(workchain: Swift.Int, root_hash: Swift.String, file_hash: Swift.String) {
                self.workchain = workchain
                self.root_hash = root_hash
                self.file_hash = file_hash
            }
            public enum CodingKeys: String, CodingKey {
                case workchain
                case root_hash
                case file_hash
            }
        }
        /// - Remark: Generated from `#/components/schemas/EncryptedComment`.
        public struct EncryptedComment: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/EncryptedComment/encryption_type`.
            public var encryption_type: Swift.String
            /// - Remark: Generated from `#/components/schemas/EncryptedComment/cipher_text`.
            public var cipher_text: Swift.String
            /// Creates a new `EncryptedComment`.
            ///
            /// - Parameters:
            ///   - encryption_type:
            ///   - cipher_text:
            public init(encryption_type: Swift.String, cipher_text: Swift.String) {
                self.encryption_type = encryption_type
                self.cipher_text = cipher_text
            }
            public enum CodingKeys: String, CodingKey {
                case encryption_type
                case cipher_text
            }
        }
        /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect`.
        public struct BlockchainAccountInspect: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/code`.
            public var code: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/code_hash`.
            public var code_hash: Swift.String
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/methodsPayload`.
            public struct methodsPayloadPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/methodsPayload/id`.
                public var id: Swift.Int64
                /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/methodsPayload/method`.
                public var method: Swift.String
                /// Creates a new `methodsPayloadPayload`.
                ///
                /// - Parameters:
                ///   - id:
                ///   - method:
                public init(id: Swift.Int64, method: Swift.String) {
                    self.id = id
                    self.method = method
                }
                public enum CodingKeys: String, CodingKey {
                    case id
                    case method
                }
            }
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/methods`.
            public typealias methodsPayload = [Components.Schemas.BlockchainAccountInspect.methodsPayloadPayload]
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/methods`.
            public var methods: Components.Schemas.BlockchainAccountInspect.methodsPayload
            /// - Remark: Generated from `#/components/schemas/BlockchainAccountInspect/compiler`.
            public var compiler: Swift.String?
            /// Creates a new `BlockchainAccountInspect`.
            ///
            /// - Parameters:
            ///   - code:
            ///   - code_hash:
            ///   - methods:
            ///   - compiler:
            public init(
                code: Swift.String,
                code_hash: Swift.String,
                methods: Components.Schemas.BlockchainAccountInspect.methodsPayload,
                compiler: Swift.String? = nil
            ) {
                self.code = code
                self.code_hash = code_hash
                self.methods = methods
                self.compiler = compiler
            }
            public enum CodingKeys: String, CodingKey {
                case code
                case code_hash
                case methods
                case compiler
            }
        }
        /// - Remark: Generated from `#/components/schemas/PoolImplementationType`.
        @frozen public enum PoolImplementationType: String, Codable, Hashable, Sendable {
            case whales = "whales"
            case tf = "tf"
            case liquidTF = "liquidTF"
        }
        /// - Remark: Generated from `#/components/schemas/TokenRates`.
        public struct TokenRates: Codable, Hashable, Sendable {
            /// - Remark: Generated from `#/components/schemas/TokenRates/prices`.
            public struct pricesPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.Double]
                /// Creates a new `pricesPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.Double] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TokenRates/prices`.
            public var prices: Components.Schemas.TokenRates.pricesPayload?
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_24h`.
            public struct diff_24hPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `diff_24hPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_24h`.
            public var diff_24h: Components.Schemas.TokenRates.diff_24hPayload?
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_7d`.
            public struct diff_7dPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `diff_7dPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_7d`.
            public var diff_7d: Components.Schemas.TokenRates.diff_7dPayload?
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_30d`.
            public struct diff_30dPayload: Codable, Hashable, Sendable {
                /// A container of undocumented properties.
                public var additionalProperties: [String: Swift.String]
                /// Creates a new `diff_30dPayload`.
                ///
                /// - Parameters:
                ///   - additionalProperties: A container of undocumented properties.
                public init(additionalProperties: [String: Swift.String] = .init()) {
                    self.additionalProperties = additionalProperties
                }
                public init(from decoder: any Decoder) throws {
                    additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                }
                public func encode(to encoder: any Encoder) throws {
                    try encoder.encodeAdditionalProperties(additionalProperties)
                }
            }
            /// - Remark: Generated from `#/components/schemas/TokenRates/diff_30d`.
            public var diff_30d: Components.Schemas.TokenRates.diff_30dPayload?
            /// Creates a new `TokenRates`.
            ///
            /// - Parameters:
            ///   - prices:
            ///   - diff_24h:
            ///   - diff_7d:
            ///   - diff_30d:
            public init(
                prices: Components.Schemas.TokenRates.pricesPayload? = nil,
                diff_24h: Components.Schemas.TokenRates.diff_24hPayload? = nil,
                diff_7d: Components.Schemas.TokenRates.diff_7dPayload? = nil,
                diff_30d: Components.Schemas.TokenRates.diff_30dPayload? = nil
            ) {
                self.prices = prices
                self.diff_24h = diff_24h
                self.diff_7d = diff_7d
                self.diff_30d = diff_30d
            }
            public enum CodingKeys: String, CodingKey {
                case prices
                case diff_24h
                case diff_7d
                case diff_30d
            }
        }
    }
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// masterchain block seqno
        ///
        /// - Remark: Generated from `#/components/parameters/masterchainSeqno`.
        public typealias masterchainSeqno = Swift.Int32
        /// block ID
        ///
        /// - Remark: Generated from `#/components/parameters/blockchainBlockIDParameter`.
        public typealias blockchainBlockIDParameter = Swift.String
        /// block ID: (workchain,shard,seqno,root_hash,file_hash)
        ///
        /// - Remark: Generated from `#/components/parameters/blockchainBlockIDExtParameter`.
        public typealias blockchainBlockIDExtParameter = Swift.String
        /// transaction ID
        ///
        /// - Remark: Generated from `#/components/parameters/transactionIDParameter`.
        public typealias transactionIDParameter = Swift.String
        /// message ID
        ///
        /// - Remark: Generated from `#/components/parameters/messageIDParameter`.
        public typealias messageIDParameter = Swift.String
        /// account ID
        ///
        /// - Remark: Generated from `#/components/parameters/accountIDParameter`.
        public typealias accountIDParameter = Swift.String
        /// account ID
        ///
        /// - Remark: Generated from `#/components/parameters/accountIDParameters`.
        public typealias accountIDParameters = [Swift.String]
        /// jetton ID
        ///
        /// - Remark: Generated from `#/components/parameters/jettonIDParameter`.
        public typealias jettonIDParameter = Swift.String
        /// contract get method name
        ///
        /// - Remark: Generated from `#/components/parameters/methodNameParameter`.
        public typealias methodNameParameter = Swift.String
        /// domain name with .ton or .t.me
        ///
        /// - Remark: Generated from `#/components/parameters/domainNameParameter`.
        public typealias domainNameParameter = Swift.String
        /// trace ID or transaction hash in hex (without 0x) or base64url format
        ///
        /// - Remark: Generated from `#/components/parameters/traceIDParameter`.
        public typealias traceIDParameter = Swift.String
        /// event ID or transaction hash in hex (without 0x) or base64url format
        ///
        /// - Remark: Generated from `#/components/parameters/eventIDParameter`.
        public typealias eventIDParameter = Swift.String
        /// - Remark: Generated from `#/components/parameters/publicKeyParameter`.
        public typealias publicKeyParameter = Swift.String
        /// - Remark: Generated from `#/components/parameters/i18n`.
        public typealias i18n = Swift.String
        /// - Remark: Generated from `#/components/parameters/limitQuery`.
        public typealias limitQuery = Swift.Int
        /// - Remark: Generated from `#/components/parameters/offsetQuery`.
        public typealias offsetQuery = Swift.Int
        /// domain filter for current auctions "ton" or "t.me"
        ///
        /// - Remark: Generated from `#/components/parameters/domainFilterQuery`.
        public typealias domainFilterQuery = Swift.String
        /// number of days before expiration
        ///
        /// - Remark: Generated from `#/components/parameters/periodQuery`.
        public typealias periodQuery = Swift.Int
        /// nft collection
        ///
        /// - Remark: Generated from `#/components/parameters/collectionQuery`.
        public typealias collectionQuery = Swift.String
        /// mode
        ///
        /// - Remark: Generated from `#/components/parameters/modeQuery`.
        public typealias modeQuery = Swift.Int
        /// count
        ///
        /// - Remark: Generated from `#/components/parameters/countQuery`.
        public typealias countQuery = Swift.Int
        /// known block: (workchain,shard,seqno,root_hash,file_hash)
        ///
        /// - Remark: Generated from `#/components/parameters/knownBlockIDExtQuery`.
        public typealias knownBlockIDExtQuery = Swift.String
        /// target block: (workchain,shard,seqno,root_hash,file_hash)
        ///
        /// - Remark: Generated from `#/components/parameters/targetBlockIDExtQuery`.
        public typealias targetBlockIDExtQuery = Swift.String
        /// lt
        ///
        /// - Remark: Generated from `#/components/parameters/ltMustQuery`.
        public typealias ltMustQuery = Swift.Int
        /// lt
        ///
        /// - Remark: Generated from `#/components/parameters/ltQuery`.
        public typealias ltQuery = Swift.Int
        /// hash
        ///
        /// - Remark: Generated from `#/components/parameters/hashQuery`.
        public typealias hashQuery = Swift.String
        /// workchain
        ///
        /// - Remark: Generated from `#/components/parameters/workchainQuery`.
        public typealias workchainQuery = Swift.Int
        /// shard
        ///
        /// - Remark: Generated from `#/components/parameters/shardQuery`.
        public typealias shardQuery = Swift.Int
        /// exact
        ///
        /// - Remark: Generated from `#/components/parameters/exactQuery`.
        public typealias exactQuery = Swift.Bool
        /// account ID
        ///
        /// - Remark: Generated from `#/components/parameters/accountIDQuery`.
        public typealias accountIDQuery = Swift.String
        /// Show only events that are initiated by this account
        ///
        /// - Remark: Generated from `#/components/parameters/initiatorQuery`.
        public typealias initiatorQuery = Swift.Bool
        /// accept ton and all possible fiat currencies, separated by commas
        ///
        /// - Remark: Generated from `#/components/parameters/currenciesQuery`.
        public typealias currenciesQuery = Swift.String
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {
        /// - Remark: Generated from `#/components/requestBodies/MethodParameters`.
        @frozen public enum MethodParameters: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/MethodParameters/content/application\/json`.
            case json(OpenAPIRuntime.OpenAPIObjectContainer)
        }
        /// - Remark: Generated from `#/components/requestBodies/BatchBoc`.
        @frozen public enum BatchBoc: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/BatchBoc/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/BatchBoc/json/boc`.
                public var boc: Swift.String?
                /// - Remark: Generated from `#/components/requestBodies/BatchBoc/json/batch`.
                public var batch: [Swift.String]?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - boc:
                ///   - batch:
                public init(boc: Swift.String? = nil, batch: [Swift.String]? = nil) {
                    self.boc = boc
                    self.batch = batch
                }
                public enum CodingKeys: String, CodingKey {
                    case boc
                    case batch
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/BatchBoc/content/application\/json`.
            case json(Components.RequestBodies.BatchBoc.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/EmulationBoc`.
        @frozen public enum EmulationBoc: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/boc`.
                public var boc: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/paramsPayload`.
                public struct paramsPayloadPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/paramsPayload/address`.
                    public var address: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/paramsPayload/balance`.
                    public var balance: Swift.Int64?
                    /// Creates a new `paramsPayloadPayload`.
                    ///
                    /// - Parameters:
                    ///   - address:
                    ///   - balance:
                    public init(address: Swift.String, balance: Swift.Int64? = nil) {
                        self.address = address
                        self.balance = balance
                    }
                    public enum CodingKeys: String, CodingKey {
                        case address
                        case balance
                    }
                }
                /// additional per account configuration
                ///
                /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/params`.
                public typealias paramsPayload = [Components.RequestBodies.EmulationBoc.jsonPayload
                    .paramsPayloadPayload]
                /// additional per account configuration
                ///
                /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/json/params`.
                public var params: Components.RequestBodies.EmulationBoc.jsonPayload.paramsPayload?
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - boc:
                ///   - params: additional per account configuration
                public init(
                    boc: Swift.String,
                    params: Components.RequestBodies.EmulationBoc.jsonPayload.paramsPayload? = nil
                ) {
                    self.boc = boc
                    self.params = params
                }
                public enum CodingKeys: String, CodingKey {
                    case boc
                    case params
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/EmulationBoc/content/application\/json`.
            case json(Components.RequestBodies.EmulationBoc.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/Boc`.
        @frozen public enum Boc: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/Boc/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/Boc/json/boc`.
                public var boc: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - boc:
                public init(boc: Swift.String) { self.boc = boc }
                public enum CodingKeys: String, CodingKey { case boc }
            }
            /// - Remark: Generated from `#/components/requestBodies/Boc/content/application\/json`.
            case json(Components.RequestBodies.Boc.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/AccountIDs`.
        @frozen public enum AccountIDs: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/AccountIDs/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/AccountIDs/json/account_ids`.
                public var account_ids: [Swift.String]
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - account_ids:
                public init(account_ids: [Swift.String]) { self.account_ids = account_ids }
                public enum CodingKeys: String, CodingKey { case account_ids }
            }
            /// - Remark: Generated from `#/components/requestBodies/AccountIDs/content/application\/json`.
            case json(Components.RequestBodies.AccountIDs.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof`.
        @frozen public enum TonConnectProof: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/address`.
                public var address: Swift.String
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof`.
                public struct proofPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/timestamp`.
                    public var timestamp: Swift.Int64
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain`.
                    public struct domainPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain/length_bytes`.
                        public var length_bytes: Swift.Int?
                        /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain/value`.
                        public var value: Swift.String
                        /// Creates a new `domainPayload`.
                        ///
                        /// - Parameters:
                        ///   - length_bytes:
                        ///   - value:
                        public init(length_bytes: Swift.Int? = nil, value: Swift.String) {
                            self.length_bytes = length_bytes
                            self.value = value
                        }
                        public enum CodingKeys: String, CodingKey {
                            case length_bytes
                            case value
                        }
                    }
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/domain`.
                    public var domain: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload.domainPayload
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/signature`.
                    public var signature: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/payload`.
                    public var payload: Swift.String
                    /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof/state_init`.
                    public var state_init: Swift.String?
                    /// Creates a new `proofPayload`.
                    ///
                    /// - Parameters:
                    ///   - timestamp:
                    ///   - domain:
                    ///   - signature:
                    ///   - payload:
                    ///   - state_init:
                    public init(
                        timestamp: Swift.Int64,
                        domain: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload.domainPayload,
                        signature: Swift.String,
                        payload: Swift.String,
                        state_init: Swift.String? = nil
                    ) {
                        self.timestamp = timestamp
                        self.domain = domain
                        self.signature = signature
                        self.payload = payload
                        self.state_init = state_init
                    }
                    public enum CodingKeys: String, CodingKey {
                        case timestamp
                        case domain
                        case signature
                        case payload
                        case state_init
                    }
                }
                /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/json/proof`.
                public var proof: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - address:
                ///   - proof:
                public init(
                    address: Swift.String,
                    proof: Components.RequestBodies.TonConnectProof.jsonPayload.proofPayload
                ) {
                    self.address = address
                    self.proof = proof
                }
                public enum CodingKeys: String, CodingKey {
                    case address
                    case proof
                }
            }
            /// - Remark: Generated from `#/components/requestBodies/TonConnectProof/content/application\/json`.
            case json(Components.RequestBodies.TonConnectProof.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/Backup`.
        @frozen public enum Backup: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/Backup/content/application\/octet-stream`.
            case binary(OpenAPIRuntime.HTTPBody)
        }
        /// - Remark: Generated from `#/components/requestBodies/TonConnectStateInit`.
        @frozen public enum TonConnectStateInit: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/TonConnectStateInit/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/TonConnectStateInit/json/state_init`.
                public var state_init: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - state_init:
                public init(state_init: Swift.String) { self.state_init = state_init }
                public enum CodingKeys: String, CodingKey { case state_init }
            }
            /// - Remark: Generated from `#/components/requestBodies/TonConnectStateInit/content/application\/json`.
            case json(Components.RequestBodies.TonConnectStateInit.jsonPayload)
        }
        /// - Remark: Generated from `#/components/requestBodies/LiteServerSendMessageRequest`.
        @frozen public enum LiteServerSendMessageRequest: Sendable, Hashable {
            /// - Remark: Generated from `#/components/requestBodies/LiteServerSendMessageRequest/json`.
            public struct jsonPayload: Codable, Hashable, Sendable {
                /// - Remark: Generated from `#/components/requestBodies/LiteServerSendMessageRequest/json/body`.
                public var body: Swift.String
                /// Creates a new `jsonPayload`.
                ///
                /// - Parameters:
                ///   - body:
                public init(body: Swift.String) { self.body = body }
                public enum CodingKeys: String, CodingKey { case body }
            }
            /// - Remark: Generated from `#/components/requestBodies/LiteServerSendMessageRequest/content/application\/json`.
            case json(Components.RequestBodies.LiteServerSendMessageRequest.jsonPayload)
        }
    }
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {
        public struct _Error: Sendable, Hashable {
            /// - Remark: Generated from `#/components/responses/Error/content`.
            @frozen public enum Body: Sendable, Hashable {
                /// - Remark: Generated from `#/components/responses/Error/content/json`.
                public struct jsonPayload: Codable, Hashable, Sendable {
                    /// - Remark: Generated from `#/components/responses/Error/content/json/error`.
                    public var error: Swift.String
                    /// Creates a new `jsonPayload`.
                    ///
                    /// - Parameters:
                    ///   - error:
                    public init(error: Swift.String) { self.error = error }
                    public enum CodingKeys: String, CodingKey { case error }
                }
                /// - Remark: Generated from `#/components/responses/Error/content/application\/json`.
                case json(Components.Responses._Error.Body.jsonPayload)
                /// The associated value of the enum case if `self` is `.json`.
                ///
                /// - Throws: An error if `self` is not `.json`.
                /// - SeeAlso: `.json`.
                public var json: Components.Responses._Error.Body.jsonPayload {
                    get throws {
                        switch self {
                        case let .json(body): return body
                        }
                    }
                }
            }
            /// Received HTTP response body
            public var body: Components.Responses._Error.Body
            /// Creates a new `_Error`.
            ///
            /// - Parameters:
            ///   - body: Received HTTP response body
            public init(body: Components.Responses._Error.Body) { self.body = body }
        }
    }
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Get blockchain block data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/get(getBlockchainBlock)`.
    public enum getBlockchainBlock {
        public static let id: Swift.String = "getBlockchainBlock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID
                public init(block_id: Components.Parameters.blockchainBlockIDParameter) { self.block_id = block_id }
            }
            public var path: Operations.getBlockchainBlock.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlockchainBlock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainBlock.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainBlock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainBlock.Input.Path,
                headers: Operations.getBlockchainBlock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainBlock)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainBlock {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainBlock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainBlock.Output.Ok.Body) { self.body = body }
            }
            /// blockchain block
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/get(getBlockchainBlock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainBlock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainBlock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/get(getBlockchainBlock)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get blockchain block shards
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/shards`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/shards/get(getBlockchainMasterchainShards)`.
    public enum getBlockchainMasterchainShards {
        public static let id: Swift.String = "getBlockchainMasterchainShards"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/shards/GET/path`.
            public struct Path: Sendable, Hashable {
                /// masterchain block seqno
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/shards/GET/path/masterchain_seqno`.
                public var masterchain_seqno: Components.Parameters.masterchainSeqno
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - masterchain_seqno: masterchain block seqno
                public init(masterchain_seqno: Components.Parameters.masterchainSeqno) {
                    self.masterchain_seqno = masterchain_seqno
                }
            }
            public var path: Operations.getBlockchainMasterchainShards.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/shards/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainShards.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainShards.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainMasterchainShards.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainMasterchainShards.Input.Path,
                headers: Operations.getBlockchainMasterchainShards.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/shards/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/shards/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainBlockShards)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainBlockShards {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainMasterchainShards.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainMasterchainShards.Output.Ok.Body) { self.body = body }
            }
            /// blockchain block shards
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/shards/get(getBlockchainMasterchainShards)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainMasterchainShards.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainMasterchainShards.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/shards/get(getBlockchainMasterchainShards)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all blocks in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain.  We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/blocks`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/blocks/get(getBlockchainMasterchainBlocks)`.
    public enum getBlockchainMasterchainBlocks {
        public static let id: Swift.String = "getBlockchainMasterchainBlocks"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/blocks/GET/path`.
            public struct Path: Sendable, Hashable {
                /// masterchain block seqno
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/blocks/GET/path/masterchain_seqno`.
                public var masterchain_seqno: Components.Parameters.masterchainSeqno
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - masterchain_seqno: masterchain block seqno
                public init(masterchain_seqno: Components.Parameters.masterchainSeqno) {
                    self.masterchain_seqno = masterchain_seqno
                }
            }
            public var path: Operations.getBlockchainMasterchainBlocks.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/blocks/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainBlocks.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainBlocks.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainMasterchainBlocks.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainMasterchainBlocks.Input.Path,
                headers: Operations.getBlockchainMasterchainBlocks.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/blocks/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/blocks/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainBlocks)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainBlocks {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainMasterchainBlocks.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainMasterchainBlocks.Output.Ok.Body) { self.body = body }
            }
            /// blockchain blocks
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/blocks/get(getBlockchainMasterchainBlocks)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainMasterchainBlocks.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainMasterchainBlocks.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/blocks/get(getBlockchainMasterchainBlocks)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all transactions in all shards and workchains between target and previous masterchain block according to shards last blocks snapshot in masterchain. We don't recommend to build your app around this method because it has problem with scalability and will work very slow in the future.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/transactions/get(getBlockchainMasterchainTransactions)`.
    public enum getBlockchainMasterchainTransactions {
        public static let id: Swift.String = "getBlockchainMasterchainTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/transactions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// masterchain block seqno
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/transactions/GET/path/masterchain_seqno`.
                public var masterchain_seqno: Components.Parameters.masterchainSeqno
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - masterchain_seqno: masterchain block seqno
                public init(masterchain_seqno: Components.Parameters.masterchainSeqno) {
                    self.masterchain_seqno = masterchain_seqno
                }
            }
            public var path: Operations.getBlockchainMasterchainTransactions.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/transactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainTransactions.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainTransactions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainMasterchainTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainMasterchainTransactions.Input.Path,
                headers: Operations.getBlockchainMasterchainTransactions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/transactions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/transactions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transactions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transactions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainMasterchainTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainMasterchainTransactions.Output.Ok.Body) { self.body = body }
            }
            /// blockchain transactions
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/transactions/get(getBlockchainMasterchainTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainMasterchainTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainMasterchainTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/transactions/get(getBlockchainMasterchainTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/get(getBlockchainConfigFromBlock)`.
    public enum getBlockchainConfigFromBlock {
        public static let id: Swift.String = "getBlockchainConfigFromBlock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/GET/path`.
            public struct Path: Sendable, Hashable {
                /// masterchain block seqno
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/GET/path/masterchain_seqno`.
                public var masterchain_seqno: Components.Parameters.masterchainSeqno
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - masterchain_seqno: masterchain block seqno
                public init(masterchain_seqno: Components.Parameters.masterchainSeqno) {
                    self.masterchain_seqno = masterchain_seqno
                }
            }
            public var path: Operations.getBlockchainConfigFromBlock.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainConfigFromBlock.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainConfigFromBlock.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainConfigFromBlock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainConfigFromBlock.Input.Path,
                headers: Operations.getBlockchainConfigFromBlock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainConfig)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainConfig {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainConfigFromBlock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainConfigFromBlock.Output.Ok.Body) { self.body = body }
            }
            /// blockchain config
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/get(getBlockchainConfigFromBlock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainConfigFromBlock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainConfigFromBlock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/get(getBlockchainConfigFromBlock)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw blockchain config from a specific block, if present.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain/{masterchain_seqno}/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/raw/get(getRawBlockchainConfigFromBlock)`.
    public enum getRawBlockchainConfigFromBlock {
        public static let id: Swift.String = "getRawBlockchainConfigFromBlock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/raw/GET/path`.
            public struct Path: Sendable, Hashable {
                /// masterchain block seqno
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/raw/GET/path/masterchain_seqno`.
                public var masterchain_seqno: Components.Parameters.masterchainSeqno
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - masterchain_seqno: masterchain block seqno
                public init(masterchain_seqno: Components.Parameters.masterchainSeqno) {
                    self.masterchain_seqno = masterchain_seqno
                }
            }
            public var path: Operations.getRawBlockchainConfigFromBlock.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/raw/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainConfigFromBlock.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainConfigFromBlock.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockchainConfigFromBlock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getRawBlockchainConfigFromBlock.Input.Path,
                headers: Operations.getRawBlockchainConfigFromBlock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/raw/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain/{masterchain_seqno}/config/raw/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RawBlockchainConfig)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RawBlockchainConfig {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockchainConfigFromBlock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockchainConfigFromBlock.Output.Ok.Body) { self.body = body }
            }
            /// blockchain config
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/raw/get(getRawBlockchainConfigFromBlock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockchainConfigFromBlock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockchainConfigFromBlock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain/{masterchain_seqno}/config/raw/get(getRawBlockchainConfigFromBlock)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get transactions from block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/blocks/{block_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/transactions/get(getBlockchainBlockTransactions)`.
    public enum getBlockchainBlockTransactions {
        public static let id: Swift.String = "getBlockchainBlockTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/transactions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/transactions/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID
                public init(block_id: Components.Parameters.blockchainBlockIDParameter) { self.block_id = block_id }
            }
            public var path: Operations.getBlockchainBlockTransactions.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/transactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainBlockTransactions.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainBlockTransactions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainBlockTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainBlockTransactions.Input.Path,
                headers: Operations.getBlockchainBlockTransactions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/transactions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/blocks/{block_id}/transactions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transactions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transactions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainBlockTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainBlockTransactions.Output.Ok.Body) { self.body = body }
            }
            /// blockchain block transactions
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/transactions/get(getBlockchainBlockTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainBlockTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainBlockTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/blocks/{block_id}/transactions/get(getBlockchainBlockTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get transaction data
    ///
    /// - Remark: HTTP `GET /v2/blockchain/transactions/{transaction_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/transactions/{transaction_id}/get(getBlockchainTransaction)`.
    public enum getBlockchainTransaction {
        public static let id: Swift.String = "getBlockchainTransaction"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/transactions/{transaction_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// transaction ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/transactions/{transaction_id}/GET/path/transaction_id`.
                public var transaction_id: Components.Parameters.transactionIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - transaction_id: transaction ID
                public init(transaction_id: Components.Parameters.transactionIDParameter) {
                    self.transaction_id = transaction_id
                }
            }
            public var path: Operations.getBlockchainTransaction.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/transactions/{transaction_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlockchainTransaction.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainTransaction.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainTransaction.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainTransaction.Input.Path,
                headers: Operations.getBlockchainTransaction.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/transactions/{transaction_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/transactions/{transaction_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transaction)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transaction {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainTransaction.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainTransaction.Output.Ok.Body) { self.body = body }
            }
            /// blockchain transaction
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/transactions/{transaction_id}/get(getBlockchainTransaction)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainTransaction.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainTransaction.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/transactions/{transaction_id}/get(getBlockchainTransaction)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get transaction data by message hash
    ///
    /// - Remark: HTTP `GET /v2/blockchain/messages/{msg_id}/transaction`.
    /// - Remark: Generated from `#/paths//v2/blockchain/messages/{msg_id}/transaction/get(getBlockchainTransactionByMessageHash)`.
    public enum getBlockchainTransactionByMessageHash {
        public static let id: Swift.String = "getBlockchainTransactionByMessageHash"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/messages/{msg_id}/transaction/GET/path`.
            public struct Path: Sendable, Hashable {
                /// message ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/messages/{msg_id}/transaction/GET/path/msg_id`.
                public var msg_id: Components.Parameters.messageIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - msg_id: message ID
                public init(msg_id: Components.Parameters.messageIDParameter) { self.msg_id = msg_id }
            }
            public var path: Operations.getBlockchainTransactionByMessageHash.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/messages/{msg_id}/transaction/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainTransactionByMessageHash.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainTransactionByMessageHash.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainTransactionByMessageHash.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainTransactionByMessageHash.Input.Path,
                headers: Operations.getBlockchainTransactionByMessageHash.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/messages/{msg_id}/transaction/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/messages/{msg_id}/transaction/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transaction)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transaction {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainTransactionByMessageHash.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainTransactionByMessageHash.Output.Ok.Body) { self.body = body }
            }
            /// transaction by message hash
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/messages/{msg_id}/transaction/get(getBlockchainTransactionByMessageHash)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainTransactionByMessageHash.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainTransactionByMessageHash.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/messages/{msg_id}/transaction/get(getBlockchainTransactionByMessageHash)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get blockchain validators
    ///
    /// - Remark: HTTP `GET /v2/blockchain/validators`.
    /// - Remark: Generated from `#/paths//v2/blockchain/validators/get(getBlockchainValidators)`.
    public enum getBlockchainValidators {
        public static let id: Swift.String = "getBlockchainValidators"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/validators/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlockchainValidators.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainValidators.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainValidators.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getBlockchainValidators.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/validators/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/validators/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Validators)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Validators {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainValidators.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainValidators.Output.Ok.Body) { self.body = body }
            }
            /// blockchain validators
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/validators/get(getBlockchainValidators)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainValidators.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainValidators.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/validators/get(getBlockchainValidators)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get last known masterchain block
    ///
    /// - Remark: HTTP `GET /v2/blockchain/masterchain-head`.
    /// - Remark: Generated from `#/paths//v2/blockchain/masterchain-head/get(getBlockchainMasterchainHead)`.
    public enum getBlockchainMasterchainHead {
        public static let id: Swift.String = "getBlockchainMasterchainHead"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/masterchain-head/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainHead.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainMasterchainHead.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainMasterchainHead.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getBlockchainMasterchainHead.Input.Headers = .init()) {
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/masterchain-head/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/masterchain-head/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainBlock)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainBlock {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainMasterchainHead.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainMasterchainHead.Output.Ok.Body) { self.body = body }
            }
            /// blockchain masterchain head
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain-head/get(getBlockchainMasterchainHead)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainMasterchainHead.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainMasterchainHead.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/masterchain-head/get(getBlockchainMasterchainHead)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get low-level information about an account taken directly from the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/get(getBlockchainRawAccount)`.
    public enum getBlockchainRawAccount {
        public static let id: Swift.String = "getBlockchainRawAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getBlockchainRawAccount.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlockchainRawAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainRawAccount.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainRawAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getBlockchainRawAccount.Input.Path,
                headers: Operations.getBlockchainRawAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainRawAccount)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainRawAccount {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainRawAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainRawAccount.Output.Ok.Body) { self.body = body }
            }
            /// raw account
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/get(getBlockchainRawAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainRawAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainRawAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/get(getBlockchainRawAccount)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get account transactions
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/transactions`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/transactions/get(getBlockchainAccountTransactions)`.
    public enum getBlockchainAccountTransactions {
        public static let id: Swift.String = "getBlockchainAccountTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getBlockchainAccountTransactions.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// omit this parameter to get last transactions
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/query/after_lt`.
                public var after_lt: Swift.Int64?
                /// omit this parameter to get last transactions
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/query/limit`.
                public var limit: Swift.Int32?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - after_lt: omit this parameter to get last transactions
                ///   - before_lt: omit this parameter to get last transactions
                ///   - limit:
                public init(after_lt: Swift.Int64? = nil, before_lt: Swift.Int64? = nil, limit: Swift.Int32? = nil) {
                    self.after_lt = after_lt
                    self.before_lt = before_lt
                    self.limit = limit
                }
            }
            public var query: Operations.getBlockchainAccountTransactions.Input.Query
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainAccountTransactions.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainAccountTransactions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainAccountTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getBlockchainAccountTransactions.Input.Path,
                query: Operations.getBlockchainAccountTransactions.Input.Query = .init(),
                headers: Operations.getBlockchainAccountTransactions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/transactions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Transactions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Transactions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainAccountTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainAccountTransactions.Output.Ok.Body) { self.body = body }
            }
            /// blockchain account transactions
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/transactions/get(getBlockchainAccountTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainAccountTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainAccountTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/transactions/get(getBlockchainAccountTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Execute get method for account
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/methods/{method_name}`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/methods/{method_name}/get(execGetMethodForBlockchainAccount)`.
    public enum execGetMethodForBlockchainAccount {
        public static let id: Swift.String = "execGetMethodForBlockchainAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// contract get method name
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/path/method_name`.
                public var method_name: Components.Parameters.methodNameParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                ///   - method_name: contract get method name
                public init(
                    account_id: Components.Parameters.accountIDParameter,
                    method_name: Components.Parameters.methodNameParameter
                ) {
                    self.account_id = account_id
                    self.method_name = method_name
                }
            }
            public var path: Operations.execGetMethodForBlockchainAccount.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/query/args`.
                public var args: [Swift.String]?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - args:
                public init(args: [Swift.String]? = nil) { self.args = args }
            }
            public var query: Operations.execGetMethodForBlockchainAccount.Input.Query
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.execGetMethodForBlockchainAccount.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.execGetMethodForBlockchainAccount.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.execGetMethodForBlockchainAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.execGetMethodForBlockchainAccount.Input.Path,
                query: Operations.execGetMethodForBlockchainAccount.Input.Query = .init(),
                headers: Operations.execGetMethodForBlockchainAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/methods/{method_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.MethodExecutionResult)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MethodExecutionResult {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.execGetMethodForBlockchainAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.execGetMethodForBlockchainAccount.Output.Ok.Body) { self.body = body }
            }
            /// method execution result
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/methods/{method_name}/get(execGetMethodForBlockchainAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.execGetMethodForBlockchainAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.execGetMethodForBlockchainAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/methods/{method_name}/get(execGetMethodForBlockchainAccount)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Send message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/blockchain/message`.
    /// - Remark: Generated from `#/paths//v2/blockchain/message/post(sendBlockchainMessage)`.
    public enum sendBlockchainMessage {
        public static let id: Swift.String = "sendBlockchainMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/message/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.sendBlockchainMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.sendBlockchainMessage.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.sendBlockchainMessage.Input.Headers
            public var body: Components.RequestBodies.BatchBoc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.sendBlockchainMessage.Input.Headers = .init(),
                body: Components.RequestBodies.BatchBoc
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// the message has been sent
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/message/post(sendBlockchainMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.sendBlockchainMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.sendBlockchainMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/message/post(sendBlockchainMessage)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/get(getBlockchainConfig)`.
    public enum getBlockchainConfig {
        public static let id: Swift.String = "getBlockchainConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/config/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getBlockchainConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getBlockchainConfig.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getBlockchainConfig.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getBlockchainConfig.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/config/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/config/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainConfig)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainConfig {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getBlockchainConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getBlockchainConfig.Output.Ok.Body) { self.body = body }
            }
            /// blockchain config
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/config/get(getBlockchainConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getBlockchainConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getBlockchainConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/config/get(getBlockchainConfig)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw blockchain config
    ///
    /// - Remark: HTTP `GET /v2/blockchain/config/raw`.
    /// - Remark: Generated from `#/paths//v2/blockchain/config/raw/get(getRawBlockchainConfig)`.
    public enum getRawBlockchainConfig {
        public static let id: Swift.String = "getRawBlockchainConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/config/raw/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawBlockchainConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainConfig.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockchainConfig.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getRawBlockchainConfig.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/config/raw/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/config/raw/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.RawBlockchainConfig)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.RawBlockchainConfig {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockchainConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockchainConfig.Output.Ok.Body) { self.body = body }
            }
            /// blockchain config
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/config/raw/get(getRawBlockchainConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockchainConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockchainConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/config/raw/get(getRawBlockchainConfig)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Blockchain account inspect
    ///
    /// - Remark: HTTP `GET /v2/blockchain/accounts/{account_id}/inspect`.
    /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/inspect/get(blockchainAccountInspect)`.
    public enum blockchainAccountInspect {
        public static let id: Swift.String = "blockchainAccountInspect"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/inspect/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/inspect/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.blockchainAccountInspect.Input.Path
            /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/inspect/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.blockchainAccountInspect.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.blockchainAccountInspect.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.blockchainAccountInspect.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.blockchainAccountInspect.Input.Path,
                headers: Operations.blockchainAccountInspect.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/inspect/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/blockchain/accounts/{account_id}/inspect/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.BlockchainAccountInspect)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.BlockchainAccountInspect {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.blockchainAccountInspect.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.blockchainAccountInspect.Output.Ok.Body) { self.body = body }
            }
            /// blockchain account inspect
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/inspect/get(blockchainAccountInspect)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.blockchainAccountInspect.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.blockchainAccountInspect.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/blockchain/accounts/{account_id}/inspect/get(blockchainAccountInspect)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Decode a given message. Only external incoming messages can be decoded currently.
    ///
    /// - Remark: HTTP `POST /v2/message/decode`.
    /// - Remark: Generated from `#/paths//v2/message/decode/post(decodeMessage)`.
    public enum decodeMessage {
        public static let id: Swift.String = "decodeMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/message/decode/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.decodeMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.decodeMessage.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.decodeMessage.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(headers: Operations.decodeMessage.Input.Headers = .init(), body: Components.RequestBodies.Boc) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/message/decode/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/message/decode/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.DecodedMessage)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DecodedMessage {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.decodeMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.decodeMessage.Output.Ok.Body) { self.body = body }
            }
            /// decoded message
            ///
            /// - Remark: Generated from `#/paths//v2/message/decode/post(decodeMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.decodeMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.decodeMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/message/decode/post(decodeMessage)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// parse address and display in all formats
    ///
    /// - Remark: HTTP `GET /v2/address/{account_id}/parse`.
    /// - Remark: Generated from `#/paths//v2/address/{account_id}/parse/get(addressParse)`.
    public enum addressParse {
        public static let id: Swift.String = "addressParse"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.addressParse.Input.Path
            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.addressParse.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.addressParse.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.addressParse.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.addressParse.Input.Path,
                headers: Operations.addressParse.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/raw_form`.
                        public var raw_form: Swift.String
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/bounceable`.
                        public struct bounceablePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/bounceable/b64`.
                            public var b64: Swift.String
                            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/bounceable/b64url`.
                            public var b64url: Swift.String
                            /// Creates a new `bounceablePayload`.
                            ///
                            /// - Parameters:
                            ///   - b64:
                            ///   - b64url:
                            public init(b64: Swift.String, b64url: Swift.String) {
                                self.b64 = b64
                                self.b64url = b64url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case b64
                                case b64url
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/bounceable`.
                        public var bounceable: Operations.addressParse.Output.Ok.Body.jsonPayload.bounceablePayload
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/non_bounceable`.
                        public struct non_bounceablePayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/non_bounceable/b64`.
                            public var b64: Swift.String
                            /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/non_bounceable/b64url`.
                            public var b64url: Swift.String
                            /// Creates a new `non_bounceablePayload`.
                            ///
                            /// - Parameters:
                            ///   - b64:
                            ///   - b64url:
                            public init(b64: Swift.String, b64url: Swift.String) {
                                self.b64 = b64
                                self.b64url = b64url
                            }
                            public enum CodingKeys: String, CodingKey {
                                case b64
                                case b64url
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/non_bounceable`.
                        public var non_bounceable:
                            Operations.addressParse.Output.Ok.Body.jsonPayload.non_bounceablePayload
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/given_type`.
                        public var given_type: Swift.String
                        /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/json/test_only`.
                        public var test_only: Swift.Bool
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - raw_form:
                        ///   - bounceable:
                        ///   - non_bounceable:
                        ///   - given_type:
                        ///   - test_only:
                        public init(
                            raw_form: Swift.String,
                            bounceable: Operations.addressParse.Output.Ok.Body.jsonPayload.bounceablePayload,
                            non_bounceable: Operations.addressParse.Output.Ok.Body.jsonPayload.non_bounceablePayload,
                            given_type: Swift.String,
                            test_only: Swift.Bool
                        ) {
                            self.raw_form = raw_form
                            self.bounceable = bounceable
                            self.non_bounceable = non_bounceable
                            self.given_type = given_type
                            self.test_only = test_only
                        }
                        public enum CodingKeys: String, CodingKey {
                            case raw_form
                            case bounceable
                            case non_bounceable
                            case given_type
                            case test_only
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/address/{account_id}/parse/GET/responses/200/content/application\/json`.
                    case json(Operations.addressParse.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.addressParse.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.addressParse.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.addressParse.Output.Ok.Body) { self.body = body }
            }
            /// all forms and info
            ///
            /// - Remark: Generated from `#/paths//v2/address/{account_id}/parse/get(addressParse)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.addressParse.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.addressParse.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/address/{account_id}/parse/get(addressParse)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/events/emulate/post(emulateMessageToEvent)`.
    public enum emulateMessageToEvent {
        public static let id: Swift.String = "emulateMessageToEvent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/events/emulate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/emulate/POST/query/ignore_signature_check`.
                public var ignore_signature_check: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ignore_signature_check:
                public init(ignore_signature_check: Swift.Bool? = nil) {
                    self.ignore_signature_check = ignore_signature_check
                }
            }
            public var query: Operations.emulateMessageToEvent.Input.Query
            /// - Remark: Generated from `#/paths/v2/events/emulate/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/emulate/POST/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.emulateMessageToEvent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToEvent.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.emulateMessageToEvent.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.emulateMessageToEvent.Input.Query = .init(),
                headers: Operations.emulateMessageToEvent.Input.Headers = .init(),
                body: Components.RequestBodies.Boc
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/emulate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/events/emulate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.emulateMessageToEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.emulateMessageToEvent.Output.Ok.Body) { self.body = body }
            }
            /// emulated event
            ///
            /// - Remark: Generated from `#/paths//v2/events/emulate/post(emulateMessageToEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.emulateMessageToEvent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.emulateMessageToEvent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/events/emulate/post(emulateMessageToEvent)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/traces/emulate`.
    /// - Remark: Generated from `#/paths//v2/traces/emulate/post(emulateMessageToTrace)`.
    public enum emulateMessageToTrace {
        public static let id: Swift.String = "emulateMessageToTrace"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/traces/emulate/POST/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/traces/emulate/POST/query/ignore_signature_check`.
                public var ignore_signature_check: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - ignore_signature_check:
                public init(ignore_signature_check: Swift.Bool? = nil) {
                    self.ignore_signature_check = ignore_signature_check
                }
            }
            public var query: Operations.emulateMessageToTrace.Input.Query
            /// - Remark: Generated from `#/paths/v2/traces/emulate/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.emulateMessageToTrace.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToTrace.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.emulateMessageToTrace.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            ///   - body:
            public init(
                query: Operations.emulateMessageToTrace.Input.Query = .init(),
                headers: Operations.emulateMessageToTrace.Input.Headers = .init(),
                body: Components.RequestBodies.Boc
            ) {
                self.query = query
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/traces/emulate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/traces/emulate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Trace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Trace {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.emulateMessageToTrace.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.emulateMessageToTrace.Output.Ok.Body) { self.body = body }
            }
            /// emulated trace
            ///
            /// - Remark: Generated from `#/paths//v2/traces/emulate/post(emulateMessageToTrace)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.emulateMessageToTrace.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.emulateMessageToTrace.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/traces/emulate/post(emulateMessageToTrace)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/wallet/emulate`.
    /// - Remark: Generated from `#/paths//v2/wallet/emulate/post(emulateMessageToWallet)`.
    public enum emulateMessageToWallet {
        public static let id: Swift.String = "emulateMessageToWallet"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/wallet/emulate/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/emulate/POST/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.emulateMessageToWallet.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToWallet.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.emulateMessageToWallet.Input.Headers
            public var body: Components.RequestBodies.EmulationBoc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.emulateMessageToWallet.Input.Headers = .init(),
                body: Components.RequestBodies.EmulationBoc
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/emulate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/wallet/emulate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.MessageConsequences)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.MessageConsequences {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.emulateMessageToWallet.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.emulateMessageToWallet.Output.Ok.Body) { self.body = body }
            }
            /// emulated message
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/emulate/post(emulateMessageToWallet)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.emulateMessageToWallet.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.emulateMessageToWallet.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/emulate/post(emulateMessageToWallet)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Emulate sending message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/events/emulate`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/emulate/post(emulateMessageToAccountEvent)`.
    public enum emulateMessageToAccountEvent {
        public static let id: Swift.String = "emulateMessageToAccountEvent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.emulateMessageToAccountEvent.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToAccountEvent.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.emulateMessageToAccountEvent.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.emulateMessageToAccountEvent.Input.Headers
            public var body: Components.RequestBodies.Boc
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            ///   - body:
            public init(
                path: Operations.emulateMessageToAccountEvent.Input.Path,
                headers: Operations.emulateMessageToAccountEvent.Input.Headers = .init(),
                body: Components.RequestBodies.Boc
            ) {
                self.path = path
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/emulate/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvent)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvent {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.emulateMessageToAccountEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.emulateMessageToAccountEvent.Output.Ok.Body) { self.body = body }
            }
            /// emulated message to account
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/emulate/post(emulateMessageToAccountEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.emulateMessageToAccountEvent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.emulateMessageToAccountEvent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/emulate/post(emulateMessageToAccountEvent)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get human-friendly information about several accounts without low-level details.
    ///
    /// - Remark: HTTP `POST /v2/accounts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/accounts/_bulk/post(getAccounts)`.
    public enum getAccounts {
        public static let id: Swift.String = "getAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/_bulk/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccounts.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccounts.Input.Headers
            public var body: Components.RequestBodies.AccountIDs?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getAccounts.Input.Headers = .init(),
                body: Components.RequestBodies.AccountIDs? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/_bulk/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/_bulk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.Accounts)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Accounts {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccounts.Output.Ok.Body) { self.body = body }
            }
            /// a list of accounts
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/_bulk/post(getAccounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/_bulk/post(getAccounts)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get human-friendly information about an account without low-level details.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/get(getAccount)`.
    public enum getAccount {
        public static let id: Swift.String = "getAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccount.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccount.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(path: Operations.getAccount.Input.Path, headers: Operations.getAccount.Input.Headers = .init())
            {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Account)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Account {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccount.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccount.Output.Ok.Body) { self.body = body }
            }
            /// account
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/get(getAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/get(getAccount)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get account's domains
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/backresolve`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/backresolve/get(accountDnsBackResolve)`.
    public enum accountDnsBackResolve {
        public static let id: Swift.String = "accountDnsBackResolve"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/backresolve/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/backresolve/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.accountDnsBackResolve.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/backresolve/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.accountDnsBackResolve.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.accountDnsBackResolve.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.accountDnsBackResolve.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.accountDnsBackResolve.Input.Path,
                headers: Operations.accountDnsBackResolve.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/backresolve/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/backresolve/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DomainNames)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DomainNames {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.accountDnsBackResolve.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.accountDnsBackResolve.Output.Ok.Body) { self.body = body }
            }
            /// account's domains
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/backresolve/get(accountDnsBackResolve)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.accountDnsBackResolve.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.accountDnsBackResolve.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/backresolve/get(accountDnsBackResolve)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all Jettons balances by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/get(getAccountJettonsBalances)`.
    public enum getAccountJettonsBalances {
        public static let id: Swift.String = "getAccountJettonsBalances"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountJettonsBalances.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/query`.
            public struct Query: Sendable, Hashable {
                /// accept ton and all possible fiat currencies, separated by commas
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/query/currencies`.
                public var currencies: Components.Parameters.currenciesQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - currencies: accept ton and all possible fiat currencies, separated by commas
                public init(currencies: Components.Parameters.currenciesQuery? = nil) { self.currencies = currencies }
            }
            public var query: Operations.getAccountJettonsBalances.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountJettonsBalances.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountJettonsBalances.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountJettonsBalances.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountJettonsBalances.Input.Path,
                query: Operations.getAccountJettonsBalances.Input.Query = .init(),
                headers: Operations.getAccountJettonsBalances.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.JettonsBalances)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JettonsBalances {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountJettonsBalances.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountJettonsBalances.Output.Ok.Body) { self.body = body }
            }
            /// account jettons balances
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/get(getAccountJettonsBalances)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountJettonsBalances.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountJettonsBalances.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/get(getAccountJettonsBalances)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the transfer jettons history for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/history/get(getAccountJettonsHistory)`.
    public enum getAccountJettonsHistory {
        public static let id: Swift.String = "getAccountJettonsHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountJettonsHistory.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// omit this parameter to get last events
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/query/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - before_lt: omit this parameter to get last events
                ///   - limit:
                ///   - start_date:
                ///   - end_date:
                public init(
                    before_lt: Swift.Int64? = nil,
                    limit: Swift.Int,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.before_lt = before_lt
                    self.limit = limit
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getAccountJettonsHistory.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountJettonsHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountJettonsHistory.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountJettonsHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountJettonsHistory.Input.Path,
                query: Operations.getAccountJettonsHistory.Input.Query,
                headers: Operations.getAccountJettonsHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvents)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvents {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountJettonsHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountJettonsHistory.Output.Ok.Body) { self.body = body }
            }
            /// account jettons history
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/history/get(getAccountJettonsHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountJettonsHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountJettonsHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/history/get(getAccountJettonsHistory)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the transfer jetton history for account and jetton
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/jettons/{jetton_id}/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/{jetton_id}/history/get(getAccountJettonHistoryByID)`.
    public enum getAccountJettonHistoryByID {
        public static let id: Swift.String = "getAccountJettonHistoryByID"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// jetton ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/path/jetton_id`.
                public var jetton_id: Components.Parameters.jettonIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                ///   - jetton_id: jetton ID
                public init(
                    account_id: Components.Parameters.accountIDParameter,
                    jetton_id: Components.Parameters.jettonIDParameter
                ) {
                    self.account_id = account_id
                    self.jetton_id = jetton_id
                }
            }
            public var path: Operations.getAccountJettonHistoryByID.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// omit this parameter to get last events
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/query/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - before_lt: omit this parameter to get last events
                ///   - limit:
                ///   - start_date:
                ///   - end_date:
                public init(
                    before_lt: Swift.Int64? = nil,
                    limit: Swift.Int,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.before_lt = before_lt
                    self.limit = limit
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getAccountJettonHistoryByID.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountJettonHistoryByID.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountJettonHistoryByID.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountJettonHistoryByID.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountJettonHistoryByID.Input.Path,
                query: Operations.getAccountJettonHistoryByID.Input.Query,
                headers: Operations.getAccountJettonHistoryByID.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/jettons/{jetton_id}/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvents)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvents {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountJettonHistoryByID.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountJettonHistoryByID.Output.Ok.Body) { self.body = body }
            }
            /// account jetton history
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/{jetton_id}/history/get(getAccountJettonHistoryByID)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountJettonHistoryByID.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountJettonHistoryByID.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/jettons/{jetton_id}/history/get(getAccountJettonHistoryByID)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all NFT items by owner address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/get(getAccountNftItems)`.
    public enum getAccountNftItems {
        public static let id: Swift.String = "getAccountNftItems"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountNftItems.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/query`.
            public struct Query: Sendable, Hashable {
                /// nft collection
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/query/collection`.
                public var collection: Components.Parameters.collectionQuery?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly.
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/query/indirect_ownership`.
                public var indirect_ownership: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - collection: nft collection
                ///   - limit:
                ///   - offset:
                ///   - indirect_ownership: Selling nft items in ton implemented usually via transfer items to special selling account. This option enables including items which owned not directly.
                public init(
                    collection: Components.Parameters.collectionQuery? = nil,
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil,
                    indirect_ownership: Swift.Bool? = nil
                ) {
                    self.collection = collection
                    self.limit = limit
                    self.offset = offset
                    self.indirect_ownership = indirect_ownership
                }
            }
            public var query: Operations.getAccountNftItems.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountNftItems.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountNftItems.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountNftItems.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountNftItems.Input.Path,
                query: Operations.getAccountNftItems.Input.Query = .init(),
                headers: Operations.getAccountNftItems.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftItems)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftItems {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountNftItems.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountNftItems.Output.Ok.Body) { self.body = body }
            }
            /// account nft items
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/get(getAccountNftItems)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountNftItems.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountNftItems.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/get(getAccountNftItems)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the transfer nft history
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/nfts/history`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/history/get(getAccountNftHistory)`.
    public enum getAccountNftHistory {
        public static let id: Swift.String = "getAccountNftHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountNftHistory.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// omit this parameter to get last events
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/query/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - before_lt: omit this parameter to get last events
                ///   - limit:
                ///   - start_date:
                ///   - end_date:
                public init(
                    before_lt: Swift.Int64? = nil,
                    limit: Swift.Int,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.before_lt = before_lt
                    self.limit = limit
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getAccountNftHistory.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountNftHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountNftHistory.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountNftHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountNftHistory.Input.Path,
                query: Operations.getAccountNftHistory.Input.Query,
                headers: Operations.getAccountNftHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/nfts/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvents)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvents {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountNftHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountNftHistory.Output.Ok.Body) { self.body = body }
            }
            /// nft history
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/history/get(getAccountNftHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountNftHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountNftHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/nfts/history/get(getAccountNftHistory)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get events for an account. Each event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/get(getAccountEvents)`.
    public enum getAccountEvents {
        public static let id: Swift.String = "getAccountEvents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountEvents.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query`.
            public struct Query: Sendable, Hashable {
                /// Show only events that are initiated by this account
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/initiator`.
                public var initiator: Components.Parameters.initiatorQuery?
                /// filter actions where requested account is not real subject (for example sender or receiver jettons)
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/subject_only`.
                public var subject_only: Swift.Bool?
                /// omit this parameter to get last events
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - initiator: Show only events that are initiated by this account
                ///   - subject_only: filter actions where requested account is not real subject (for example sender or receiver jettons)
                ///   - before_lt: omit this parameter to get last events
                ///   - limit:
                ///   - start_date:
                ///   - end_date:
                public init(
                    initiator: Components.Parameters.initiatorQuery? = nil,
                    subject_only: Swift.Bool? = nil,
                    before_lt: Swift.Int64? = nil,
                    limit: Swift.Int,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.initiator = initiator
                    self.subject_only = subject_only
                    self.before_lt = before_lt
                    self.limit = limit
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getAccountEvents.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountEvents.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountEvents.Input.Path,
                query: Operations.getAccountEvents.Input.Query,
                headers: Operations.getAccountEvents.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvents)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvents {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountEvents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountEvents.Output.Ok.Body) { self.body = body }
            }
            /// account's events
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/get(getAccountEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountEvents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/get(getAccountEvents)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get event for an account by event_id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/{event_id}/get(getAccountEvent)`.
    public enum getAccountEvent {
        public static let id: Swift.String = "getAccountEvent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// event ID or transaction hash in hex (without 0x) or base64url format
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/path/event_id`.
                public var event_id: Components.Parameters.eventIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                ///   - event_id: event ID or transaction hash in hex (without 0x) or base64url format
                public init(
                    account_id: Components.Parameters.accountIDParameter,
                    event_id: Components.Parameters.eventIDParameter
                ) {
                    self.account_id = account_id
                    self.event_id = event_id
                }
            }
            public var path: Operations.getAccountEvent.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// filter actions where requested account is not real subject (for example sender or receiver jettons)
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/query/subject_only`.
                public var subject_only: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - subject_only: filter actions where requested account is not real subject (for example sender or receiver jettons)
                public init(subject_only: Swift.Bool? = nil) { self.subject_only = subject_only }
            }
            public var query: Operations.getAccountEvent.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountEvent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountEvent.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getAccountEvent.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountEvent.Input.Path,
                query: Operations.getAccountEvent.Input.Query = .init(),
                headers: Operations.getAccountEvent.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/events/{event_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvent)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvent {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountEvent.Output.Ok.Body) { self.body = body }
            }
            /// account's event
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/{event_id}/get(getAccountEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountEvent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountEvent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/events/{event_id}/get(getAccountEvent)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get traces for account
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/traces`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/traces/get(getAccountTraces)`.
    public enum getAccountTraces {
        public static let id: Swift.String = "getAccountTraces"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountTraces.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/query/limit`.
                public var limit: Swift.Int?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                public init(limit: Swift.Int? = nil) { self.limit = limit }
            }
            public var query: Operations.getAccountTraces.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountTraces.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountTraces.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountTraces.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountTraces.Input.Path,
                query: Operations.getAccountTraces.Input.Query = .init(),
                headers: Operations.getAccountTraces.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/traces/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.TraceIDs)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.TraceIDs {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountTraces.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountTraces.Output.Ok.Body) { self.body = body }
            }
            /// account's traces
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/traces/get(getAccountTraces)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountTraces.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountTraces.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/traces/get(getAccountTraces)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all subscriptions by wallet address
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/subscriptions`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/subscriptions/get(getAccountSubscriptions)`.
    public enum getAccountSubscriptions {
        public static let id: Swift.String = "getAccountSubscriptions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/subscriptions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/subscriptions/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountSubscriptions.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/subscriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountSubscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountSubscriptions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountSubscriptions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAccountSubscriptions.Input.Path,
                headers: Operations.getAccountSubscriptions.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/subscriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/subscriptions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Subscriptions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Subscriptions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountSubscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountSubscriptions.Output.Ok.Body) { self.body = body }
            }
            /// account's subscriptions
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/subscriptions/get(getAccountSubscriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountSubscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountSubscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/subscriptions/get(getAccountSubscriptions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Update internal cache for a particular account
    ///
    /// - Remark: HTTP `POST /v2/accounts/{account_id}/reindex`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/reindex/post(reindexAccount)`.
    public enum reindexAccount {
        public static let id: Swift.String = "reindexAccount"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/reindex/POST/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/reindex/POST/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.reindexAccount.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/reindex/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.reindexAccount.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.reindexAccount.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.reindexAccount.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.reindexAccount.Input.Path,
                headers: Operations.reindexAccount.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// success
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/reindex/post(reindexAccount)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.reindexAccount.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.reindexAccount.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/reindex/post(reindexAccount)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Search by account domain name
    ///
    /// - Remark: HTTP `GET /v2/accounts/search`.
    /// - Remark: Generated from `#/paths//v2/accounts/search/get(searchAccounts)`.
    public enum searchAccounts {
        public static let id: Swift.String = "searchAccounts"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/search/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/search/GET/query/name`.
                public var name: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - name:
                public init(name: Swift.String) { self.name = name }
            }
            public var query: Operations.searchAccounts.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/search/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchAccounts.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.searchAccounts.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.searchAccounts.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.searchAccounts.Input.Query,
                headers: Operations.searchAccounts.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/search/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/search/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.FoundAccounts)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.FoundAccounts {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.searchAccounts.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.searchAccounts.Output.Ok.Body) { self.body = body }
            }
            /// found accounts
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/search/get(searchAccounts)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.searchAccounts.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.searchAccounts.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/search/get(searchAccounts)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get expiring account .ton dns
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/dns/expiring`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/expiring/get(getAccountDnsExpiring)`.
    public enum getAccountDnsExpiring {
        public static let id: Swift.String = "getAccountDnsExpiring"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountDnsExpiring.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/query`.
            public struct Query: Sendable, Hashable {
                /// number of days before expiration
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/query/period`.
                public var period: Components.Parameters.periodQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - period: number of days before expiration
                public init(period: Components.Parameters.periodQuery? = nil) { self.period = period }
            }
            public var query: Operations.getAccountDnsExpiring.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountDnsExpiring.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountDnsExpiring.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountDnsExpiring.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountDnsExpiring.Input.Path,
                query: Operations.getAccountDnsExpiring.Input.Query = .init(),
                headers: Operations.getAccountDnsExpiring.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/dns/expiring/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DnsExpiring)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DnsExpiring {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountDnsExpiring.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountDnsExpiring.Output.Ok.Body) { self.body = body }
            }
            /// account's expiring .ton dns
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/expiring/get(getAccountDnsExpiring)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountDnsExpiring.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountDnsExpiring.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/dns/expiring/get(getAccountDnsExpiring)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get public key by account id
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/publickey`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/publickey/get(getAccountPublicKey)`.
    public enum getAccountPublicKey {
        public static let id: Swift.String = "getAccountPublicKey"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountPublicKey.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountPublicKey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountPublicKey.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountPublicKey.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAccountPublicKey.Input.Path,
                headers: Operations.getAccountPublicKey.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/responses/200/content/json/public_key`.
                        public var public_key: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - public_key:
                        public init(public_key: Swift.String) { self.public_key = public_key }
                        public enum CodingKeys: String, CodingKey { case public_key }
                    }
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/publickey/GET/responses/200/content/application\/json`.
                    case json(Operations.getAccountPublicKey.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAccountPublicKey.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountPublicKey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountPublicKey.Output.Ok.Body) { self.body = body }
            }
            /// account's public key
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/publickey/get(getAccountPublicKey)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountPublicKey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountPublicKey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/publickey/get(getAccountPublicKey)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get account's balance change
    ///
    /// - Remark: HTTP `GET /v2/accounts/{account_id}/diff`.
    /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/diff/get(getAccountDiff)`.
    public enum getAccountDiff {
        public static let id: Swift.String = "getAccountDiff"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountDiff.Input.Path
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/query/start_date`.
                public var start_date: Swift.Int64
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/query/end_date`.
                public var end_date: Swift.Int64
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - start_date:
                ///   - end_date:
                public init(start_date: Swift.Int64, end_date: Swift.Int64) {
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getAccountDiff.Input.Query
            /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountDiff.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountDiff.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountDiff.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountDiff.Input.Path,
                query: Operations.getAccountDiff.Input.Query,
                headers: Operations.getAccountDiff.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/responses/200/content/json/balance_change`.
                        public var balance_change: Swift.Int64
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - balance_change:
                        public init(balance_change: Swift.Int64) { self.balance_change = balance_change }
                        public enum CodingKeys: String, CodingKey { case balance_change }
                    }
                    /// - Remark: Generated from `#/paths/v2/accounts/{account_id}/diff/GET/responses/200/content/application\/json`.
                    case json(Operations.getAccountDiff.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAccountDiff.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountDiff.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountDiff.Output.Ok.Body) { self.body = body }
            }
            /// account's balance change
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/diff/get(getAccountDiff)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountDiff.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountDiff.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/accounts/{account_id}/diff/get(getAccountDiff)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get full information about domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/get(getDnsInfo)`.
    public enum getDnsInfo {
        public static let id: Swift.String = "getDnsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// domain name with .ton or .t.me
                ///
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/GET/path/domain_name`.
                public var domain_name: Components.Parameters.domainNameParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - domain_name: domain name with .ton or .t.me
                public init(domain_name: Components.Parameters.domainNameParameter) { self.domain_name = domain_name }
            }
            public var path: Operations.getDnsInfo.Input.Path
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDnsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDnsInfo.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getDnsInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(path: Operations.getDnsInfo.Input.Path, headers: Operations.getDnsInfo.Input.Headers = .init())
            {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DomainInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DomainInfo {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getDnsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getDnsInfo.Output.Ok.Body) { self.body = body }
            }
            /// domain info
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/get(getDnsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getDnsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getDnsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/get(getDnsInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// DNS resolve for domain name
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/resolve`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/resolve/get(dnsResolve)`.
    public enum dnsResolve {
        public static let id: Swift.String = "dnsResolve"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/resolve/GET/path`.
            public struct Path: Sendable, Hashable {
                /// domain name with .ton or .t.me
                ///
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/resolve/GET/path/domain_name`.
                public var domain_name: Components.Parameters.domainNameParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - domain_name: domain name with .ton or .t.me
                public init(domain_name: Components.Parameters.domainNameParameter) { self.domain_name = domain_name }
            }
            public var path: Operations.dnsResolve.Input.Path
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/resolve/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dnsResolve.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.dnsResolve.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.dnsResolve.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(path: Operations.dnsResolve.Input.Path, headers: Operations.dnsResolve.Input.Headers = .init())
            {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/resolve/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/resolve/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DnsRecord)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DnsRecord {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.dnsResolve.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.dnsResolve.Output.Ok.Body) { self.body = body }
            }
            /// dns record
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/resolve/get(dnsResolve)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.dnsResolve.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.dnsResolve.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/resolve/get(dnsResolve)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get domain bids
    ///
    /// - Remark: HTTP `GET /v2/dns/{domain_name}/bids`.
    /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/bids/get(getDomainBids)`.
    public enum getDomainBids {
        public static let id: Swift.String = "getDomainBids"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/bids/GET/path`.
            public struct Path: Sendable, Hashable {
                /// domain name with .ton or .t.me
                ///
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/bids/GET/path/domain_name`.
                public var domain_name: Components.Parameters.domainNameParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - domain_name: domain name with .ton or .t.me
                public init(domain_name: Components.Parameters.domainNameParameter) { self.domain_name = domain_name }
            }
            public var path: Operations.getDomainBids.Input.Path
            /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/bids/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDomainBids.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getDomainBids.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getDomainBids.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getDomainBids.Input.Path,
                headers: Operations.getDomainBids.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/bids/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/dns/{domain_name}/bids/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.DomainBids)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.DomainBids {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getDomainBids.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getDomainBids.Output.Ok.Body) { self.body = body }
            }
            /// domain bids
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/bids/get(getDomainBids)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getDomainBids.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getDomainBids.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/dns/{domain_name}/bids/get(getDomainBids)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all auctions
    ///
    /// - Remark: HTTP `GET /v2/dns/auctions`.
    /// - Remark: Generated from `#/paths//v2/dns/auctions/get(getAllAuctions)`.
    public enum getAllAuctions {
        public static let id: Swift.String = "getAllAuctions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/dns/auctions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// domain filter for current auctions "ton" or "t.me"
                ///
                /// - Remark: Generated from `#/paths/v2/dns/auctions/GET/query/tld`.
                public var tld: Components.Parameters.domainFilterQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tld: domain filter for current auctions "ton" or "t.me"
                public init(tld: Components.Parameters.domainFilterQuery? = nil) { self.tld = tld }
            }
            public var query: Operations.getAllAuctions.Input.Query
            /// - Remark: Generated from `#/paths/v2/dns/auctions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllAuctions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllAuctions.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAllAuctions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getAllAuctions.Input.Query = .init(),
                headers: Operations.getAllAuctions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/dns/auctions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/dns/auctions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Auctions)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Auctions {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllAuctions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllAuctions.Output.Ok.Body) { self.body = body }
            }
            /// auctions
            ///
            /// - Remark: Generated from `#/paths//v2/dns/auctions/get(getAllAuctions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllAuctions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllAuctions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/dns/auctions/get(getAllAuctions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get NFT collections
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/get(getNftCollections)`.
    public enum getNftCollections {
        public static let id: Swift.String = "getNftCollections"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/query/limit`.
                public var limit: Swift.Int32?
                /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/query/offset`.
                public var offset: Swift.Int32?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(limit: Swift.Int32? = nil, offset: Swift.Int32? = nil) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getNftCollections.Input.Query
            /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNftCollections.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getNftCollections.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getNftCollections.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getNftCollections.Input.Query = .init(),
                headers: Operations.getNftCollections.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/collections/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftCollections)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftCollections {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getNftCollections.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getNftCollections.Output.Ok.Body) { self.body = body }
            }
            /// nft collections
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/get(getNftCollections)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNftCollections.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getNftCollections.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/get(getNftCollections)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get NFT collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/get(getNftCollection)`.
    public enum getNftCollection {
        public static let id: Swift.String = "getNftCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getNftCollection.Input.Path
            /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNftCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getNftCollection.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getNftCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getNftCollection.Input.Path,
                headers: Operations.getNftCollection.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftCollection)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftCollection {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getNftCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getNftCollection.Output.Ok.Body) { self.body = body }
            }
            /// nft collection
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/get(getNftCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNftCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getNftCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/get(getNftCollection)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get NFT items from collection by collection address
    ///
    /// - Remark: HTTP `GET /v2/nfts/collections/{account_id}/items`.
    /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/items/get(getItemsFromCollection)`.
    public enum getItemsFromCollection {
        public static let id: Swift.String = "getItemsFromCollection"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getItemsFromCollection.Input.Path
            /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getItemsFromCollection.Input.Query
            /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getItemsFromCollection.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getItemsFromCollection.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getItemsFromCollection.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getItemsFromCollection.Input.Path,
                query: Operations.getItemsFromCollection.Input.Query = .init(),
                headers: Operations.getItemsFromCollection.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/collections/{account_id}/items/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftItems)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftItems {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getItemsFromCollection.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getItemsFromCollection.Output.Ok.Body) { self.body = body }
            }
            /// nft items
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/items/get(getItemsFromCollection)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getItemsFromCollection.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getItemsFromCollection.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/collections/{account_id}/items/get(getItemsFromCollection)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get NFT items by their addresses
    ///
    /// - Remark: HTTP `POST /v2/nfts/_bulk`.
    /// - Remark: Generated from `#/paths//v2/nfts/_bulk/post(getNftItemsByAddresses)`.
    public enum getNftItemsByAddresses {
        public static let id: Swift.String = "getNftItemsByAddresses"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/_bulk/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNftItemsByAddresses.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getNftItemsByAddresses.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getNftItemsByAddresses.Input.Headers
            public var body: Components.RequestBodies.AccountIDs?
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getNftItemsByAddresses.Input.Headers = .init(),
                body: Components.RequestBodies.AccountIDs? = nil
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/_bulk/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/_bulk/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftItems)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftItems {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getNftItemsByAddresses.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getNftItemsByAddresses.Output.Ok.Body) { self.body = body }
            }
            /// nft items
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/_bulk/post(getNftItemsByAddresses)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNftItemsByAddresses.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getNftItemsByAddresses.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/_bulk/post(getNftItemsByAddresses)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get NFT item by its address
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/get(getNftItemByAddress)`.
    public enum getNftItemByAddress {
        public static let id: Swift.String = "getNftItemByAddress"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getNftItemByAddress.Input.Path
            /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNftItemByAddress.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getNftItemByAddress.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getNftItemByAddress.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getNftItemByAddress.Input.Path,
                headers: Operations.getNftItemByAddress.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.NftItem)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.NftItem {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getNftItemByAddress.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getNftItemByAddress.Output.Ok.Body) { self.body = body }
            }
            /// nft item
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/get(getNftItemByAddress)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNftItemByAddress.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getNftItemByAddress.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/get(getNftItemByAddress)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the transfer nfts history for account
    ///
    /// - Remark: HTTP `GET /v2/nfts/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/history/get(getNftHistoryByID)`.
    public enum getNftHistoryByID {
        public static let id: Swift.String = "getNftHistoryByID"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getNftHistoryByID.Input.Path
            /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/query`.
            public struct Query: Sendable, Hashable {
                /// omit this parameter to get last events
                ///
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/query/before_lt`.
                public var before_lt: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/query/limit`.
                public var limit: Swift.Int
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - before_lt: omit this parameter to get last events
                ///   - limit:
                ///   - start_date:
                ///   - end_date:
                public init(
                    before_lt: Swift.Int64? = nil,
                    limit: Swift.Int,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.before_lt = before_lt
                    self.limit = limit
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getNftHistoryByID.Input.Query
            /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getNftHistoryByID.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getNftHistoryByID.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getNftHistoryByID.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getNftHistoryByID.Input.Path,
                query: Operations.getNftHistoryByID.Input.Query,
                headers: Operations.getNftHistoryByID.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/nfts/{account_id}/history/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountEvents)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountEvents {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getNftHistoryByID.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getNftHistoryByID.Output.Ok.Body) { self.body = body }
            }
            /// nft history
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/history/get(getNftHistoryByID)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getNftHistoryByID.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getNftHistoryByID.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/nfts/{account_id}/history/get(getNftHistoryByID)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the trace by trace ID or hash of any transaction in trace
    ///
    /// - Remark: HTTP `GET /v2/traces/{trace_id}`.
    /// - Remark: Generated from `#/paths//v2/traces/{trace_id}/get(getTrace)`.
    public enum getTrace {
        public static let id: Swift.String = "getTrace"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/traces/{trace_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// trace ID or transaction hash in hex (without 0x) or base64url format
                ///
                /// - Remark: Generated from `#/paths/v2/traces/{trace_id}/GET/path/trace_id`.
                public var trace_id: Components.Parameters.traceIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - trace_id: trace ID or transaction hash in hex (without 0x) or base64url format
                public init(trace_id: Components.Parameters.traceIDParameter) { self.trace_id = trace_id }
            }
            public var path: Operations.getTrace.Input.Path
            /// - Remark: Generated from `#/paths/v2/traces/{trace_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTrace.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTrace.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getTrace.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(path: Operations.getTrace.Input.Path, headers: Operations.getTrace.Input.Headers = .init()) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/traces/{trace_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/traces/{trace_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Trace)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Trace {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTrace.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTrace.Output.Ok.Body) { self.body = body }
            }
            /// trace
            ///
            /// - Remark: Generated from `#/paths//v2/traces/{trace_id}/get(getTrace)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTrace.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTrace.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/traces/{trace_id}/get(getTrace)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get an event either by event ID or a hash of any transaction in a trace. An event is built on top of a trace which is a series of transactions caused by one inbound message. TonAPI looks for known patterns inside the trace and splits the trace into actions, where a single action represents a meaningful high-level operation like a Jetton Transfer or an NFT Purchase. Actions are expected to be shown to users. It is advised not to build any logic on top of actions because actions can be changed at any time.
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/get(getEvent)`.
    public enum getEvent {
        public static let id: Swift.String = "getEvent"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// event ID or transaction hash in hex (without 0x) or base64url format
                ///
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/path/event_id`.
                public var event_id: Components.Parameters.eventIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - event_id: event ID or transaction hash in hex (without 0x) or base64url format
                public init(event_id: Components.Parameters.eventIDParameter) { self.event_id = event_id }
            }
            public var path: Operations.getEvent.Input.Path
            /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvent.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getEvent.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getEvent.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(path: Operations.getEvent.Input.Path, headers: Operations.getEvent.Input.Headers = .init()) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/events/{event_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getEvent.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getEvent.Output.Ok.Body) { self.body = body }
            }
            /// event
            ///
            /// - Remark: Generated from `#/paths//v2/events/{event_id}/get(getEvent)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getEvent.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getEvent.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/events/{event_id}/get(getEvent)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all inscriptions by owner address. It's experimental API and can be dropped in the future.
    ///
    /// - Remark: HTTP `GET /v2/experimental/accounts/{account_id}/inscriptions`.
    /// - Remark: Generated from `#/paths//v2/experimental/accounts/{account_id}/inscriptions/get(getAccountInscriptions)`.
    public enum getAccountInscriptions {
        public static let id: Swift.String = "getAccountInscriptions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountInscriptions.Input.Path
            /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getAccountInscriptions.Input.Query
            /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountInscriptions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountInscriptions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountInscriptions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getAccountInscriptions.Input.Path,
                query: Operations.getAccountInscriptions.Input.Query = .init(),
                headers: Operations.getAccountInscriptions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/experimental/accounts/{account_id}/inscriptions/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.InscriptionBalances)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.InscriptionBalances {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountInscriptions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountInscriptions.Output.Ok.Body) { self.body = body }
            }
            /// account inscriptions
            ///
            /// - Remark: Generated from `#/paths//v2/experimental/accounts/{account_id}/inscriptions/get(getAccountInscriptions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountInscriptions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountInscriptions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/experimental/accounts/{account_id}/inscriptions/get(getAccountInscriptions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// return comment for making operation with instrospection. please don't use it if you don't know what you are doing
    ///
    /// - Remark: HTTP `GET /v2/experimental/inscriptions/op-template`.
    /// - Remark: Generated from `#/paths//v2/experimental/inscriptions/op-template/get(getInscriptionOpTemplate)`.
    public enum getInscriptionOpTemplate {
        public static let id: Swift.String = "getInscriptionOpTemplate"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/type`.
                @frozen public enum _typePayload: String, Codable, Hashable, Sendable {
                    case ton20 = "ton20"
                    case gram20 = "gram20"
                }
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/type`.
                public var _type: Operations.getInscriptionOpTemplate.Input.Query._typePayload
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/destination`.
                public var destination: Swift.String?
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/comment`.
                public var comment: Swift.String?
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/operation`.
                @frozen public enum operationPayload: String, Codable, Hashable, Sendable { case transfer = "transfer" }
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/operation`.
                public var operation: Operations.getInscriptionOpTemplate.Input.Query.operationPayload
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/amount`.
                public var amount: Swift.String
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/ticker`.
                public var ticker: Swift.String
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/query/who`.
                public var who: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - _type:
                ///   - destination:
                ///   - comment:
                ///   - operation:
                ///   - amount:
                ///   - ticker:
                ///   - who:
                public init(
                    _type: Operations.getInscriptionOpTemplate.Input.Query._typePayload,
                    destination: Swift.String? = nil,
                    comment: Swift.String? = nil,
                    operation: Operations.getInscriptionOpTemplate.Input.Query.operationPayload,
                    amount: Swift.String,
                    ticker: Swift.String,
                    who: Swift.String
                ) {
                    self._type = _type
                    self.destination = destination
                    self.comment = comment
                    self.operation = operation
                    self.amount = amount
                    self.ticker = ticker
                    self.who = who
                }
            }
            public var query: Operations.getInscriptionOpTemplate.Input.Query
            /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getInscriptionOpTemplate.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getInscriptionOpTemplate.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getInscriptionOpTemplate.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getInscriptionOpTemplate.Input.Query,
                headers: Operations.getInscriptionOpTemplate.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/responses/200/content/json/comment`.
                        public var comment: Swift.String
                        /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/responses/200/content/json/destination`.
                        public var destination: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - comment:
                        ///   - destination:
                        public init(comment: Swift.String, destination: Swift.String) {
                            self.comment = comment
                            self.destination = destination
                        }
                        public enum CodingKeys: String, CodingKey {
                            case comment
                            case destination
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/experimental/inscriptions/op-template/GET/responses/200/content/application\/json`.
                    case json(Operations.getInscriptionOpTemplate.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getInscriptionOpTemplate.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getInscriptionOpTemplate.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getInscriptionOpTemplate.Output.Ok.Body) { self.body = body }
            }
            /// inscription op template
            ///
            /// - Remark: Generated from `#/paths//v2/experimental/inscriptions/op-template/get(getInscriptionOpTemplate)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getInscriptionOpTemplate.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getInscriptionOpTemplate.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/experimental/inscriptions/op-template/get(getInscriptionOpTemplate)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get a list of all indexed jetton masters in the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/jettons`.
    /// - Remark: Generated from `#/paths//v2/jettons/get(getJettons)`.
    public enum getJettons {
        public static let id: Swift.String = "getJettons"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/jettons/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/jettons/GET/query/limit`.
                public var limit: Swift.Int32?
                /// - Remark: Generated from `#/paths/v2/jettons/GET/query/offset`.
                public var offset: Swift.Int32?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(limit: Swift.Int32? = nil, offset: Swift.Int32? = nil) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getJettons.Input.Query
            /// - Remark: Generated from `#/paths/v2/jettons/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettons.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettons.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getJettons.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getJettons.Input.Query = .init(),
                headers: Operations.getJettons.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/jettons/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/jettons/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Jettons)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Jettons {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJettons.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJettons.Output.Ok.Body) { self.body = body }
            }
            /// a list of jettons
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/get(getJettons)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getJettons.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getJettons.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/get(getJettons)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get jetton metadata by jetton master address
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/get(getJettonInfo)`.
    public enum getJettonInfo {
        public static let id: Swift.String = "getJettonInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getJettonInfo.Input.Path
            /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettonInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettonInfo.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getJettonInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getJettonInfo.Input.Path,
                headers: Operations.getJettonInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.JettonInfo)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JettonInfo {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJettonInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJettonInfo.Output.Ok.Body) { self.body = body }
            }
            /// jetton info
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/get(getJettonInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getJettonInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getJettonInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/get(getJettonInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get jetton's holders
    ///
    /// - Remark: HTTP `GET /v2/jettons/{account_id}/holders`.
    /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/holders/get(getJettonHolders)`.
    public enum getJettonHolders {
        public static let id: Swift.String = "getJettonHolders"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getJettonHolders.Input.Path
            /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/query`.
            public struct Query: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/query/limit`.
                public var limit: Components.Parameters.limitQuery?
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/query/offset`.
                public var offset: Components.Parameters.offsetQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - limit:
                ///   - offset:
                public init(
                    limit: Components.Parameters.limitQuery? = nil,
                    offset: Components.Parameters.offsetQuery? = nil
                ) {
                    self.limit = limit
                    self.offset = offset
                }
            }
            public var query: Operations.getJettonHolders.Input.Query
            /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettonHolders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getJettonHolders.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getJettonHolders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getJettonHolders.Input.Path,
                query: Operations.getJettonHolders.Input.Query = .init(),
                headers: Operations.getJettonHolders.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/jettons/{account_id}/holders/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.JettonHolders)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.JettonHolders {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJettonHolders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJettonHolders.Output.Ok.Body) { self.body = body }
            }
            /// jetton's holders
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/holders/get(getJettonHolders)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getJettonHolders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getJettonHolders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/jettons/{account_id}/holders/get(getJettonHolders)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get only jetton transfers in the event
    ///
    /// - Remark: HTTP `GET /v2/events/{event_id}/jettons`.
    /// - Remark: Generated from `#/paths//v2/events/{event_id}/jettons/get(getJettonsEvents)`.
    public enum getJettonsEvents {
        public static let id: Swift.String = "getJettonsEvents"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/path`.
            public struct Path: Sendable, Hashable {
                /// event ID or transaction hash in hex (without 0x) or base64url format
                ///
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/path/event_id`.
                public var event_id: Components.Parameters.eventIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - event_id: event ID or transaction hash in hex (without 0x) or base64url format
                public init(event_id: Components.Parameters.eventIDParameter) { self.event_id = event_id }
            }
            public var path: Operations.getJettonsEvents.Input.Path
            /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getJettonsEvents.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getJettonsEvents.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getJettonsEvents.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getJettonsEvents.Input.Path,
                headers: Operations.getJettonsEvents.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/events/{event_id}/jettons/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Event)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Event {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getJettonsEvents.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getJettonsEvents.Output.Ok.Body) { self.body = body }
            }
            /// events
            ///
            /// - Remark: Generated from `#/paths//v2/events/{event_id}/jettons/get(getJettonsEvents)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getJettonsEvents.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getJettonsEvents.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/events/{event_id}/jettons/get(getJettonsEvents)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// All pools where account participates
    ///
    /// - Remark: HTTP `GET /v2/staking/nominator/{account_id}/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/nominator/{account_id}/pools/get(getAccountNominatorsPools)`.
    public enum getAccountNominatorsPools {
        public static let id: Swift.String = "getAccountNominatorsPools"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/staking/nominator/{account_id}/pools/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/staking/nominator/{account_id}/pools/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountNominatorsPools.Input.Path
            /// - Remark: Generated from `#/paths/v2/staking/nominator/{account_id}/pools/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountNominatorsPools.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountNominatorsPools.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountNominatorsPools.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAccountNominatorsPools.Input.Path,
                headers: Operations.getAccountNominatorsPools.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/nominator/{account_id}/pools/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/staking/nominator/{account_id}/pools/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountStaking)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountStaking {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountNominatorsPools.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountNominatorsPools.Output.Ok.Body) { self.body = body }
            }
            /// account's pools
            ///
            /// - Remark: Generated from `#/paths//v2/staking/nominator/{account_id}/pools/get(getAccountNominatorsPools)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountNominatorsPools.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountNominatorsPools.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/staking/nominator/{account_id}/pools/get(getAccountNominatorsPools)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Stacking pool info
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/get(getStakingPoolInfo)`.
    public enum getStakingPoolInfo {
        public static let id: Swift.String = "getStakingPoolInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getStakingPoolInfo.Input.Path
            /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStakingPoolInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getStakingPoolInfo.AcceptableContentType
                    >] = .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getStakingPoolInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getStakingPoolInfo.Input.Path,
                headers: Operations.getStakingPoolInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/responses/200/content/json/implementation`.
                        public var implementation: Components.Schemas.PoolImplementation
                        /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/responses/200/content/json/pool`.
                        public var pool: Components.Schemas.PoolInfo
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - implementation:
                        ///   - pool:
                        public init(
                            implementation: Components.Schemas.PoolImplementation,
                            pool: Components.Schemas.PoolInfo
                        ) {
                            self.implementation = implementation
                            self.pool = pool
                        }
                        public enum CodingKeys: String, CodingKey {
                            case implementation
                            case pool
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getStakingPoolInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getStakingPoolInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStakingPoolInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStakingPoolInfo.Output.Ok.Body) { self.body = body }
            }
            /// stacking pool info
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/get(getStakingPoolInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStakingPoolInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStakingPoolInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/get(getStakingPoolInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Pool history
    ///
    /// - Remark: HTTP `GET /v2/staking/pool/{account_id}/history`.
    /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/history/get(getStakingPoolHistory)`.
    public enum getStakingPoolHistory {
        public static let id: Swift.String = "getStakingPoolHistory"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getStakingPoolHistory.Input.Path
            /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStakingPoolHistory.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getStakingPoolHistory.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getStakingPoolHistory.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getStakingPoolHistory.Input.Path,
                headers: Operations.getStakingPoolHistory.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/responses/200/content/json/apy`.
                        public var apy: [Components.Schemas.ApyHistory]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - apy:
                        public init(apy: [Components.Schemas.ApyHistory]) { self.apy = apy }
                        public enum CodingKeys: String, CodingKey { case apy }
                    }
                    /// - Remark: Generated from `#/paths/v2/staking/pool/{account_id}/history/GET/responses/200/content/application\/json`.
                    case json(Operations.getStakingPoolHistory.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getStakingPoolHistory.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStakingPoolHistory.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStakingPoolHistory.Output.Ok.Body) { self.body = body }
            }
            /// pool history
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/history/get(getStakingPoolHistory)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStakingPoolHistory.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStakingPoolHistory.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pool/{account_id}/history/get(getStakingPoolHistory)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// All pools available in network
    ///
    /// - Remark: HTTP `GET /v2/staking/pools`.
    /// - Remark: Generated from `#/paths//v2/staking/pools/get(getStakingPools)`.
    public enum getStakingPools {
        public static let id: Swift.String = "getStakingPools"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/staking/pools/GET/query`.
            public struct Query: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/staking/pools/GET/query/available_for`.
                public var available_for: Swift.String?
                /// return also pools not from white list - just compatible by interfaces (maybe dangerous!)
                ///
                /// - Remark: Generated from `#/paths/v2/staking/pools/GET/query/include_unverified`.
                public var include_unverified: Swift.Bool?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - available_for: account ID
                ///   - include_unverified: return also pools not from white list - just compatible by interfaces (maybe dangerous!)
                public init(available_for: Swift.String? = nil, include_unverified: Swift.Bool? = nil) {
                    self.available_for = available_for
                    self.include_unverified = include_unverified
                }
            }
            public var query: Operations.getStakingPools.Input.Query
            /// - Remark: Generated from `#/paths/v2/staking/pools/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/pools/GET/header/Accept-Language`.
                public var Accept_hyphen_Language: Components.Parameters.i18n?
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStakingPools.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - Accept_hyphen_Language:
                ///   - accept:
                public init(
                    Accept_hyphen_Language: Components.Parameters.i18n? = nil,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStakingPools.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.Accept_hyphen_Language = Accept_hyphen_Language
                    self.accept = accept
                }
            }
            public var headers: Operations.getStakingPools.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getStakingPools.Input.Query = .init(),
                headers: Operations.getStakingPools.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content/json/pools`.
                        public var pools: [Components.Schemas.PoolInfo]
                        /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content/json/implementations`.
                        public struct implementationsPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.PoolImplementation]
                            /// Creates a new `implementationsPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.PoolImplementation] = .init())
                            { self.additionalProperties = additionalProperties }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content/json/implementations`.
                        public var implementations:
                            Operations.getStakingPools.Output.Ok.Body.jsonPayload.implementationsPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - pools:
                        ///   - implementations:
                        public init(
                            pools: [Components.Schemas.PoolInfo],
                            implementations: Operations.getStakingPools.Output.Ok.Body.jsonPayload
                                .implementationsPayload
                        ) {
                            self.pools = pools
                            self.implementations = implementations
                        }
                        public enum CodingKeys: String, CodingKey {
                            case pools
                            case implementations
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/staking/pools/GET/responses/200/content/application\/json`.
                    case json(Operations.getStakingPools.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getStakingPools.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStakingPools.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStakingPools.Output.Ok.Body) { self.body = body }
            }
            /// a list of pools
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pools/get(getStakingPools)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStakingPools.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStakingPools.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/staking/pools/get(getStakingPools)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get TON storage providers deployed to the blockchain.
    ///
    /// - Remark: HTTP `GET /v2/storage/providers`.
    /// - Remark: Generated from `#/paths//v2/storage/providers/get(getStorageProviders)`.
    public enum getStorageProviders {
        public static let id: Swift.String = "getStorageProviders"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/storage/providers/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getStorageProviders.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getStorageProviders.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getStorageProviders.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getStorageProviders.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/storage/providers/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/storage/providers/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/storage/providers/GET/responses/200/content/json/providers`.
                        public var providers: [Components.Schemas.StorageProvider]
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - providers:
                        public init(providers: [Components.Schemas.StorageProvider]) { self.providers = providers }
                        public enum CodingKeys: String, CodingKey { case providers }
                    }
                    /// - Remark: Generated from `#/paths/v2/storage/providers/GET/responses/200/content/application\/json`.
                    case json(Operations.getStorageProviders.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getStorageProviders.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getStorageProviders.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getStorageProviders.Output.Ok.Body) { self.body = body }
            }
            /// a list of storage providers
            ///
            /// - Remark: Generated from `#/paths//v2/storage/providers/get(getStorageProviders)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getStorageProviders.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getStorageProviders.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/storage/providers/get(getStorageProviders)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get the token price to the currency
    ///
    /// - Remark: HTTP `GET /v2/rates`.
    /// - Remark: Generated from `#/paths//v2/rates/get(getRates)`.
    public enum getRates {
        public static let id: Swift.String = "getRates"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/rates/GET/query`.
            public struct Query: Sendable, Hashable {
                /// accept ton and jetton master addresses, separated by commas
                ///
                /// - Remark: Generated from `#/paths/v2/rates/GET/query/tokens`.
                public var tokens: Swift.String
                /// accept ton and all possible fiat currencies, separated by commas
                ///
                /// - Remark: Generated from `#/paths/v2/rates/GET/query/currencies`.
                public var currencies: Swift.String
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - tokens: accept ton and jetton master addresses, separated by commas
                ///   - currencies: accept ton and all possible fiat currencies, separated by commas
                public init(tokens: Swift.String, currencies: Swift.String) {
                    self.tokens = tokens
                    self.currencies = currencies
                }
            }
            public var query: Operations.getRates.Input.Query
            /// - Remark: Generated from `#/paths/v2/rates/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRates.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRates.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRates.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(query: Operations.getRates.Input.Query, headers: Operations.getRates.Input.Headers = .init()) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/rates/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/rates/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/rates/GET/responses/200/content/json/rates`.
                        public struct ratesPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: [String: Components.Schemas.TokenRates]
                            /// Creates a new `ratesPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: [String: Components.Schemas.TokenRates] = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/rates/GET/responses/200/content/json/rates`.
                        public var rates: Operations.getRates.Output.Ok.Body.jsonPayload.ratesPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - rates:
                        public init(rates: Operations.getRates.Output.Ok.Body.jsonPayload.ratesPayload) {
                            self.rates = rates
                        }
                        public enum CodingKeys: String, CodingKey { case rates }
                    }
                    /// - Remark: Generated from `#/paths/v2/rates/GET/responses/200/content/application\/json`.
                    case json(Operations.getRates.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRates.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRates.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRates.Output.Ok.Body) { self.body = body }
            }
            /// tokens rates
            ///
            /// - Remark: Generated from `#/paths//v2/rates/get(getRates)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRates.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRates.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/rates/get(getRates)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get chart by token
    ///
    /// - Remark: HTTP `GET /v2/rates/chart`.
    /// - Remark: Generated from `#/paths//v2/rates/chart/get(getChartRates)`.
    public enum getChartRates {
        public static let id: Swift.String = "getChartRates"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/rates/chart/GET/query`.
            public struct Query: Sendable, Hashable {
                /// accept jetton master address
                ///
                /// - Remark: Generated from `#/paths/v2/rates/chart/GET/query/token`.
                public var token: Swift.String
                /// - Remark: Generated from `#/paths/v2/rates/chart/GET/query/currency`.
                public var currency: Swift.String?
                /// - Remark: Generated from `#/paths/v2/rates/chart/GET/query/start_date`.
                public var start_date: Swift.Int64?
                /// - Remark: Generated from `#/paths/v2/rates/chart/GET/query/end_date`.
                public var end_date: Swift.Int64?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - token: accept jetton master address
                ///   - currency:
                ///   - start_date:
                ///   - end_date:
                public init(
                    token: Swift.String,
                    currency: Swift.String? = nil,
                    start_date: Swift.Int64? = nil,
                    end_date: Swift.Int64? = nil
                ) {
                    self.token = token
                    self.currency = currency
                    self.start_date = start_date
                    self.end_date = end_date
                }
            }
            public var query: Operations.getChartRates.Input.Query
            /// - Remark: Generated from `#/paths/v2/rates/chart/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChartRates.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getChartRates.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getChartRates.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getChartRates.Input.Query,
                headers: Operations.getChartRates.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/rates/chart/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/rates/chart/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/rates/chart/GET/responses/200/content/json/points`.
                        public struct pointsPayload: Codable, Hashable, Sendable {
                            /// A container of undocumented properties.
                            public var additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer
                            /// Creates a new `pointsPayload`.
                            ///
                            /// - Parameters:
                            ///   - additionalProperties: A container of undocumented properties.
                            public init(additionalProperties: OpenAPIRuntime.OpenAPIObjectContainer = .init()) {
                                self.additionalProperties = additionalProperties
                            }
                            public init(from decoder: any Decoder) throws {
                                additionalProperties = try decoder.decodeAdditionalProperties(knownKeys: [])
                            }
                            public func encode(to encoder: any Encoder) throws {
                                try encoder.encodeAdditionalProperties(additionalProperties)
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/rates/chart/GET/responses/200/content/json/points`.
                        public var points: Operations.getChartRates.Output.Ok.Body.jsonPayload.pointsPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - points:
                        public init(points: Operations.getChartRates.Output.Ok.Body.jsonPayload.pointsPayload) {
                            self.points = points
                        }
                        public enum CodingKeys: String, CodingKey { case points }
                    }
                    /// - Remark: Generated from `#/paths/v2/rates/chart/GET/responses/200/content/application\/json`.
                    case json(Operations.getChartRates.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getChartRates.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getChartRates.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getChartRates.Output.Ok.Body) { self.body = body }
            }
            /// token chart
            ///
            /// - Remark: Generated from `#/paths//v2/rates/chart/get(getChartRates)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getChartRates.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getChartRates.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/rates/chart/get(getChartRates)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get a payload for further token receipt
    ///
    /// - Remark: HTTP `GET /v2/tonconnect/payload`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/payload/get(getTonConnectPayload)`.
    public enum getTonConnectPayload {
        public static let id: Swift.String = "getTonConnectPayload"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/tonconnect/payload/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTonConnectPayload.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getTonConnectPayload.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getTonConnectPayload.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getTonConnectPayload.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/tonconnect/payload/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/tonconnect/payload/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/tonconnect/payload/GET/responses/200/content/json/payload`.
                        public var payload: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - payload:
                        public init(payload: Swift.String) { self.payload = payload }
                        public enum CodingKeys: String, CodingKey { case payload }
                    }
                    /// - Remark: Generated from `#/paths/v2/tonconnect/payload/GET/responses/200/content/application\/json`.
                    case json(Operations.getTonConnectPayload.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getTonConnectPayload.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTonConnectPayload.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTonConnectPayload.Output.Ok.Body) { self.body = body }
            }
            /// payload
            ///
            /// - Remark: Generated from `#/paths//v2/tonconnect/payload/get(getTonConnectPayload)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTonConnectPayload.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTonConnectPayload.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/tonconnect/payload/get(getTonConnectPayload)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get account info by state init
    ///
    /// - Remark: HTTP `POST /v2/tonconnect/stateinit`.
    /// - Remark: Generated from `#/paths//v2/tonconnect/stateinit/post(getAccountInfoByStateInit)`.
    public enum getAccountInfoByStateInit {
        public static let id: Swift.String = "getAccountInfoByStateInit"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/tonconnect/stateinit/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountInfoByStateInit.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAccountInfoByStateInit.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountInfoByStateInit.Input.Headers
            public var body: Components.RequestBodies.TonConnectStateInit
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.getAccountInfoByStateInit.Input.Headers = .init(),
                body: Components.RequestBodies.TonConnectStateInit
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/tonconnect/stateinit/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/tonconnect/stateinit/POST/responses/200/content/application\/json`.
                    case json(Components.Schemas.AccountInfoByStateInit)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.AccountInfoByStateInit {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountInfoByStateInit.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountInfoByStateInit.Output.Ok.Body) { self.body = body }
            }
            /// account info
            ///
            /// - Remark: Generated from `#/paths//v2/tonconnect/stateinit/post(getAccountInfoByStateInit)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountInfoByStateInit.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountInfoByStateInit.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/tonconnect/stateinit/post(getAccountInfoByStateInit)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get backup info
    ///
    /// - Remark: HTTP `GET /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/get(getWalletBackup)`.
    public enum getWalletBackup {
        public static let id: Swift.String = "getWalletBackup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Swift.String
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWalletBackup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWalletBackup.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.getWalletBackup.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getWalletBackup.Input.Headers) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/responses/200/content/json/dump`.
                        public var dump: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - dump:
                        public init(dump: Swift.String) { self.dump = dump }
                        public enum CodingKeys: String, CodingKey { case dump }
                    }
                    /// - Remark: Generated from `#/paths/v2/wallet/backup/GET/responses/200/content/application\/json`.
                    case json(Operations.getWalletBackup.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getWalletBackup.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWalletBackup.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWalletBackup.Output.Ok.Body) { self.body = body }
            }
            /// get wallet dump
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/backup/get(getWalletBackup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWalletBackup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWalletBackup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/backup/get(getWalletBackup)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Set backup info
    ///
    /// - Remark: HTTP `PUT /v2/wallet/backup`.
    /// - Remark: Generated from `#/paths//v2/wallet/backup/put(setWalletBackup)`.
    public enum setWalletBackup {
        public static let id: Swift.String = "setWalletBackup"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/wallet/backup/PUT/header`.
            public struct Headers: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/backup/PUT/header/X-TonConnect-Auth`.
                public var X_hyphen_TonConnect_hyphen_Auth: Swift.String
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.setWalletBackup.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - X_hyphen_TonConnect_hyphen_Auth:
                ///   - accept:
                public init(
                    X_hyphen_TonConnect_hyphen_Auth: Swift.String,
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.setWalletBackup.AcceptableContentType>] =
                        .defaultValues()
                ) {
                    self.X_hyphen_TonConnect_hyphen_Auth = X_hyphen_TonConnect_hyphen_Auth
                    self.accept = accept
                }
            }
            public var headers: Operations.setWalletBackup.Input.Headers
            public var body: Components.RequestBodies.Backup
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(headers: Operations.setWalletBackup.Input.Headers, body: Components.RequestBodies.Backup) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// Creates a new `Ok`.
                public init() {}
            }
            /// success
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/backup/put(setWalletBackup)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.setWalletBackup.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.setWalletBackup.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/backup/put(setWalletBackup)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Account verification and token issuance
    ///
    /// - Remark: HTTP `POST /v2/wallet/auth/proof`.
    /// - Remark: Generated from `#/paths//v2/wallet/auth/proof/post(tonConnectProof)`.
    public enum tonConnectProof {
        public static let id: Swift.String = "tonConnectProof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/wallet/auth/proof/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.tonConnectProof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.tonConnectProof.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.tonConnectProof.Input.Headers
            public var body: Components.RequestBodies.TonConnectProof
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.tonConnectProof.Input.Headers = .init(),
                body: Components.RequestBodies.TonConnectProof
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/auth/proof/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/wallet/auth/proof/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/wallet/auth/proof/POST/responses/200/content/json/token`.
                        public var token: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - token:
                        public init(token: Swift.String) { self.token = token }
                        public enum CodingKeys: String, CodingKey { case token }
                    }
                    /// - Remark: Generated from `#/paths/v2/wallet/auth/proof/POST/responses/200/content/application\/json`.
                    case json(Operations.tonConnectProof.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.tonConnectProof.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.tonConnectProof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.tonConnectProof.Output.Ok.Body) { self.body = body }
            }
            /// auth token
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/auth/proof/post(tonConnectProof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.tonConnectProof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.tonConnectProof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/auth/proof/post(tonConnectProof)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get wallets by public key
    ///
    /// - Remark: HTTP `GET /v2/pubkeys/{public_key}/wallets`.
    /// - Remark: Generated from `#/paths//v2/pubkeys/{public_key}/wallets/get(getWalletsByPublicKey)`.
    public enum getWalletsByPublicKey {
        public static let id: Swift.String = "getWalletsByPublicKey"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/pubkeys/{public_key}/wallets/GET/path`.
            public struct Path: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/pubkeys/{public_key}/wallets/GET/path/public_key`.
                public var public_key: Components.Parameters.publicKeyParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - public_key:
                public init(public_key: Components.Parameters.publicKeyParameter) { self.public_key = public_key }
            }
            public var path: Operations.getWalletsByPublicKey.Input.Path
            /// - Remark: Generated from `#/paths/v2/pubkeys/{public_key}/wallets/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getWalletsByPublicKey.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getWalletsByPublicKey.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getWalletsByPublicKey.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getWalletsByPublicKey.Input.Path,
                headers: Operations.getWalletsByPublicKey.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/pubkeys/{public_key}/wallets/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/pubkeys/{public_key}/wallets/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Accounts)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Accounts {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getWalletsByPublicKey.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getWalletsByPublicKey.Output.Ok.Body) { self.body = body }
            }
            /// a list of wallets
            ///
            /// - Remark: Generated from `#/paths//v2/pubkeys/{public_key}/wallets/get(getWalletsByPublicKey)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getWalletsByPublicKey.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getWalletsByPublicKey.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/pubkeys/{public_key}/wallets/get(getWalletsByPublicKey)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get account seqno
    ///
    /// - Remark: HTTP `GET /v2/wallet/{account_id}/seqno`.
    /// - Remark: Generated from `#/paths//v2/wallet/{account_id}/seqno/get(getAccountSeqno)`.
    public enum getAccountSeqno {
        public static let id: Swift.String = "getAccountSeqno"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/wallet/{account_id}/seqno/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/wallet/{account_id}/seqno/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getAccountSeqno.Input.Path
            /// - Remark: Generated from `#/paths/v2/wallet/{account_id}/seqno/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountSeqno.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAccountSeqno.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAccountSeqno.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAccountSeqno.Input.Path,
                headers: Operations.getAccountSeqno.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/wallet/{account_id}/seqno/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/wallet/{account_id}/seqno/GET/responses/200/content/application\/json`.
                    case json(Components.Schemas.Seqno)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Components.Schemas.Seqno {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAccountSeqno.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAccountSeqno.Output.Ok.Body) { self.body = body }
            }
            /// account seqno
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/{account_id}/seqno/get(getAccountSeqno)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAccountSeqno.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAccountSeqno.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/wallet/{account_id}/seqno/get(getAccountSeqno)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw masterchain info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info/get(getRawMasterchainInfo)`.
    public enum getRawMasterchainInfo {
        public static let id: Swift.String = "getRawMasterchainInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawMasterchainInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawMasterchainInfo.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawMasterchainInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getRawMasterchainInfo.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content/json/last`.
                        public var last: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content/json/state_root_hash`.
                        public var state_root_hash: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content/json/init`.
                        public var _init: Components.Schemas.InitStateRaw
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - last:
                        ///   - state_root_hash:
                        ///   - _init:
                        public init(
                            last: Components.Schemas.BlockRaw,
                            state_root_hash: Swift.String,
                            _init: Components.Schemas.InitStateRaw
                        ) {
                            self.last = last
                            self.state_root_hash = state_root_hash
                            self._init = _init
                        }
                        public enum CodingKeys: String, CodingKey {
                            case last
                            case state_root_hash
                            case _init = "init"
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawMasterchainInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawMasterchainInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawMasterchainInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawMasterchainInfo.Output.Ok.Body) { self.body = body }
            }
            /// raw masterchain info
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info/get(getRawMasterchainInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawMasterchainInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawMasterchainInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info/get(getRawMasterchainInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw masterchain info ext
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_masterchain_info_ext`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info_ext/get(getRawMasterchainInfoExt)`.
    public enum getRawMasterchainInfoExt {
        public static let id: Swift.String = "getRawMasterchainInfoExt"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/query`.
            public struct Query: Sendable, Hashable {
                /// mode
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/query/mode`.
                public var mode: Components.Parameters.modeQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - mode: mode
                public init(mode: Components.Parameters.modeQuery) { self.mode = mode }
            }
            public var query: Operations.getRawMasterchainInfoExt.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawMasterchainInfoExt.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawMasterchainInfoExt.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawMasterchainInfoExt.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getRawMasterchainInfoExt.Input.Query,
                headers: Operations.getRawMasterchainInfoExt.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/mode`.
                        public var mode: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/version`.
                        public var version: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/capabilities`.
                        public var capabilities: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/last`.
                        public var last: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/last_utime`.
                        public var last_utime: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/now`.
                        public var now: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/state_root_hash`.
                        public var state_root_hash: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/json/init`.
                        public var _init: Components.Schemas.InitStateRaw
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - mode:
                        ///   - version:
                        ///   - capabilities:
                        ///   - last:
                        ///   - last_utime:
                        ///   - now:
                        ///   - state_root_hash:
                        ///   - _init:
                        public init(
                            mode: Swift.Int,
                            version: Swift.Int,
                            capabilities: Swift.Int,
                            last: Components.Schemas.BlockRaw,
                            last_utime: Swift.Int,
                            now: Swift.Int,
                            state_root_hash: Swift.String,
                            _init: Components.Schemas.InitStateRaw
                        ) {
                            self.mode = mode
                            self.version = version
                            self.capabilities = capabilities
                            self.last = last
                            self.last_utime = last_utime
                            self.now = now
                            self.state_root_hash = state_root_hash
                            self._init = _init
                        }
                        public enum CodingKeys: String, CodingKey {
                            case mode
                            case version
                            case capabilities
                            case last
                            case last_utime
                            case now
                            case state_root_hash
                            case _init = "init"
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_masterchain_info_ext/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawMasterchainInfoExt.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawMasterchainInfoExt.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawMasterchainInfoExt.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawMasterchainInfoExt.Output.Ok.Body) { self.body = body }
            }
            /// raw masterchain info ext
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info_ext/get(getRawMasterchainInfoExt)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawMasterchainInfoExt.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawMasterchainInfoExt.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_masterchain_info_ext/get(getRawMasterchainInfoExt)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw time
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_time`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_time/get(getRawTime)`.
    public enum getRawTime {
        public static let id: Swift.String = "getRawTime"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_time/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawTime.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawTime.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawTime.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            public init(headers: Operations.getRawTime.Input.Headers = .init()) { self.headers = headers }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_time/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_time/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_time/GET/responses/200/content/json/time`.
                        public var time: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - time:
                        public init(time: Swift.Int) { self.time = time }
                        public enum CodingKeys: String, CodingKey { case time }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_time/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawTime.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawTime.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawTime.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawTime.Output.Ok.Body) { self.body = body }
            }
            /// raw time
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_time/get(getRawTime)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawTime.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawTime.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_time/get(getRawTime)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw blockchain block
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block/{block_id}/get(getRawBlockchainBlock)`.
    public enum getRawBlockchainBlock {
        public static let id: Swift.String = "getRawBlockchainBlock"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawBlockchainBlock.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawBlockchainBlock.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainBlock.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockchainBlock.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getRawBlockchainBlock.Input.Path,
                headers: Operations.getRawBlockchainBlock.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/responses/200/content/json/data`.
                        public var data: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - data:
                        public init(id: Components.Schemas.BlockRaw, data: Swift.String) {
                            self.id = id
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawBlockchainBlock.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawBlockchainBlock.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockchainBlock.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockchainBlock.Output.Ok.Body) { self.body = body }
            }
            /// raw blockchain block
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block/{block_id}/get(getRawBlockchainBlock)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockchainBlock.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockchainBlock.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block/{block_id}/get(getRawBlockchainBlock)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw blockchain block state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_state/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_state/{block_id}/get(getRawBlockchainBlockState)`.
    public enum getRawBlockchainBlockState {
        public static let id: Swift.String = "getRawBlockchainBlockState"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawBlockchainBlockState.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainBlockState.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainBlockState.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockchainBlockState.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getRawBlockchainBlockState.Input.Path,
                headers: Operations.getRawBlockchainBlockState.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/json/root_hash`.
                        public var root_hash: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/json/file_hash`.
                        public var file_hash: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/json/data`.
                        public var data: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - root_hash:
                        ///   - file_hash:
                        ///   - data:
                        public init(
                            id: Components.Schemas.BlockRaw,
                            root_hash: Swift.String,
                            file_hash: Swift.String,
                            data: Swift.String
                        ) {
                            self.id = id
                            self.root_hash = root_hash
                            self.file_hash = file_hash
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case root_hash
                            case file_hash
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_state/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawBlockchainBlockState.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawBlockchainBlockState.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockchainBlockState.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockchainBlockState.Output.Ok.Body) { self.body = body }
            }
            /// raw blockchain block state
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_state/{block_id}/get(getRawBlockchainBlockState)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockchainBlockState.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockchainBlockState.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_state/{block_id}/get(getRawBlockchainBlockState)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw blockchain block header
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_header/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_header/{block_id}/get(getRawBlockchainBlockHeader)`.
    public enum getRawBlockchainBlockHeader {
        public static let id: Swift.String = "getRawBlockchainBlockHeader"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawBlockchainBlockHeader.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// mode
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/query/mode`.
                public var mode: Components.Parameters.modeQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - mode: mode
                public init(mode: Components.Parameters.modeQuery) { self.mode = mode }
            }
            public var query: Operations.getRawBlockchainBlockHeader.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainBlockHeader.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockchainBlockHeader.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockchainBlockHeader.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawBlockchainBlockHeader.Input.Path,
                query: Operations.getRawBlockchainBlockHeader.Input.Query,
                headers: Operations.getRawBlockchainBlockHeader.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content/json/mode`.
                        public var mode: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content/json/header_proof`.
                        public var header_proof: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - mode:
                        ///   - header_proof:
                        public init(id: Components.Schemas.BlockRaw, mode: Swift.Int, header_proof: Swift.String) {
                            self.id = id
                            self.mode = mode
                            self.header_proof = header_proof
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case mode
                            case header_proof
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_header/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawBlockchainBlockHeader.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawBlockchainBlockHeader.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockchainBlockHeader.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockchainBlockHeader.Output.Ok.Body) { self.body = body }
            }
            /// raw blockchain block header
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block_header/{block_id}/get(getRawBlockchainBlockHeader)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockchainBlockHeader.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockchainBlockHeader.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block_header/{block_id}/get(getRawBlockchainBlockHeader)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Send raw message to blockchain
    ///
    /// - Remark: HTTP `POST /v2/liteserver/send_message`.
    /// - Remark: Generated from `#/paths//v2/liteserver/send_message/post(sendRawMessage)`.
    public enum sendRawMessage {
        public static let id: Swift.String = "sendRawMessage"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/send_message/POST/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.sendRawMessage.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.sendRawMessage.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.sendRawMessage.Input.Headers
            public var body: Components.RequestBodies.LiteServerSendMessageRequest
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - headers:
            ///   - body:
            public init(
                headers: Operations.sendRawMessage.Input.Headers = .init(),
                body: Components.RequestBodies.LiteServerSendMessageRequest
            ) {
                self.headers = headers
                self.body = body
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/send_message/POST/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/send_message/POST/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/send_message/POST/responses/200/content/json/code`.
                        public var code: Swift.Int
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - code:
                        public init(code: Swift.Int) { self.code = code }
                        public enum CodingKeys: String, CodingKey { case code }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/send_message/POST/responses/200/content/application\/json`.
                    case json(Operations.sendRawMessage.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.sendRawMessage.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.sendRawMessage.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.sendRawMessage.Output.Ok.Body) { self.body = body }
            }
            /// code
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/send_message/post(sendRawMessage)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.sendRawMessage.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.sendRawMessage.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/send_message/post(sendRawMessage)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw account state
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_account_state/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_account_state/{account_id}/get(getRawAccountState)`.
    public enum getRawAccountState {
        public static let id: Swift.String = "getRawAccountState"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getRawAccountState.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// target block: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/query/target_block`.
                public var target_block: Components.Parameters.targetBlockIDExtQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - target_block: target block: (workchain,shard,seqno,root_hash,file_hash)
                public init(target_block: Components.Parameters.targetBlockIDExtQuery? = nil) {
                    self.target_block = target_block
                }
            }
            public var query: Operations.getRawAccountState.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawAccountState.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawAccountState.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawAccountState.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawAccountState.Input.Path,
                query: Operations.getRawAccountState.Input.Query = .init(),
                headers: Operations.getRawAccountState.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json/shardblk`.
                        public var shardblk: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json/shard_proof`.
                        public var shard_proof: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json/proof`.
                        public var proof: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/json/state`.
                        public var state: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - shardblk:
                        ///   - shard_proof:
                        ///   - proof:
                        ///   - state:
                        public init(
                            id: Components.Schemas.BlockRaw,
                            shardblk: Components.Schemas.BlockRaw,
                            shard_proof: Swift.String,
                            proof: Swift.String,
                            state: Swift.String
                        ) {
                            self.id = id
                            self.shardblk = shardblk
                            self.shard_proof = shard_proof
                            self.proof = proof
                            self.state = state
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case shardblk
                            case shard_proof
                            case proof
                            case state
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_account_state/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawAccountState.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawAccountState.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawAccountState.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawAccountState.Output.Ok.Body) { self.body = body }
            }
            /// raw account state
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_account_state/{account_id}/get(getRawAccountState)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawAccountState.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawAccountState.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_account_state/{account_id}/get(getRawAccountState)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw shard info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_info/{block_id}/get(getRawShardInfo)`.
    public enum getRawShardInfo {
        public static let id: Swift.String = "getRawShardInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawShardInfo.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// workchain
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/query/workchain`.
                public var workchain: Components.Parameters.workchainQuery
                /// shard
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/query/shard`.
                public var shard: Components.Parameters.shardQuery
                /// exact
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/query/exact`.
                public var exact: Components.Parameters.exactQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - workchain: workchain
                ///   - shard: shard
                ///   - exact: exact
                public init(
                    workchain: Components.Parameters.workchainQuery,
                    shard: Components.Parameters.shardQuery,
                    exact: Components.Parameters.exactQuery
                ) {
                    self.workchain = workchain
                    self.shard = shard
                    self.exact = exact
                }
            }
            public var query: Operations.getRawShardInfo.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawShardInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawShardInfo.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawShardInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawShardInfo.Input.Path,
                query: Operations.getRawShardInfo.Input.Query,
                headers: Operations.getRawShardInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/json/shardblk`.
                        public var shardblk: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/json/shard_proof`.
                        public var shard_proof: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/json/shard_descr`.
                        public var shard_descr: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - shardblk:
                        ///   - shard_proof:
                        ///   - shard_descr:
                        public init(
                            id: Components.Schemas.BlockRaw,
                            shardblk: Components.Schemas.BlockRaw,
                            shard_proof: Swift.String,
                            shard_descr: Swift.String
                        ) {
                            self.id = id
                            self.shardblk = shardblk
                            self.shard_proof = shard_proof
                            self.shard_descr = shard_descr
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case shardblk
                            case shard_proof
                            case shard_descr
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_info/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawShardInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawShardInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawShardInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawShardInfo.Output.Ok.Body) { self.body = body }
            }
            /// raw shard info
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_info/{block_id}/get(getRawShardInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawShardInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawShardInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_info/{block_id}/get(getRawShardInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get all raw shards info
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_all_shards_info/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_all_shards_info/{block_id}/get(getAllRawShardsInfo)`.
    public enum getAllRawShardsInfo {
        public static let id: Swift.String = "getAllRawShardsInfo"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getAllRawShardsInfo.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getAllRawShardsInfo.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getAllRawShardsInfo.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getAllRawShardsInfo.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getAllRawShardsInfo.Input.Path,
                headers: Operations.getAllRawShardsInfo.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content/json/proof`.
                        public var proof: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content/json/data`.
                        public var data: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - proof:
                        ///   - data:
                        public init(id: Components.Schemas.BlockRaw, proof: Swift.String, data: Swift.String) {
                            self.id = id
                            self.proof = proof
                            self.data = data
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case proof
                            case data
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_all_shards_info/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getAllRawShardsInfo.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getAllRawShardsInfo.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getAllRawShardsInfo.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getAllRawShardsInfo.Output.Ok.Body) { self.body = body }
            }
            /// all raw shards info
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_all_shards_info/{block_id}/get(getAllRawShardsInfo)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getAllRawShardsInfo.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getAllRawShardsInfo.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_all_shards_info/{block_id}/get(getAllRawShardsInfo)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_transactions/{account_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_transactions/{account_id}/get(getRawTransactions)`.
    public enum getRawTransactions {
        public static let id: Swift.String = "getRawTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/path/account_id`.
                public var account_id: Components.Parameters.accountIDParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - account_id: account ID
                public init(account_id: Components.Parameters.accountIDParameter) { self.account_id = account_id }
            }
            public var path: Operations.getRawTransactions.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// count
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/query/count`.
                public var count: Components.Parameters.countQuery
                /// lt
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/query/lt`.
                public var lt: Components.Parameters.ltMustQuery
                /// hash
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/query/hash`.
                public var hash: Components.Parameters.hashQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - count: count
                ///   - lt: lt
                ///   - hash: hash
                public init(
                    count: Components.Parameters.countQuery,
                    lt: Components.Parameters.ltMustQuery,
                    hash: Components.Parameters.hashQuery
                ) {
                    self.count = count
                    self.lt = lt
                    self.hash = hash
                }
            }
            public var query: Operations.getRawTransactions.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawTransactions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawTransactions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawTransactions.Input.Path,
                query: Operations.getRawTransactions.Input.Query,
                headers: Operations.getRawTransactions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/responses/200/content/json/ids`.
                        public var ids: [Components.Schemas.BlockRaw]
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/responses/200/content/json/transactions`.
                        public var transactions: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - ids:
                        ///   - transactions:
                        public init(ids: [Components.Schemas.BlockRaw], transactions: Swift.String) {
                            self.ids = ids
                            self.transactions = transactions
                        }
                        public enum CodingKeys: String, CodingKey {
                            case ids
                            case transactions
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_transactions/{account_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawTransactions.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawTransactions.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawTransactions.Output.Ok.Body) { self.body = body }
            }
            /// raw transactions
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_transactions/{account_id}/get(getRawTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_transactions/{account_id}/get(getRawTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw list block transactions
    ///
    /// - Remark: HTTP `GET /v2/liteserver/list_block_transactions/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/list_block_transactions/{block_id}/get(getRawListBlockTransactions)`.
    public enum getRawListBlockTransactions {
        public static let id: Swift.String = "getRawListBlockTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawListBlockTransactions.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// mode
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/query/mode`.
                public var mode: Components.Parameters.modeQuery
                /// count
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/query/count`.
                public var count: Components.Parameters.countQuery
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/query/account_id`.
                public var account_id: Components.Parameters.accountIDQuery?
                /// lt
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/query/lt`.
                public var lt: Components.Parameters.ltQuery?
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - mode: mode
                ///   - count: count
                ///   - account_id: account ID
                ///   - lt: lt
                public init(
                    mode: Components.Parameters.modeQuery,
                    count: Components.Parameters.countQuery,
                    account_id: Components.Parameters.accountIDQuery? = nil,
                    lt: Components.Parameters.ltQuery? = nil
                ) {
                    self.mode = mode
                    self.count = count
                    self.account_id = account_id
                    self.lt = lt
                }
            }
            public var query: Operations.getRawListBlockTransactions.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawListBlockTransactions.AcceptableContentType
                    >]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawListBlockTransactions.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawListBlockTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawListBlockTransactions.Input.Path,
                query: Operations.getRawListBlockTransactions.Input.Query,
                headers: Operations.getRawListBlockTransactions.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/req_count`.
                        public var req_count: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/incomplete`.
                        public var incomplete: Swift.Bool
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/idsPayload`.
                        public struct idsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/idsPayload/mode`.
                            public var mode: Swift.Int
                            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/idsPayload/account`.
                            public var account: Swift.String?
                            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/idsPayload/lt`.
                            public var lt: Swift.Int?
                            /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/idsPayload/hash`.
                            public var hash: Swift.String?
                            /// Creates a new `idsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - mode:
                            ///   - account:
                            ///   - lt:
                            ///   - hash:
                            public init(
                                mode: Swift.Int,
                                account: Swift.String? = nil,
                                lt: Swift.Int? = nil,
                                hash: Swift.String? = nil
                            ) {
                                self.mode = mode
                                self.account = account
                                self.lt = lt
                                self.hash = hash
                            }
                            public enum CodingKeys: String, CodingKey {
                                case mode
                                case account
                                case lt
                                case hash
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/ids`.
                        public typealias idsPayload = [Operations.getRawListBlockTransactions.Output.Ok.Body.jsonPayload
                            .idsPayloadPayload]
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/ids`.
                        public var ids: Operations.getRawListBlockTransactions.Output.Ok.Body.jsonPayload.idsPayload
                        /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/json/proof`.
                        public var proof: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - id:
                        ///   - req_count:
                        ///   - incomplete:
                        ///   - ids:
                        ///   - proof:
                        public init(
                            id: Components.Schemas.BlockRaw,
                            req_count: Swift.Int,
                            incomplete: Swift.Bool,
                            ids: Operations.getRawListBlockTransactions.Output.Ok.Body.jsonPayload.idsPayload,
                            proof: Swift.String
                        ) {
                            self.id = id
                            self.req_count = req_count
                            self.incomplete = incomplete
                            self.ids = ids
                            self.proof = proof
                        }
                        public enum CodingKeys: String, CodingKey {
                            case id
                            case req_count
                            case incomplete
                            case ids
                            case proof
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/list_block_transactions/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawListBlockTransactions.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawListBlockTransactions.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawListBlockTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawListBlockTransactions.Output.Ok.Body) { self.body = body }
            }
            /// a list of raw block transactions
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/list_block_transactions/{block_id}/get(getRawListBlockTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawListBlockTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawListBlockTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/list_block_transactions/{block_id}/get(getRawListBlockTransactions)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_block_proof`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_block_proof/get(getRawBlockProof)`.
    public enum getRawBlockProof {
        public static let id: Swift.String = "getRawBlockProof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/query`.
            public struct Query: Sendable, Hashable {
                /// known block: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/query/known_block`.
                public var known_block: Components.Parameters.knownBlockIDExtQuery
                /// target block: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/query/target_block`.
                public var target_block: Components.Parameters.targetBlockIDExtQuery?
                /// mode
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/query/mode`.
                public var mode: Components.Parameters.modeQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - known_block: known block: (workchain,shard,seqno,root_hash,file_hash)
                ///   - target_block: target block: (workchain,shard,seqno,root_hash,file_hash)
                ///   - mode: mode
                public init(
                    known_block: Components.Parameters.knownBlockIDExtQuery,
                    target_block: Components.Parameters.targetBlockIDExtQuery? = nil,
                    mode: Components.Parameters.modeQuery
                ) {
                    self.known_block = known_block
                    self.target_block = target_block
                    self.mode = mode
                }
            }
            public var query: Operations.getRawBlockProof.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawBlockProof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawBlockProof.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawBlockProof.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getRawBlockProof.Input.Query,
                headers: Operations.getRawBlockProof.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/complete`.
                        public var complete: Swift.Bool
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/from`.
                        public var from: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/to`.
                        public var to: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload`.
                        public struct stepsPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back`.
                            public struct lite_server_block_link_backPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/to_key_block`.
                                public var to_key_block: Swift.Bool
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/from`.
                                public var from: Components.Schemas.BlockRaw
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/to`.
                                public var to: Components.Schemas.BlockRaw
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/dest_proof`.
                                public var dest_proof: Swift.String
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/proof`.
                                public var proof: Swift.String
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back/state_proof`.
                                public var state_proof: Swift.String
                                /// Creates a new `lite_server_block_link_backPayload`.
                                ///
                                /// - Parameters:
                                ///   - to_key_block:
                                ///   - from:
                                ///   - to:
                                ///   - dest_proof:
                                ///   - proof:
                                ///   - state_proof:
                                public init(
                                    to_key_block: Swift.Bool,
                                    from: Components.Schemas.BlockRaw,
                                    to: Components.Schemas.BlockRaw,
                                    dest_proof: Swift.String,
                                    proof: Swift.String,
                                    state_proof: Swift.String
                                ) {
                                    self.to_key_block = to_key_block
                                    self.from = from
                                    self.to = to
                                    self.dest_proof = dest_proof
                                    self.proof = proof
                                    self.state_proof = state_proof
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case to_key_block
                                    case from
                                    case to
                                    case dest_proof
                                    case proof
                                    case state_proof
                                }
                            }
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_back`.
                            public var lite_server_block_link_back:
                                Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayloadPayload
                                    .lite_server_block_link_backPayload
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward`.
                            public struct lite_server_block_link_forwardPayload: Codable, Hashable, Sendable {
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/to_key_block`.
                                public var to_key_block: Swift.Bool
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/from`.
                                public var from: Components.Schemas.BlockRaw
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/to`.
                                public var to: Components.Schemas.BlockRaw
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/dest_proof`.
                                public var dest_proof: Swift.String
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/config_proof`.
                                public var config_proof: Swift.String
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures`.
                                public struct signaturesPayload: Codable, Hashable, Sendable {
                                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/validator_set_hash`.
                                    public var validator_set_hash: Swift.Int
                                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/catchain_seqno`.
                                    public var catchain_seqno: Swift.Int
                                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/signaturesPayload`.
                                    public struct signaturesPayloadPayload: Codable, Hashable, Sendable {
                                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/signaturesPayload/node_id_short`.
                                        public var node_id_short: Swift.String
                                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/signaturesPayload/signature`.
                                        public var signature: Swift.String
                                        /// Creates a new `signaturesPayloadPayload`.
                                        ///
                                        /// - Parameters:
                                        ///   - node_id_short:
                                        ///   - signature:
                                        public init(node_id_short: Swift.String, signature: Swift.String) {
                                            self.node_id_short = node_id_short
                                            self.signature = signature
                                        }
                                        public enum CodingKeys: String, CodingKey {
                                            case node_id_short
                                            case signature
                                        }
                                    }
                                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/signatures`.
                                    public typealias signaturesPayload = [Operations.getRawBlockProof.Output.Ok.Body
                                        .jsonPayload.stepsPayloadPayload.lite_server_block_link_forwardPayload
                                        .signaturesPayload.signaturesPayloadPayload]
                                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures/signatures`.
                                    public var signatures:
                                        Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayloadPayload
                                            .lite_server_block_link_forwardPayload.signaturesPayload.signaturesPayload
                                    /// Creates a new `signaturesPayload`.
                                    ///
                                    /// - Parameters:
                                    ///   - validator_set_hash:
                                    ///   - catchain_seqno:
                                    ///   - signatures:
                                    public init(
                                        validator_set_hash: Swift.Int,
                                        catchain_seqno: Swift.Int,
                                        signatures: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload
                                            .stepsPayloadPayload.lite_server_block_link_forwardPayload.signaturesPayload
                                            .signaturesPayload
                                    ) {
                                        self.validator_set_hash = validator_set_hash
                                        self.catchain_seqno = catchain_seqno
                                        self.signatures = signatures
                                    }
                                    public enum CodingKeys: String, CodingKey {
                                        case validator_set_hash
                                        case catchain_seqno
                                        case signatures
                                    }
                                }
                                /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward/signatures`.
                                public var signatures:
                                    Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayloadPayload
                                        .lite_server_block_link_forwardPayload.signaturesPayload
                                /// Creates a new `lite_server_block_link_forwardPayload`.
                                ///
                                /// - Parameters:
                                ///   - to_key_block:
                                ///   - from:
                                ///   - to:
                                ///   - dest_proof:
                                ///   - config_proof:
                                ///   - signatures:
                                public init(
                                    to_key_block: Swift.Bool,
                                    from: Components.Schemas.BlockRaw,
                                    to: Components.Schemas.BlockRaw,
                                    dest_proof: Swift.String,
                                    config_proof: Swift.String,
                                    signatures: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload
                                        .stepsPayloadPayload.lite_server_block_link_forwardPayload.signaturesPayload
                                ) {
                                    self.to_key_block = to_key_block
                                    self.from = from
                                    self.to = to
                                    self.dest_proof = dest_proof
                                    self.config_proof = config_proof
                                    self.signatures = signatures
                                }
                                public enum CodingKeys: String, CodingKey {
                                    case to_key_block
                                    case from
                                    case to
                                    case dest_proof
                                    case config_proof
                                    case signatures
                                }
                            }
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/stepsPayload/lite_server_block_link_forward`.
                            public var lite_server_block_link_forward:
                                Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayloadPayload
                                    .lite_server_block_link_forwardPayload
                            /// Creates a new `stepsPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - lite_server_block_link_back:
                            ///   - lite_server_block_link_forward:
                            public init(
                                lite_server_block_link_back: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload
                                    .stepsPayloadPayload.lite_server_block_link_backPayload,
                                lite_server_block_link_forward: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload
                                    .stepsPayloadPayload.lite_server_block_link_forwardPayload
                            ) {
                                self.lite_server_block_link_back = lite_server_block_link_back
                                self.lite_server_block_link_forward = lite_server_block_link_forward
                            }
                            public enum CodingKeys: String, CodingKey {
                                case lite_server_block_link_back
                                case lite_server_block_link_forward
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/steps`.
                        public typealias stepsPayload = [Operations.getRawBlockProof.Output.Ok.Body.jsonPayload
                            .stepsPayloadPayload]
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/json/steps`.
                        public var steps: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - complete:
                        ///   - from:
                        ///   - to:
                        ///   - steps:
                        public init(
                            complete: Swift.Bool,
                            from: Components.Schemas.BlockRaw,
                            to: Components.Schemas.BlockRaw,
                            steps: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload.stepsPayload
                        ) {
                            self.complete = complete
                            self.from = from
                            self.to = to
                            self.steps = steps
                        }
                        public enum CodingKeys: String, CodingKey {
                            case complete
                            case from
                            case to
                            case steps
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_block_proof/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawBlockProof.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawBlockProof.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawBlockProof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawBlockProof.Output.Ok.Body) { self.body = body }
            }
            /// raw block proof
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block_proof/get(getRawBlockProof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawBlockProof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawBlockProof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_block_proof/get(getRawBlockProof)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw config
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_config_all/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_config_all/{block_id}/get(getRawConfig)`.
    public enum getRawConfig {
        public static let id: Swift.String = "getRawConfig"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawConfig.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/query`.
            public struct Query: Sendable, Hashable {
                /// mode
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/query/mode`.
                public var mode: Components.Parameters.modeQuery
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - mode: mode
                public init(mode: Components.Parameters.modeQuery) { self.mode = mode }
            }
            public var query: Operations.getRawConfig.Input.Query
            /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawConfig.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawConfig.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawConfig.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - query:
            ///   - headers:
            public init(
                path: Operations.getRawConfig.Input.Path,
                query: Operations.getRawConfig.Input.Query,
                headers: Operations.getRawConfig.Input.Headers = .init()
            ) {
                self.path = path
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/json/mode`.
                        public var mode: Swift.Int
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/json/id`.
                        public var id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/json/state_proof`.
                        public var state_proof: Swift.String
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/json/config_proof`.
                        public var config_proof: Swift.String
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - mode:
                        ///   - id:
                        ///   - state_proof:
                        ///   - config_proof:
                        public init(
                            mode: Swift.Int,
                            id: Components.Schemas.BlockRaw,
                            state_proof: Swift.String,
                            config_proof: Swift.String
                        ) {
                            self.mode = mode
                            self.id = id
                            self.state_proof = state_proof
                            self.config_proof = config_proof
                        }
                        public enum CodingKeys: String, CodingKey {
                            case mode
                            case id
                            case state_proof
                            case config_proof
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_config_all/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawConfig.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawConfig.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawConfig.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawConfig.Output.Ok.Body) { self.body = body }
            }
            /// raw config
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_config_all/{block_id}/get(getRawConfig)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawConfig.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawConfig.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_config_all/{block_id}/get(getRawConfig)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
    /// Get raw shard block proof
    ///
    /// - Remark: HTTP `GET /v2/liteserver/get_shard_block_proof/{block_id}`.
    /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_block_proof/{block_id}/get(getRawShardBlockProof)`.
    public enum getRawShardBlockProof {
        public static let id: Swift.String = "getRawShardBlockProof"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/path`.
            public struct Path: Sendable, Hashable {
                /// block ID: (workchain,shard,seqno,root_hash,file_hash)
                ///
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/path/block_id`.
                public var block_id: Components.Parameters.blockchainBlockIDExtParameter
                /// Creates a new `Path`.
                ///
                /// - Parameters:
                ///   - block_id: block ID: (workchain,shard,seqno,root_hash,file_hash)
                public init(block_id: Components.Parameters.blockchainBlockIDExtParameter) { self.block_id = block_id }
            }
            public var path: Operations.getRawShardBlockProof.Input.Path
            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getRawShardBlockProof.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<
                        Operations.getRawShardBlockProof.AcceptableContentType
                    >] = .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getRawShardBlockProof.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - path:
            ///   - headers:
            public init(
                path: Operations.getRawShardBlockProof.Input.Path,
                headers: Operations.getRawShardBlockProof.Input.Headers = .init()
            ) {
                self.path = path
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json`.
                    public struct jsonPayload: Codable, Hashable, Sendable {
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/masterchain_id`.
                        public var masterchain_id: Components.Schemas.BlockRaw
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/linksPayload`.
                        public struct linksPayloadPayload: Codable, Hashable, Sendable {
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/linksPayload/id`.
                            public var id: Components.Schemas.BlockRaw
                            /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/linksPayload/proof`.
                            public var proof: Swift.String
                            /// Creates a new `linksPayloadPayload`.
                            ///
                            /// - Parameters:
                            ///   - id:
                            ///   - proof:
                            public init(id: Components.Schemas.BlockRaw, proof: Swift.String) {
                                self.id = id
                                self.proof = proof
                            }
                            public enum CodingKeys: String, CodingKey {
                                case id
                                case proof
                            }
                        }
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/links`.
                        public typealias linksPayload = [Operations.getRawShardBlockProof.Output.Ok.Body.jsonPayload
                            .linksPayloadPayload]
                        /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/json/links`.
                        public var links: Operations.getRawShardBlockProof.Output.Ok.Body.jsonPayload.linksPayload
                        /// Creates a new `jsonPayload`.
                        ///
                        /// - Parameters:
                        ///   - masterchain_id:
                        ///   - links:
                        public init(
                            masterchain_id: Components.Schemas.BlockRaw,
                            links: Operations.getRawShardBlockProof.Output.Ok.Body.jsonPayload.linksPayload
                        ) {
                            self.masterchain_id = masterchain_id
                            self.links = links
                        }
                        public enum CodingKeys: String, CodingKey {
                            case masterchain_id
                            case links
                        }
                    }
                    /// - Remark: Generated from `#/paths/v2/liteserver/get_shard_block_proof/{block_id}/GET/responses/200/content/application\/json`.
                    case json(Operations.getRawShardBlockProof.Output.Ok.Body.jsonPayload)
                    /// The associated value of the enum case if `self` is `.json`.
                    ///
                    /// - Throws: An error if `self` is not `.json`.
                    /// - SeeAlso: `.json`.
                    public var json: Operations.getRawShardBlockProof.Output.Ok.Body.jsonPayload {
                        get throws {
                            switch self {
                            case let .json(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getRawShardBlockProof.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getRawShardBlockProof.Output.Ok.Body) { self.body = body }
            }
            /// raw shard block proof
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_block_proof/{block_id}/get(getRawShardBlockProof)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getRawShardBlockProof.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getRawShardBlockProof.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Some error during request processing
            ///
            /// - Remark: Generated from `#/paths//v2/liteserver/get_shard_block_proof/{block_id}/get(getRawShardBlockProof)/responses/default`.
            ///
            /// HTTP response code: `default`.
            case `default`(statusCode: Swift.Int, Components.Responses._Error)
            /// The associated value of the enum case if `self` is `.`default``.
            ///
            /// - Throws: An error if `self` is not `.`default``.
            /// - SeeAlso: `.`default``.
            public var `default`: Components.Responses._Error {
                get throws {
                    switch self {
                    case let .`default`(_, response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "default", response: self)
                    }
                }
            }
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case json
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "application/json": self = .json
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .json: return "application/json"
                }
            }
            public static var allCases: [Self] { [.json] }
        }
    }
}
