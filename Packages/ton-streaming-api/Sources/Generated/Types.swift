// Generated by swift-openapi-generator, do not modify.
@_spi(Generated) import OpenAPIRuntime
#if os(Linux)
@preconcurrency import struct Foundation.URL
@preconcurrency import struct Foundation.Data
@preconcurrency import struct Foundation.Date
#else
import struct Foundation.URL
import struct Foundation.Data
import struct Foundation.Date
#endif
/// A type that performs HTTP operations defined by the OpenAPI document.
public protocol APIProtocol: Sendable {
    /// Real-time notifications about transactions.
    ///
    /// - Remark: HTTP `GET /v2/sse/accounts/transactions`.
    /// - Remark: Generated from `#/paths//v2/sse/accounts/transactions/get(getTransactions)`.
    func getTransactions(_ input: Operations.getTransactions.Input) async throws -> Operations.getTransactions.Output
}
/// Convenience overloads for operation inputs.
extension APIProtocol {
    /// Real-time notifications about transactions.
    ///
    /// - Remark: HTTP `GET /v2/sse/accounts/transactions`.
    /// - Remark: Generated from `#/paths//v2/sse/accounts/transactions/get(getTransactions)`.
    public func getTransactions(
        query: Operations.getTransactions.Input.Query,
        headers: Operations.getTransactions.Input.Headers = .init()
    ) async throws -> Operations.getTransactions.Output {
        try await getTransactions(Operations.getTransactions.Input(query: query, headers: headers))
    }
}
/// Server URLs defined in the OpenAPI document.
public enum Servers {
    public static func server1() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://tonapi.io")
    }
    public static func server2() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "https://testnet.tonapi.io")
    }
    public static func server3() throws -> Foundation.URL {
        try Foundation.URL(validatingOpenAPIServerURL: "http://localhost:8081")
    }
}
/// Types generated from the components section of the OpenAPI document.
public enum Components {
    /// Types generated from the `#/components/schemas` section of the OpenAPI document.
    public enum Schemas {}
    /// Types generated from the `#/components/parameters` section of the OpenAPI document.
    public enum Parameters {
        /// account ID
        ///
        /// - Remark: Generated from `#/components/parameters/accountsParameter`.
        public typealias accountsParameter = [Swift.String]
    }
    /// Types generated from the `#/components/requestBodies` section of the OpenAPI document.
    public enum RequestBodies {}
    /// Types generated from the `#/components/responses` section of the OpenAPI document.
    public enum Responses {}
    /// Types generated from the `#/components/headers` section of the OpenAPI document.
    public enum Headers {}
}
/// API operations, with input and output types, generated from `#/paths` in the OpenAPI document.
public enum Operations {
    /// Real-time notifications about transactions.
    ///
    /// - Remark: HTTP `GET /v2/sse/accounts/transactions`.
    /// - Remark: Generated from `#/paths//v2/sse/accounts/transactions/get(getTransactions)`.
    public enum getTransactions {
        public static let id: Swift.String = "getTransactions"
        public struct Input: Sendable, Hashable {
            /// - Remark: Generated from `#/paths/v2/sse/accounts/transactions/GET/query`.
            public struct Query: Sendable, Hashable {
                /// account ID
                ///
                /// - Remark: Generated from `#/paths/v2/sse/accounts/transactions/GET/query/accounts`.
                public var accounts: Components.Parameters.accountsParameter
                /// Creates a new `Query`.
                ///
                /// - Parameters:
                ///   - accounts: account ID
                public init(accounts: Components.Parameters.accountsParameter) { self.accounts = accounts }
            }
            public var query: Operations.getTransactions.Input.Query
            /// - Remark: Generated from `#/paths/v2/sse/accounts/transactions/GET/header`.
            public struct Headers: Sendable, Hashable {
                public var accept:
                    [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransactions.AcceptableContentType>]
                /// Creates a new `Headers`.
                ///
                /// - Parameters:
                ///   - accept:
                public init(
                    accept: [OpenAPIRuntime.AcceptHeaderContentType<Operations.getTransactions.AcceptableContentType>] =
                        .defaultValues()
                ) { self.accept = accept }
            }
            public var headers: Operations.getTransactions.Input.Headers
            /// Creates a new `Input`.
            ///
            /// - Parameters:
            ///   - query:
            ///   - headers:
            public init(
                query: Operations.getTransactions.Input.Query,
                headers: Operations.getTransactions.Input.Headers = .init()
            ) {
                self.query = query
                self.headers = headers
            }
        }
        @frozen public enum Output: Sendable, Hashable {
            public struct Ok: Sendable, Hashable {
                /// - Remark: Generated from `#/paths/v2/sse/accounts/transactions/GET/responses/200/content`.
                @frozen public enum Body: Sendable, Hashable {
                    /// - Remark: Generated from `#/paths/v2/sse/accounts/transactions/GET/responses/200/content/text\/event-stream`.
                    case text_event_hyphen_stream(OpenAPIRuntime.HTTPBody)
                    /// The associated value of the enum case if `self` is `.text_event_hyphen_stream`.
                    ///
                    /// - Throws: An error if `self` is not `.text_event_hyphen_stream`.
                    /// - SeeAlso: `.text_event_hyphen_stream`.
                    public var text_event_hyphen_stream: OpenAPIRuntime.HTTPBody {
                        get throws {
                            switch self {
                            case let .text_event_hyphen_stream(body): return body
                            }
                        }
                    }
                }
                /// Received HTTP response body
                public var body: Operations.getTransactions.Output.Ok.Body
                /// Creates a new `Ok`.
                ///
                /// - Parameters:
                ///   - body: Received HTTP response body
                public init(body: Operations.getTransactions.Output.Ok.Body) { self.body = body }
            }
            /// OK
            ///
            /// - Remark: Generated from `#/paths//v2/sse/accounts/transactions/get(getTransactions)/responses/200`.
            ///
            /// HTTP response code: `200 ok`.
            case ok(Operations.getTransactions.Output.Ok)
            /// The associated value of the enum case if `self` is `.ok`.
            ///
            /// - Throws: An error if `self` is not `.ok`.
            /// - SeeAlso: `.ok`.
            public var ok: Operations.getTransactions.Output.Ok {
                get throws {
                    switch self {
                    case let .ok(response): return response
                    default: try throwUnexpectedResponseStatus(expectedStatus: "ok", response: self)
                    }
                }
            }
            /// Undocumented response.
            ///
            /// A response with a code that is not documented in the OpenAPI document.
            case undocumented(statusCode: Swift.Int, OpenAPIRuntime.UndocumentedPayload)
        }
        @frozen public enum AcceptableContentType: AcceptableProtocol {
            case text_event_hyphen_stream
            case other(Swift.String)
            public init?(rawValue: Swift.String) {
                switch rawValue.lowercased() {
                case "text/event-stream": self = .text_event_hyphen_stream
                default: self = .other(rawValue)
                }
            }
            public var rawValue: Swift.String {
                switch self {
                case let .other(string): return string
                case .text_event_hyphen_stream: return "text/event-stream"
                }
            }
            public static var allCases: [Self] { [.text_event_hyphen_stream] }
        }
    }
}
