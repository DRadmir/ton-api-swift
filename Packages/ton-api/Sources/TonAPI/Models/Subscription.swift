//
// Subscription.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct Subscription: Codable, JSONEncodable, Hashable {

    public var address: String
    public var walletAddress: String
    public var beneficiaryAddress: String
    public var amount: Int64
    public var period: Int64
    public var startTime: Int64
    public var timeout: Int64
    public var lastPaymentTime: Int64
    public var lastRequestTime: Int64
    public var subscriptionId: Int64
    public var failedAttempts: Int

    public init(address: String, walletAddress: String, beneficiaryAddress: String, amount: Int64, period: Int64, startTime: Int64, timeout: Int64, lastPaymentTime: Int64, lastRequestTime: Int64, subscriptionId: Int64, failedAttempts: Int) {
        self.address = address
        self.walletAddress = walletAddress
        self.beneficiaryAddress = beneficiaryAddress
        self.amount = amount
        self.period = period
        self.startTime = startTime
        self.timeout = timeout
        self.lastPaymentTime = lastPaymentTime
        self.lastRequestTime = lastRequestTime
        self.subscriptionId = subscriptionId
        self.failedAttempts = failedAttempts
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case address
        case walletAddress = "wallet_address"
        case beneficiaryAddress = "beneficiary_address"
        case amount
        case period
        case startTime = "start_time"
        case timeout
        case lastPaymentTime = "last_payment_time"
        case lastRequestTime = "last_request_time"
        case subscriptionId = "subscription_id"
        case failedAttempts = "failed_attempts"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(address, forKey: .address)
        try container.encode(walletAddress, forKey: .walletAddress)
        try container.encode(beneficiaryAddress, forKey: .beneficiaryAddress)
        try container.encode(amount, forKey: .amount)
        try container.encode(period, forKey: .period)
        try container.encode(startTime, forKey: .startTime)
        try container.encode(timeout, forKey: .timeout)
        try container.encode(lastPaymentTime, forKey: .lastPaymentTime)
        try container.encode(lastRequestTime, forKey: .lastRequestTime)
        try container.encode(subscriptionId, forKey: .subscriptionId)
        try container.encode(failedAttempts, forKey: .failedAttempts)
    }
}

