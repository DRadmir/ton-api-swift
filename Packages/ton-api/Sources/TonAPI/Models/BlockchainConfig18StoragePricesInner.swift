//
// BlockchainConfig18StoragePricesInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BlockchainConfig18StoragePricesInner: Codable, JSONEncodable, Hashable {

    public var utimeSince: Int64
    public var bitPricePs: Int64
    public var cellPricePs: Int64
    public var mcBitPricePs: Int64
    public var mcCellPricePs: Int64

    public init(utimeSince: Int64, bitPricePs: Int64, cellPricePs: Int64, mcBitPricePs: Int64, mcCellPricePs: Int64) {
        self.utimeSince = utimeSince
        self.bitPricePs = bitPricePs
        self.cellPricePs = cellPricePs
        self.mcBitPricePs = mcBitPricePs
        self.mcCellPricePs = mcCellPricePs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case utimeSince = "utime_since"
        case bitPricePs = "bit_price_ps"
        case cellPricePs = "cell_price_ps"
        case mcBitPricePs = "mc_bit_price_ps"
        case mcCellPricePs = "mc_cell_price_ps"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(utimeSince, forKey: .utimeSince)
        try container.encode(bitPricePs, forKey: .bitPricePs)
        try container.encode(cellPricePs, forKey: .cellPricePs)
        try container.encode(mcBitPricePs, forKey: .mcBitPricePs)
        try container.encode(mcCellPricePs, forKey: .mcCellPricePs)
    }
}

